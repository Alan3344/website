"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[2172],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),f=o,m=c["".concat(u,".").concat(f)]||c[f]||p[f]||l;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294),o=n(6010),l="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return E}});var a=n(7462),o=n(7294),l=n(6010),r=n(2466),i=n(6550),u=n(1980),s=n(7392),d=n(12);function c(e){return function(e){var t,n;return null!=(t=null==(n=o.Children.map(e,(function(e){if(!e||(0,o.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,o.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function f(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function m(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,l=(0,i.k6)(),r=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,u._X)(r),(0,o.useCallback)((function(e){if(r){var t=new URLSearchParams(l.location.search);t.set(r,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[r,l])]}function h(e){var t,n,a,l,r=e.defaultValue,i=e.queryString,u=void 0!==i&&i,s=e.groupId,c=p(e),h=(0,o.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:r,tabValues:c})})),v=h[0],k=h[1],b=m({queryString:u,groupId:s}),g=b[0],N=b[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,d.Nk)(t),a=n[0],l=n[1],[a,(0,o.useCallback)((function(e){t&&l.set(e)}),[t,l])]),E=y[0],w=y[1],C=function(){var e=null!=g?g:E;return f({value:e,tabValues:c})?e:null}();return(0,o.useLayoutEffect)((function(){C&&k(C)}),[C]),{selectedValue:v,selectValue:(0,o.useCallback)((function(e){if(!f({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);k(e),N(e),w(e)}),[N,w,c]),tabValues:c}}var v=n(2389),k="tabList__CuJ",b="tabItem_LNqP";function g(e){var t=e.className,n=e.block,i=e.selectedValue,u=e.selectValue,s=e.tabValues,d=[],c=(0,r.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==i&&(c(t),u(a))},f=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,o=d.indexOf(e.currentTarget)+1;n=null!=(a=d[o])?a:d[0];break;case"ArrowLeft":var l,r=d.indexOf(e.currentTarget)-1;n=null!=(l=d[r])?l:d[d.length-1]}null==(t=n)||t.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},s.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:function(e){return d.push(e)},onKeyDown:f,onClick:p},r,{className:(0,l.Z)("tabs__item",b,null==r?void 0:r.className,{"tabs__item--active":i===t})}),null!=n?n:t)})))}function N(e){var t=e.lazy,n=e.children,a=e.selectedValue,l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var r=l.find((function(e){return e.props.value===a}));return r?(0,o.cloneElement)(r,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},l.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function y(e){var t=h(e);return o.createElement("div",{className:(0,l.Z)("tabs-container",k)},o.createElement(g,(0,a.Z)({},e,t)),o.createElement(N,(0,a.Z)({},e,t)))}function E(e){var t=(0,v.Z)();return o.createElement(y,(0,a.Z)({key:String(t)},e))}},5079:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return f}});var a=n(7462),o=n(3366),l=(n(7294),n(3905)),r=n(4866),i=n(5162),u=["components"],s={title:"ElevatedButton",sidebar_label:"ElevatedButton",slug:"elevatedbutton"},d=void 0,c={unversionedId:"controls/elevatedbutton",id:"controls/elevatedbutton",title:"ElevatedButton",description:"Elevated buttons are essentially filled tonal buttons with a shadow. To prevent shadow creep, only use them when absolutely necessary, such as when the button requires visual separation from a patterned background. See Material 3 buttons for more info.",source:"@site/docs/controls/elevatedbutton.md",sourceDirName:"controls",slug:"/controls/elevatedbutton",permalink:"/docs/controls/elevatedbutton",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/elevatedbutton.md",tags:[],version:"current",frontMatter:{title:"ElevatedButton",sidebar_label:"ElevatedButton",slug:"elevatedbutton"},sidebar:"docs",previous:{title:"Buttons",permalink:"/docs/controls/buttons"},next:{title:"FilledButton",permalink:"/docs/controls/filledbutton"}},p={},f=[{value:"Examples",id:"examples",level:2},{value:"Basic elevated buttons",id:"basic-elevated-buttons",level:3},{value:"Elevated buttons with icons",id:"elevated-buttons-with-icons",level:3},{value:"Elevated button with <code>click</code> event",id:"elevated-button-with-click-event",level:3},{value:"Elevated button with custom content",id:"elevated-button-with-custom-content",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>autofocus</code>",id:"autofocus",level:3},{value:"<code>bgcolor</code>",id:"bgcolor",level:3},{value:"<code>color</code>",id:"color",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>elevation</code>",id:"elevation",level:3},{value:"<code>icon</code>",id:"icon",level:3},{value:"<code>icon_color</code>",id:"icon_color",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>ButtonStyle</code> class",id:"buttonstyle-class",level:4},{value:"<code>text</code>",id:"text",level:3},{value:"<code>tooltip</code>",id:"tooltip",level:3},{value:"<code>url</code>",id:"url",level:3},{value:"<code>url_target</code>",id:"url_target",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>focus()</code>",id:"focus",level:3},{value:"Events",id:"events",level:2},{value:"<code>on_blur</code>",id:"on_blur",level:3},{value:"<code>on_click</code>",id:"on_click",level:3},{value:"<code>on_focus</code>",id:"on_focus",level:3},{value:"<code>on_hover</code>",id:"on_hover",level:3},{value:"<code>on_long_press</code>",id:"on_long_press",level:3}],m={toc:f};function h(e){var t=e.components,n=(0,o.Z)(e,u);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Elevated buttons are essentially filled tonal buttons with a shadow. To prevent shadow creep, only use them when absolutely necessary, such as when the button requires visual separation from a patterned background. See ",(0,l.kt)("a",{parentName:"p",href:"https://m3.material.io/components/buttons/overview"},"Material 3 buttons")," for more info."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/buttons/elevatedbutton"},"Live example")),(0,l.kt)("h3",{id:"basic-elevated-buttons"},"Basic elevated buttons"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Basic elevated buttons"\n    page.add(\n        ft.ElevatedButton(text="Elevated button"),\n        ft.ElevatedButton("Disabled button", disabled=True),\n    )\n\nft.app(target=main)\n')))),(0,l.kt)("img",{src:"/img/docs/controls/elevated-button/basic-elevated-buttons.png",className:"screenshot-20"}),(0,l.kt)("h3",{id:"elevated-buttons-with-icons"},"Elevated buttons with icons"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = "Elevated buttons with icons"\n    page.add(\n        ft.ElevatedButton("Button with icon", icon="chair_outlined"),\n        ft.ElevatedButton(\n            "Button with colorful icon",\n            icon="park_rounded",\n            icon_color="green400",\n        ),\n    )\n\nft.app(target=main)\n')))),(0,l.kt)("img",{src:"/img/docs/controls/elevated-button/elevated-buttons-with-icons.png",className:"screenshot-30"}),(0,l.kt)("h3",{id:"elevated-button-with-click-event"},"Elevated button with ",(0,l.kt)("inlineCode",{parentName:"h3"},"click")," event"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Elevated button with \'click\' event"\n\n    def button_clicked(e):\n        b.data += 1\n        t.value = f"Button clicked {b.data} time(s)"\n        page.update()\n\n    b = ft.ElevatedButton("Button with \'click\' event", on_click=button_clicked, data=0)\n    t = ft.Text()\n\n    page.add(b, t)\n\nft.app(target=main)\n')))),(0,l.kt)("img",{src:"/img/docs/controls/elevated-button/elevated-button-with-click-event.gif",className:"screenshot-50"}),(0,l.kt)("h3",{id:"elevated-button-with-custom-content"},"Elevated button with custom content"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Elevated buttons with custom content"\n    page.add(\n        ft.ElevatedButton(\n            width=150,\n            content=ft.Row(\n                [\n                    ft.Icon(name=ft.icons.FAVORITE, color="pink"),\n                    ft.Icon(name=ft.icons.AUDIOTRACK, color="green"),\n                    ft.Icon(name=ft.icons.BEACH_ACCESS, color="blue"),\n                ],\n                alignment=ft.MainAxisAlignment.SPACE_AROUND,\n            ),\n        ),\n        ft.ElevatedButton(\n            content=ft.Container(\n                content=ft.Column(\n                    [\n                        ft.Text(value="Compound button", size=20),\n                        ft.Text(value="This is secondary text"),\n                    ],\n                    alignment=ft.MainAxisAlignment.CENTER,\n                    spacing=5,\n                ),\n                padding=ft.padding.all(10),\n            ),\n        ),\n    )\n\nft.app(target=main)\n')))),(0,l.kt)("img",{src:"/img/docs/controls/elevated-button/elevated-buttons-with-custom-content.png",className:"screenshot-30"}),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"autofocus"},(0,l.kt)("inlineCode",{parentName:"h3"},"autofocus")),(0,l.kt)("p",null,"True if the control will be selected as the initial focus. If there is more than one control on a page with autofocus set, then the first one added to the page will get focus."),(0,l.kt)("h3",{id:"bgcolor"},(0,l.kt)("inlineCode",{parentName:"h3"},"bgcolor")),(0,l.kt)("p",null,"Button's background ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),"."),(0,l.kt)("h3",{id:"color"},(0,l.kt)("inlineCode",{parentName:"h3"},"color")),(0,l.kt)("p",null,"Button's text ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),"."),(0,l.kt)("h3",{id:"content"},(0,l.kt)("inlineCode",{parentName:"h3"},"content")),(0,l.kt)("p",null,"A Control representing custom button content."),(0,l.kt)("h3",{id:"elevation"},(0,l.kt)("inlineCode",{parentName:"h3"},"elevation")),(0,l.kt)("p",null,"Button's elevation."),(0,l.kt)("h3",{id:"icon"},(0,l.kt)("inlineCode",{parentName:"h3"},"icon")),(0,l.kt)("p",null,"Icon shown in the button."),(0,l.kt)("h3",{id:"icon_color"},(0,l.kt)("inlineCode",{parentName:"h3"},"icon_color")),(0,l.kt)("p",null,"Icon ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),"."),(0,l.kt)("h3",{id:"style"},(0,l.kt)("inlineCode",{parentName:"h3"},"style")),(0,l.kt)("p",null,"The value is an instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"ButtonStyle")," class. ",(0,l.kt)("inlineCode",{parentName:"p"},"ButtonStyle")," allows controling all visual aspects of a button, such as shape, foreground, background and shadow colors, content padding, border width and radius."),(0,l.kt)("p",null,'Each individual style attribute could be configured for all or particular "Material states" of a button, such as "hovered", "focused", "disabled" and others. For example, you can configure a different shape, background color for a hovered state and configure fallback values for all other states.'),(0,l.kt)("p",null,"The following ",(0,l.kt)("inlineCode",{parentName:"p"},"MaterialState")," values are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HOVERED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FOCUSED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PRESSED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DRAGGED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SELECTED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SCROLLEDUNDER")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISABLED")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ERROR")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DEFAULT"),' - fallback state, meaning "all other states".')),(0,l.kt)("p",null,"To configure style attribute for all Material states set its value to a literal (or class instance). For example, if you set ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," property to a literal the value will be applied to all button states:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ButtonStyle(\n    color=ft.colors.WHITE\n)\n")),(0,l.kt)("p",null,"To configure style attribute for specific Material states set its value to a dictionary where the key is state name. For example, to configure different background colors for ",(0,l.kt)("inlineCode",{parentName:"p"},"HOVERED")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"FOCUSED")," states and another colors for all other states:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ButtonStyle(\n    color={\n        ft.MaterialState.HOVERED: ft.colors.WHITE,\n        ft.MaterialState.FOCUSED: ft.colors.BLUE,\n        ft.MaterialState.DEFAULT: ft.colors.BLACK,\n    }\n)\n")),(0,l.kt)("p",null,"Check the following example:"),(0,l.kt)("img",{src:"/img/blog/gradients/styled-button.gif",className:"screenshot-30"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\nfrom flet.border import BorderSide\nfrom flet.buttons import RoundedRectangleBorder\n\ndef main(page: ft.Page):\n\n    page.add(\n        ft.ElevatedButton(\n            "Styled button 1",\n            style=ft.ButtonStyle(\n                color={\n                    ft.MaterialState.HOVERED: ft.colors.WHITE,\n                    ft.MaterialState.FOCUSED: ft.colors.BLUE,\n                    ft.MaterialState.DEFAULT: ft.colors.BLACK,\n                },\n                bgcolor={ft.MaterialState.FOCUSED: ft.colors.PINK_200, "": ft.colors.YELLOW},\n                padding={ft.MaterialState.HOVERED: 20},\n                overlay_color=ft.colors.TRANSPARENT,\n                elevation={"pressed": 0, "": 1},\n                animation_duration=500,\n                side={\n                    ft.MaterialState.DEFAULT: BorderSide(1, ft.colors.BLUE),\n                    ft.MaterialState.HOVERED: BorderSide(2, ft.colors.BLUE),\n                },\n                shape={\n                    ft.MaterialState.HOVERED: RoundedRectangleBorder(radius=20),\n                    ft.MaterialState.DEFAULT: RoundedRectangleBorder(radius=2),\n                },\n            ),\n        )\n    )\n\nft.app(target=main)\n')),(0,l.kt)("h4",{id:"buttonstyle-class"},(0,l.kt)("inlineCode",{parentName:"h4"},"ButtonStyle")," class"),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"ButtonStyle")," class has the following properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"color")," - The color for the button's Text and Icon control descendants."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bgcolor")," - The button's background fill color."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"overlay_color")," - The highlight color that's typically used to indicate that the button is focused, hovered, or pressed."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shadow_color")," - The shadow color of the button's Material."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"surface_tint_color")," - The surface tint color of the button's Material."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"elevation")," - The elevation of the button's Material."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"animation_duration")," - Defines the duration in milliseconds of animated changes for shape and elevation."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"padding")," - The padding between the button's boundary and its child."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"side")," - An instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"BorderSide")," class, the color and weight of the button's outline."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shape")," - The shape of the button's underlying Material, an instance of one of the following implementations:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"StadiumBorder")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RoundedRectangleBorder"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"radius")," - border radius, an instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"BorderRadius")," class or a number."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CircleBorder")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BeveledRectangleBorder"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"radius")," - border radius, an instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"BorderRadius")," class or a number."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CountinuosRectangleBorder"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"radius")," - border radius, an instance of ",(0,l.kt)("inlineCode",{parentName:"li"},"BorderRadius")," class or a number.")))))),(0,l.kt)("p",null,"This is an example demonstrating various button shapes:"),(0,l.kt)("img",{src:"/img/blog/gradients/button-shapes.png",className:"screenshot-20"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.padding = 30\n    page.spacing = 30\n    page.add(\n        ft.FilledButton(\n            "Stadium",\n            style=ft.ButtonStyle(\n                shape=ft.StadiumBorder(),\n            ),\n        ),\n        ft.FilledButton(\n            "Rounded rectangle",\n            style=ft.ButtonStyle(\n                shape=ft.RoundedRectangleBorder(radius=10),\n            ),\n        ),\n        ft.FilledButton(\n            "Continuous rectangle",\n            style=ft.ButtonStyle(\n                shape=ft.CountinuosRectangleBorder(radius=30),\n            ),\n        ),\n        ft.FilledButton(\n            "Beveled rectangle",\n            style=ft.ButtonStyle(\n                shape=ft.BeveledRectangleBorder(radius=10),\n            ),\n        ),\n        ft.FilledButton(\n            "Circle",\n            style=ft.ButtonStyle(shape=ft.CircleBorder(), padding=30),\n        ),\n    )\n\nft.app(target=main)\n')),(0,l.kt)("h3",{id:"text"},(0,l.kt)("inlineCode",{parentName:"h3"},"text")),(0,l.kt)("p",null,"The text displayed on a button."),(0,l.kt)("h3",{id:"tooltip"},(0,l.kt)("inlineCode",{parentName:"h3"},"tooltip")),(0,l.kt)("p",null,"The text displayed when hovering the mouse over the button."),(0,l.kt)("h3",{id:"url"},(0,l.kt)("inlineCode",{parentName:"h3"},"url")),(0,l.kt)("p",null,"The URL to open when the button is clicked. If registered, ",(0,l.kt)("inlineCode",{parentName:"p"},"on_click")," event is fired after that."),(0,l.kt)("h3",{id:"url_target"},(0,l.kt)("inlineCode",{parentName:"h3"},"url_target")),(0,l.kt)("p",null,"Where to open URL in the web mode:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_blank")," (default) - new tab/window."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_self")," - the current tab/window.")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"focus"},(0,l.kt)("inlineCode",{parentName:"h3"},"focus()")),(0,l.kt)("p",null,"Moves focus to a button."),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"on_blur"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_blur")),(0,l.kt)("p",null,"Fires when the control has lost focus."),(0,l.kt)("h3",{id:"on_click"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_click")),(0,l.kt)("p",null,"Fires when a user clicks the button."),(0,l.kt)("h3",{id:"on_focus"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_focus")),(0,l.kt)("p",null,"Fires when the control has received focus."),(0,l.kt)("h3",{id:"on_hover"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_hover")),(0,l.kt)("p",null,"Fires when a mouse pointer enters or exists the button response area. ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," property of event object contains ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," (string) when cursor enters and ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," when it exits."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    def on_hover(e):\n        e.control.bgcolor = "orange" if e.data == "true" else "yellow"\n        e.control.update()\n\n    page.add(\n        ft.ElevatedButton(\n            "I\'m changing color on hover", bgcolor="yellow", on_hover=on_hover\n        )\n    )\n\nft.app(target=main)\n')),(0,l.kt)("h3",{id:"on_long_press"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_long_press")),(0,l.kt)("p",null,"Fires when the button is long-pressed."))}h.isMDXComponent=!0}}]);