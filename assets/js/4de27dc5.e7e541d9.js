"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[4685],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,h=c["".concat(d,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(h,l(l({ref:n},s),{},{components:t})):a.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return l}});var a=t(7294),i=t(6010),r="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return _}});var a=t(7462),i=t(7294),r=t(6010),l=t(2466),o=t(6550),d=t(1980),p=t(7392),s=t(12);function c(e){return function(e){var n,t;return null!=(n=null==(t=i.Children.map(e,(function(e){if(!e||(0,i.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function m(e){var n=e.values,t=e.children;return(0,i.useMemo)((function(){var e=null!=n?n:c(t);return function(e){var n=(0,p.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function u(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function h(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,r=(0,o.k6)(),l=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,d._X)(l),(0,i.useCallback)((function(e){if(l){var n=new URLSearchParams(r.location.search);n.set(l,e),r.replace(Object.assign({},r.location,{search:n.toString()}))}}),[l,r])]}function f(e){var n,t,a,r,l=e.defaultValue,o=e.queryString,d=void 0!==o&&o,p=e.groupId,c=m(e),f=(0,i.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var i=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:l,tabValues:c})})),k=f[0],g=f[1],N=h({queryString:d,groupId:p}),b=N[0],C=N[1],v=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),t=(0,s.Nk)(n),a=t[0],r=t[1],[a,(0,i.useCallback)((function(e){n&&r.set(e)}),[n,r])]),_=v[0],w=v[1],y=function(){var e=null!=b?b:_;return u({value:e,tabValues:c})?e:null}();return(0,i.useLayoutEffect)((function(){y&&g(y)}),[y]),{selectedValue:k,selectValue:(0,i.useCallback)((function(e){if(!u({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);g(e),C(e),w(e)}),[C,w,c]),tabValues:c}}var k=t(2389),g="tabList__CuJ",N="tabItem_LNqP";function b(e){var n=e.className,t=e.block,o=e.selectedValue,d=e.selectValue,p=e.tabValues,s=[],c=(0,l.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var n=e.currentTarget,t=s.indexOf(n),a=p[t].value;a!==o&&(c(n),d(a))},u=function(e){var n,t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,i=s.indexOf(e.currentTarget)+1;t=null!=(a=s[i])?a:s[0];break;case"ArrowLeft":var r,l=s.indexOf(e.currentTarget)-1;t=null!=(r=s[l])?r:s[s.length-1]}null==(n=t)||n.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},p.map((function(e){var n=e.value,t=e.label,l=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:function(e){return s.push(e)},onKeyDown:u,onClick:m},l,{className:(0,r.Z)("tabs__item",N,null==l?void 0:l.className,{"tabs__item--active":o===n})}),null!=t?t:n)})))}function C(e){var n=e.lazy,t=e.children,a=e.selectedValue,r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var l=r.find((function(e){return e.props.value===a}));return l?(0,i.cloneElement)(l,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function v(e){var n=f(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",g)},i.createElement(b,(0,a.Z)({},e,n)),i.createElement(C,(0,a.Z)({},e,n)))}function _(e){var n=(0,k.Z)();return i.createElement(v,(0,a.Z)({key:String(n)},e))}},1515:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=t(4866),o=t(5162),d=["components"],p={title:"Container",sidebar_label:"Container",slug:"container"},s=void 0,c={unversionedId:"controls/container",id:"controls/container",title:"Container",description:"Container allows to decorate a control with background color and border and position it with padding, margin and alignment.",source:"@site/docs/controls/container.md",sourceDirName:"controls",slug:"/controls/container",permalink:"/docs/controls/container",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/container.md",tags:[],version:"current",frontMatter:{title:"Container",sidebar_label:"Container",slug:"container"},sidebar:"docs",previous:{title:"View",permalink:"/docs/controls/view"},next:{title:"Row",permalink:"/docs/controls/row"}},m={},u=[{value:"Examples",id:"examples",level:2},{value:"Containers with different background color",id:"containers-with-different-background-color",level:3},{value:"Clickable container",id:"clickable-container",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>alignment</code>",id:"alignment",level:3},{value:"<code>animate</code>",id:"animate",level:3},{value:"<code>bgcolor</code>",id:"bgcolor",level:3},{value:"<code>blend_mode</code>",id:"blend_mode",level:3},{value:"<code>blur</code>",id:"blur",level:3},{value:"<code>border</code>",id:"border",level:3},{value:"<code>border_radius</code>",id:"border_radius",level:3},{value:"<code>clip_behavior</code>",id:"clip_behavior",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>gradient</code>",id:"gradient",level:3},{value:"<code>LinearGradient</code>",id:"lineargradient",level:4},{value:"<code>RadialGradient</code>",id:"radialgradient",level:4},{value:"<code>SweepGradient</code>",id:"sweepgradient",level:4},{value:"<code>image_fit</code>",id:"image_fit",level:3},{value:"<code>image_opacity</code>",id:"image_opacity",level:3},{value:"<code>image_repeat</code>",id:"image_repeat",level:3},{value:"<code>image_src</code>",id:"image_src",level:3},{value:"<code>image_src_base64</code>",id:"image_src_base64",level:3},{value:"<code>ink</code>",id:"ink",level:3},{value:"<code>margin</code>",id:"margin",level:3},{value:"<code>padding</code>",id:"padding",level:3},{value:"<code>shadow</code>",id:"shadow",level:3},{value:"<code>shape</code>",id:"shape",level:3},{value:"<code>theme_mode</code>",id:"theme_mode",level:3},{value:"<code>theme</code>",id:"theme",level:3},{value:"<code>url</code>",id:"url",level:3},{value:"<code>url_target</code>",id:"url_target",level:3},{value:"Events",id:"events",level:2},{value:"<code>on_click</code>",id:"on_click",level:3},{value:"<code>on_hover</code>",id:"on_hover",level:3},{value:"<code>on_long_press</code>",id:"on_long_press",level:3}],h={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,d);return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Container allows to decorate a control with background color and border and position it with padding, margin and alignment. "),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/layout/container"},"Live example")),(0,r.kt)("h3",{id:"containers-with-different-background-color"},"Containers with different background color"),(0,r.kt)("img",{src:"/img/docs/controls/container/containers-background-color.png",className:"screenshot-50"}),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\n\ndef main(page: ft.Page):\n    page.title = "Containers with background color"\n\n    c1 = ft.Container(\n        content=ft.ElevatedButton("Elevated Button in Container"),\n        bgcolor=ft.colors.YELLOW,\n        padding=5,\n    )\n\n    c2 = ft.Container(\n        content=ft.ElevatedButton(\n            "Elevated Button with opacity=0.5 in Container", opacity=0.5\n        ),\n        bgcolor=ft.colors.YELLOW,\n        padding=5,\n    )\n\n    c3 = ft.Container(\n        content=ft.OutlinedButton("Outlined Button in Container"),\n        bgcolor=ft.colors.YELLOW,\n        padding=5,\n    )\n    page.add(c1, c2, c3)\n\n\nft.app(target=main)\n')))),(0,r.kt)("h3",{id:"clickable-container"},"Clickable container"),(0,r.kt)("img",{src:"/img/docs/controls/container/clickable-container.gif",className:"screenshot-50"}),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Containers - clickable and not"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    page.add(\n        ft.Row(\n            [\n                ft.Container(\n                    content=ft.Text("Non clickable"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.colors.AMBER,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                ),\n                ft.Container(\n                    content=ft.Text("Clickable without Ink"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.colors.GREEN_200,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    on_click=lambda e: print("Clickable without Ink clicked!"),\n                ),\n                ft.Container(\n                    content=ft.Text("Clickable with Ink"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.colors.CYAN_200,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    ink=True,\n                    on_click=lambda e: print("Clickable with Ink clicked!"),\n                ),\n                ft.Container(\n                    content=ft.Text("Clickable transparent with Ink"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    ink=True,\n                    on_click=lambda e: print("Clickable transparent with Ink clicked!"),\n                ),\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n        ),\n    )\n\nft.app(target=main)\n')))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("img",{src:"/img/docs/controls/container/container-diagram.png",className:"screenshot-50"}),(0,r.kt)("h3",{id:"alignment"},(0,r.kt)("inlineCode",{parentName:"h3"},"alignment")),(0,r.kt)("p",null,"Align the child control within the container."),(0,r.kt)("p",null,"Alignment is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"alignment.Alignment")," class object with ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," properties representing the distance from the center of a rectangle. ",(0,r.kt)("inlineCode",{parentName:"p"},"x=0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"y=0")," represents the center of the rectangle. ",(0,r.kt)("inlineCode",{parentName:"p"},"x=-1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"y=-1")," represents the top left of the rectangle, ",(0,r.kt)("inlineCode",{parentName:"p"},"x=1.0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"y=1.0")," represents the bottom right of the rectangle. There are pre-defined alignment constants in ",(0,r.kt)("inlineCode",{parentName:"p"},"flet.alignment")," module: ",(0,r.kt)("inlineCode",{parentName:"p"},"top_left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"top_center"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"top_right"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center_left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center_right"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom_left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom_center"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom_right"),"."),(0,r.kt)("img",{src:"/img/docs/controls/container/container-alignments-diagram.png",className:"screenshot-40"}),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ncontainer_1.alignment = alignment.center\ncontainer_2.alignment = alignment.top_left\ncontainer_3.alignment = alignment.Alignment(-0.5, -0.5)\n")),(0,r.kt)("img",{src:"/img/docs/controls/container/containers-alignments.png",className:"screenshot-50"}),(0,r.kt)("h3",{id:"animate"},(0,r.kt)("inlineCode",{parentName:"h3"},"animate")),(0,r.kt)("p",null,'Enables container "implicit" animation that gradually changes its values over a period of time.'),(0,r.kt)("p",null,"The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"animate")," property could be one of the following types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," to enable container animation with ",(0,r.kt)("inlineCode",{parentName:"li"},"linear")," curve with ",(0,r.kt)("inlineCode",{parentName:"li"},"1000")," milliseconds duration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int")," - enable container animation with ",(0,r.kt)("inlineCode",{parentName:"li"},"linear")," curve and specified number of milliseconds. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"animation.Animation(duration: int, curve: str)")," - enable container animation with specified duration and transition curve.")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("img",{src:"/img/docs/controls/container/animate-container.gif",className:"screenshot-20"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=200,\n        height=200,\n        bgcolor="red",\n        animate=ft.animation.Animation(1000, "bounceOut"),\n    )\n\n    def animate_container(e):\n        c.width = 100 if c.width == 200 else 200\n        c.height = 100 if c.height == 200 else 200\n        c.bgcolor = "blue" if c.bgcolor == "red" else "red"\n        c.update()\n\n    page.add(c, ft.ElevatedButton("Animate container", on_click=animate_container))\n\nft.app(target=main)\n')),(0,r.kt)("h3",{id:"bgcolor"},(0,r.kt)("inlineCode",{parentName:"h3"},"bgcolor")),(0,r.kt)("p",null,"Background color of the container."),(0,r.kt)("p",null,"A color value could be a hex value in ",(0,r.kt)("inlineCode",{parentName:"p"},"#ARGB")," format (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"#FFCC0000"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"#RGB")," format (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"#CC0000"),") or a named color from ",(0,r.kt)("inlineCode",{parentName:"p"},"flet.colors")," module."),(0,r.kt)("h3",{id:"blend_mode"},(0,r.kt)("inlineCode",{parentName:"h3"},"blend_mode")),(0,r.kt)("p",null,"The blend mode applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"gradient")," background of the container. See ",(0,r.kt)("a",{parentName:"p",href:"shadermask#blend_mode"},(0,r.kt)("inlineCode",{parentName:"a"},"ShaderMask.blend_mode"))," for more details."),(0,r.kt)("h3",{id:"blur"},(0,r.kt)("inlineCode",{parentName:"h3"},"blur")),(0,r.kt)("p",null,"Applies Gaussian blur effect under the container."),(0,r.kt)("p",null,"The value of this property could be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"a number")," - specifies the same value for horizontal and vertical sigmas, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"10"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"a tuple")," - specifies separate values for horizontal and vertical sigmas, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"(10, 1)"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"an instance of ",(0,r.kt)("inlineCode",{parentName:"strong"},"ft.Blur"))," - allow specifying separate values for horizontal and vertical sigmas as well as ",(0,r.kt)("inlineCode",{parentName:"li"},"tile_mode")," for the filter. ",(0,r.kt)("inlineCode",{parentName:"li"},"tile_mode")," is the value of ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.BlurTileMode")," which defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.BlurTileMode.CLAMP"),".")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'ft.Stack(\n    [\n        ft.Container(\n            content=ft.Text("Hello"),\n            image_src="https://picsum.photos/100/100",\n            width=100,\n            height=100,\n        ),\n        ft.Container(\n            width=50,\n            height=50,\n            blur=10,\n            bgcolor="#44CCCC00",\n        ),\n        ft.Container(\n            width=50,\n            height=50,\n            left=10,\n            top=60,\n            blur=(0, 10),\n        ),\n        ft.Container(\n            top=10,\n            left=60,\n            blur=ft.Blur(10, 0, ft.BlurTileMode.MIRROR),\n            width=50,\n            height=50,\n            bgcolor="#44CCCCCC",\n            border=ft.border.all(2, ft.colors.BLACK),\n        ),\n    ]\n)\n')),(0,r.kt)("h3",{id:"border"},(0,r.kt)("inlineCode",{parentName:"h3"},"border")),(0,r.kt)("p",null,"A border to draw above the background color."),(0,r.kt)("p",null,"Each side of the container border is described by an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"border.BorderSide")," class with two properties: ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," (number) and ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," (string). The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"border")," property is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"border.Border")," class describing all 4 sides of the rectangle. Helper methods available to set border styles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border.all(width, color)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border.symmetric(vertical: BorderSide, horizontal: BorderSide)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border.only(left: BorderSide, top: BorderSide, right: BorderSide, bottom: BorderSide)"),".")),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'container_1.border = ft.border.all(10, ft.colors.PINK_600)\ncontainer_1.border = ft.border.only(bottom=ft.border.BorderSide(1, "black"))\n')),(0,r.kt)("h3",{id:"border_radius"},(0,r.kt)("inlineCode",{parentName:"h3"},"border_radius")),(0,r.kt)("p",null,"If specified, the corners of the container are rounded by this radius. Border radius is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"border_radius.BorderRadius")," class with 4 properties: ",(0,r.kt)("inlineCode",{parentName:"p"},"top_left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"top_right"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom_left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom_right"),". The object could be created with a constructor where all corner values set separately or with helper methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border_radius.all(value)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border_radius.horizontal(left: float = 0, right: float = 0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border_radius.vertical(top: float = 0, bottom: float = 0)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"border_radius.only(top_left, top_right, bottom_left, bottom_right)"))),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"container_1.border_radius= ft.border_radius.all(30)\n")),(0,r.kt)("h3",{id:"clip_behavior"},(0,r.kt)("inlineCode",{parentName:"h3"},"clip_behavior")),(0,r.kt)("p",null,"The content will be clipped (or not) according to this option."),(0,r.kt)("p",null,"Property value is ",(0,r.kt)("inlineCode",{parentName:"p"},"ClipBehavior")," enum with supported values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NONE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ANTI_ALIAS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ANTI_ALIAS_WITH_SAVE_LAYER")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HARD_EDGE"))),(0,r.kt)("p",null,"Default is ",(0,r.kt)("inlineCode",{parentName:"p"},"ANTI_ALIAS")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"border_radius")," is not ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"; otherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"HARD_EDGE"),"."),(0,r.kt)("h3",{id:"content"},(0,r.kt)("inlineCode",{parentName:"h3"},"content")),(0,r.kt)("p",null,"A child Control contained by the container."),(0,r.kt)("h3",{id:"gradient"},(0,r.kt)("inlineCode",{parentName:"h3"},"gradient")),(0,r.kt)("p",null,"Configures gradient background. The value must be an instance of one of the following classes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LinearGradient")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RadialGradient")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SweepGradient"))),(0,r.kt)("h4",{id:"lineargradient"},(0,r.kt)("inlineCode",{parentName:"h4"},"LinearGradient")),(0,r.kt)("img",{src:"/img/docs/controls/container/linear-gradient.png",className:"screenshot-20"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Container(\n    gradient=ft.LinearGradient(\n        begin=ft.alignment.top_center,\n        end=ft.alignment.bottom_center,\n       colors=[ft.colors.BLUE, ft.colors.YELLOW],\n    ),\n    width=150,\n    height=150,\n    border_radius=5,\n)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LinearGradient")," class has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"begin")," - An instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"Alignment")," class. The offset at which stop 0.0 of the gradient is placed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end")," - An instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"Alignment")," class. The offset at which stop 1.0 of the gradient is placed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"colors")," - The colors the gradient should obtain at each of the stops. If stops is non-null, this list must have the same length as stops. This list must have at least two colors in it (otherwise, it's not a gradient!)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stops")," - A list of values from 0.0 to 1.0 that denote fractions along the gradient. If non-null, this list must have the same length as ",(0,r.kt)("inlineCode",{parentName:"li"},"colors"),". If the first value is not 0.0, then a stop with position 0.0 and a color equal to the first color in ",(0,r.kt)("inlineCode",{parentName:"li"},"colors")," is implied. If the last value is not 1.0, then a stop with position 1.0 and a color equal to the last color in ",(0,r.kt)("inlineCode",{parentName:"li"},"colors")," is implied."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tile_mode")," - How this gradient should tile the plane beyond in the region before ",(0,r.kt)("inlineCode",{parentName:"li"},"begin")," and after ",(0,r.kt)("inlineCode",{parentName:"li"},"end"),". The value is ",(0,r.kt)("inlineCode",{parentName:"li"},"GradientTileMode")," enum with supported values: ",(0,r.kt)("inlineCode",{parentName:"li"},"CLAMP")," (default), ",(0,r.kt)("inlineCode",{parentName:"li"},"DECAL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MIRROR"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"REPEATED"),". More info ",(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/dart-ui/TileMode.html"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rotation")," - rotation for the gradient, in ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Radian"},"radians"),", around the center-point of its bounding box.")),(0,r.kt)("p",null,"More information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/painting/LinearGradient-class.html"},"Linear gradient")," in Flutter documentation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Radian"},"Radian measuring unit")," on Wikipedia.")),(0,r.kt)("h4",{id:"radialgradient"},(0,r.kt)("inlineCode",{parentName:"h4"},"RadialGradient")),(0,r.kt)("img",{src:"/img/docs/controls/container/radial-gradient.png",className:"screenshot-20"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Container(\n    gradient=ft.RadialGradient(\n       colors=[ft.colors.YELLOW, ft.colors.BLUE],\n    ),\n    width=150,\n    height=150,\n    border_radius=5,\n)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RadialGradient")," class has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"colors"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"stops"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"tile_mode"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rotation")," - see ",(0,r.kt)("a",{parentName:"li",href:"#lineargradient"},"Linear gradient")," for description of these properties."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center")," - An instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"Alignment")," class. The center of the gradient, as an offset into the (-1.0, -1.0) x (1.0, 1.0) square describing the gradient which will be mapped onto the paint box. For example, an alignment of (0.0, 0.0) will place the radial gradient in the center of the box."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"radius")," - The radius of the gradient, as a fraction of the shortest side of the paint box. For example, if a radial gradient is painted on a box that is 100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0 will place the 1.0 stop at 100.0 pixels from the ",(0,r.kt)("inlineCode",{parentName:"li"},"center"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"focal")," - The focal point of the gradient. If specified, the gradient will appear to be focused along the vector from ",(0,r.kt)("inlineCode",{parentName:"li"},"center")," to focal."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"focal_radius")," - The radius of the focal point of gradient, as a fraction of the shortest side of the paint box. For example, if a radial gradient is painted on a box that is 100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0 will place the 1.0 stop at 100.0 pixels from the focal point.")),(0,r.kt)("p",null,"More information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/painting/RadialGradient-class.html"},"Radial gradient")," in Flutter documentation.")),(0,r.kt)("h4",{id:"sweepgradient"},(0,r.kt)("inlineCode",{parentName:"h4"},"SweepGradient")),(0,r.kt)("img",{src:"/img/docs/controls/container/sweep-gradient.png",className:"screenshot-20"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Container(\n    gradient=SweepGradient(\n        center=ft.alignment.center,\n        start_angle=0.0,\n        end_angle=math.pi * 2,\n       colors=[ft.colors.YELLOW, ft.colors.BLUE],\n    ),\n    width=150,\n    height=150,\n    border_radius=5,\n)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SweepGradient")," class has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"colors"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"stops"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"tile_mode"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rotation")," - see ",(0,r.kt)("a",{parentName:"li",href:"#lineargradient"},"Linear gradient")," for description of these properties."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center")," - The center of the gradient, as an offset into the (-1.0, -1.0) x (1.0, 1.0) square describing the gradient which will be mapped onto the paint box. For example, an alignment of (0.0, 0.0) will place the sweep gradient in the center of the box."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_angle")," - The angle in radians at which stop 0.0 of the gradient is placed. Defaults to 0.0."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end_angle")," - The angle in radians at which stop 1.0 of the gradient is placed. Defaults to math.pi * 2.")),(0,r.kt)("p",null,"More information:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/painting/SweepGradient-class.html"},"Sweep gradient")," in Flutter documentation.")),(0,r.kt)("h3",{id:"image_fit"},(0,r.kt)("inlineCode",{parentName:"h3"},"image_fit")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"image#fit"},(0,r.kt)("inlineCode",{parentName:"a"},"Image.fit"))," for more details."),(0,r.kt)("h3",{id:"image_opacity"},(0,r.kt)("inlineCode",{parentName:"h3"},"image_opacity")),(0,r.kt)("p",null,"Sets image opacity when blending with a background: value between ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"1.0"),"."),(0,r.kt)("h3",{id:"image_repeat"},(0,r.kt)("inlineCode",{parentName:"h3"},"image_repeat")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"image#repeat"},(0,r.kt)("inlineCode",{parentName:"a"},"Image.repeat"))," for more details."),(0,r.kt)("h3",{id:"image_src"},(0,r.kt)("inlineCode",{parentName:"h3"},"image_src")),(0,r.kt)("p",null,"Sets an image as a container background. See ",(0,r.kt)("a",{parentName:"p",href:"image#src"},(0,r.kt)("inlineCode",{parentName:"a"},"Image.src"))," for more details."),(0,r.kt)("h3",{id:"image_src_base64"},(0,r.kt)("inlineCode",{parentName:"h3"},"image_src_base64")),(0,r.kt)("p",null,"Sets an image encoded as Base-64 string as a container background. See ",(0,r.kt)("a",{parentName:"p",href:"image#src_base64"},(0,r.kt)("inlineCode",{parentName:"a"},"Image.src_base64"))," for more details."),(0,r.kt)("h3",{id:"ink"},(0,r.kt)("inlineCode",{parentName:"h3"},"ink")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"True")," to produce ink ripples effect when user clicks the container. Default is ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,r.kt)("h3",{id:"margin"},(0,r.kt)("inlineCode",{parentName:"h3"},"margin")),(0,r.kt)("p",null,"Empty space to surround the decoration and child control."),(0,r.kt)("p",null,"Margin is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"margin.Margin")," class with properties set margins for all sides of the rectangle: ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"right"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom"),". An instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"margin.Margin")," can be created via constructor with values for specific sides or created with helper methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"margin.all(value)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"margin.symmetric(vertical, horizontal)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"margin.only(left, top, right, bottom)"))),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ncontainer_1.margin = margin.all(10)\ncontainer_2.margin = 20 # same as margin.all(20)\ncontainer_3.margin = margin.symmetric(vertical=10)\ncontainer_3.margin = margin.only(left=10)\n")),(0,r.kt)("img",{src:"/img/docs/controls/container/container-margin-diagram.png",className:"screenshot-50"}),(0,r.kt)("h3",{id:"padding"},(0,r.kt)("inlineCode",{parentName:"h3"},"padding")),(0,r.kt)("p",null,"Empty space to inscribe inside a container decoration (background, border). The child control is placed inside this padding."),(0,r.kt)("p",null,"Padding is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"padding.Padding")," class with properties set padding for all sides of the rectangle: ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"right"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom"),". An instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"padding.Padding")," can be created via constructor with values for specific sides or created with helper methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"padding.all(value: float)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"padding.symmetric(vertical, horizontal)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"padding.only(left, top, right, bottom)"))),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ncontainer_1.padding = ft.padding.all(10)\ncontainer_2.padding = 20 # same as ft.padding.all(20)\ncontainer_3.padding = ft.padding.symmetric(horizontal=10)\ncontainer_4.padding=padding.only(left=10)\n")),(0,r.kt)("img",{src:"/img/docs/controls/container/container-padding-diagram.png",className:"screenshot-50"}),(0,r.kt)("h3",{id:"shadow"},(0,r.kt)("inlineCode",{parentName:"h3"},"shadow")),(0,r.kt)("p",null,"A list of shadows cast by the container."),(0,r.kt)("p",null,"The value of this property is a single instance or a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"ft.BoxShadow")," class instances with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spread_radius")," - The amount the box should be inflated prior to applying the blur. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0."),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blur_radius")," - The standard deviation of the Gaussian to convolve with the shadow's shape. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"0.0."),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"color")," - Color that the shadow will be drawn with."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset")," - An instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.Offset")," class - the displacement of the shadow from the casting element. Positive x/y offsets will shift the shadow to the right and down, while negative offsets shift the shadow to the left and up. The offsets are relative to the position of the element that is casting it. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.Offset(0,0)"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blur_style")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.BlurStyle")," to use for this shadow. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"ft.BlurStyle.NORMAL"),".")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"ft.Container(\n    border_radius=10,\n    width=100,\n    height=100,\n    shadow=ft.BoxShadow(\n        spread_radius=1,\n        blur_radius=15,\n        color=ft.colors.BLUE_GREY_300,\n        offset=ft.Offset(0, 0),\n        blur_style=ft.ShadowBlurStyle.OUTER,\n    )\n)\n")),(0,r.kt)("h3",{id:"shape"},(0,r.kt)("inlineCode",{parentName:"h3"},"shape")),(0,r.kt)("p",null,"Sets the shape of the container. The value is ",(0,r.kt)("inlineCode",{parentName:"p"},"BoxShape")," enum:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RECTANGLE")," (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CIRCLE"))),(0,r.kt)("h3",{id:"theme_mode"},(0,r.kt)("inlineCode",{parentName:"h3"},"theme_mode")),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"theme_mode")," (",(0,r.kt)("inlineCode",{parentName:"p"},"ft.ThemeMode"),') "resets" parent theme and creates a new, unique scheme for all controls inside the container. Otherwise the styles defined in container\'s ',(0,r.kt)("inlineCode",{parentName:"p"},"theme")," property override corresponding styles from the parent, inherited theme."),(0,r.kt)("h3",{id:"theme"},(0,r.kt)("inlineCode",{parentName:"h3"},"theme")),(0,r.kt)("p",null,"Allows setting a nested ",(0,r.kt)("inlineCode",{parentName:"p"},"ft.Theme")," for all controls inside the container and down the tree, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    # Yellow page theme with SYSTEM (default) mode\n    page.theme = ft.Theme(\n        color_scheme_seed=ft.colors.YELLOW,\n    )\n\n    page.add(\n        # Page theme\n        ft.Container(\n            content=ft.ElevatedButton("Page theme button"),\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n\n        # Inherited theme with primary color overridden\n        ft.Container(\n            theme=ft.Theme(color_scheme=ft.ColorScheme(primary=ft.colors.PINK)),\n            content=ft.ElevatedButton("Inherited theme button"),\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n        \n        # Unique always DARK theme\n        ft.Container(\n            theme=ft.Theme(color_scheme_seed=ft.colors.INDIGO),\n            theme_mode=ft.ThemeMode.DARK,\n            content=ft.ElevatedButton("Unique theme button"),\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            padding=20,\n            width=300,\n        ),\n    )\n\nft.app(main)\n')),(0,r.kt)("img",{src:"/img/blog/theme-scrolling/nested-themes.png",className:"screenshot-60"}),(0,r.kt)("h3",{id:"url"},(0,r.kt)("inlineCode",{parentName:"h3"},"url")),(0,r.kt)("p",null,"The URL to open when the container is clicked. If registered, ",(0,r.kt)("inlineCode",{parentName:"p"},"on_click")," event is fired after that."),(0,r.kt)("h3",{id:"url_target"},(0,r.kt)("inlineCode",{parentName:"h3"},"url_target")),(0,r.kt)("p",null,"Where to open URL in the web mode:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_blank")," (default) - new tab/window."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_self")," - the current tab/window.")),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"on_click"},(0,r.kt)("inlineCode",{parentName:"h3"},"on_click")),(0,r.kt)("p",null,"Fires when a user clicks the container. Event object ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," is an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ContainerTapEvent")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class ft.ContainerTapEvent():\n    local_x: float\n    local_y: float\n    global_x: float\n    global_y: float\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"ink")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," will be plain ",(0,r.kt)("inlineCode",{parentName:"p"},"ControlEvent")," with empty ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"ContainerTapEvent"),".")),(0,r.kt)("p",null,"A simple usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    t = ft.Text()\n\n    def container_click(e: ft.ContainerTapEvent):\n        t.value = f"local_x: {e.local_x}\\nlocal_y: {e.local_y}\\nglobal_x: {e.global_x}\\nglobal_y: {e.global_y}"\n        t.update()\n\n    page.add(\n        ft.Column(\n            [\n                ft.Container(\n                    content=ft.Text("Clickable inside container"),\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.colors.GREEN_200,\n                    width=200,\n                    height=200,\n                    border_radius=10,\n                    on_click=container_click,\n                ),\n                t,\n            ],\n            horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n        ),\n    )\n\nft.app(target=main)\n')),(0,r.kt)("h3",{id:"on_hover"},(0,r.kt)("inlineCode",{parentName:"h3"},"on_hover")),(0,r.kt)("p",null,"Fires when a mouse pointer enters or exists the container area. ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property of event object contains ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," (string) when cursor enters and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," when it exits."),(0,r.kt)("p",null,"A simple example of a container changing its background color on mouse hover:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    def on_hover(e):\n        e.control.bgcolor = "blue" if e.data == "true" else "red"\n        e.control.update()\n\n    page.add(\n        ft.Container(width=100, height=100, bgcolor="red", ink=False, on_hover=on_hover)\n    )\n\nft.app(target=main)\n')),(0,r.kt)("h3",{id:"on_long_press"},(0,r.kt)("inlineCode",{parentName:"h3"},"on_long_press")),(0,r.kt)("p",null,"Fires when the container is long-pressed."))}f.isMDXComponent=!0}}]);