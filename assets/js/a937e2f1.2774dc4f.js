"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[1962],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return b}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,b=d["".concat(p,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2614:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"MatplotlibChart",sidebar_label:"MatplotlibChart",slug:"matplotlibchart"},p=void 0,s={unversionedId:"controls/matplotlibchart",id:"controls/matplotlibchart",title:"MatplotlibChart",description:"\u663e\u793amatplotlib\u56fe\u8868\u3002",source:"@site/docs/controls/matplotlibchart.md",sourceDirName:"controls",slug:"/controls/matplotlibchart",permalink:"/website/docs/controls/matplotlibchart",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/matplotlibchart.md",tags:[],version:"current",frontMatter:{title:"MatplotlibChart",sidebar_label:"MatplotlibChart",slug:"matplotlibchart"},sidebar:"docs",previous:{title:"PieChart",permalink:"/website/docs/controls/piechart"},next:{title:"PlotlyChart",permalink:"/website/docs/controls/plotlychart"}},c={},d=[{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"bar \u989c\u8272\u56fe\u8868",id:"bar-\u989c\u8272\u56fe\u8868",level:3},{value:"\u7ebf\u56fe",id:"\u7ebf\u56fe",level:3},{value:"properties",id:"properties",level:2},{value:"<code>figure</code>",id:"figure",level:3},{value:"<code>isolated</code>",id:"isolated",level:3},{value:"<code>original_size</code>",id:"original_size",level:3},{value:"<code>transparent</code>",id:"transparent",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u663e\u793a",(0,l.kt)("a",{parentName:"p",href:"https://matplotlib.org/"},"matplotlib"),"\u56fe\u8868\u3002"),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"bar-\u989c\u8272\u56fe\u8868"},"bar \u989c\u8272\u56fe\u8868"),(0,l.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u57fa\u4e8e",(0,l.kt)("a",{parentName:"p",href:"https://matplotlib.org/stable/gallery/lines_bars_and_markers/bar_colors.html#sphx-glr-gallery-lines-bars-and-markers-bar-colors-py"},"Matplotlib Docs \u7684\u539f\u59cb\u793a\u4f8b"),"\u3002"),(0,l.kt)("img",{src:"/website/img/docs/controls/charts/matplotlib-barchart.png",className:"screenshot-60"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib\nimport matplotlib.pyplot as plt\n\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use("svg")\n\n\ndef main(page: ft.Page):\n\n    fig, ax = plt.subplots()\n\n    fruits = ["apple", "blueberry", "cherry", "orange"]\n    counts = [40, 100, 30, 55]\n    bar_labels = ["red", "blue", "_red", "orange"]\n    bar_colors = ["tab:red", "tab:blue", "tab:red", "tab:orange"]\n\n    ax.bar(fruits, counts, label=bar_labels, color=bar_colors)\n\n    ax.set_ylabel("fruit supply")\n    ax.set_title("Fruit supply by kind and color")\n    ax.legend(title="Fruit color")\n\n    page.add(MatplotlibChart(fig, expand=True))\n\n\nft.app(target=main)\n')),(0,l.kt)("h3",{id:"\u7ebf\u56fe"},"\u7ebf\u56fe"),(0,l.kt)("p",null,"\u4ee5\u4e0b\u793a\u4f8b\u57fa\u4e8e",(0,l.kt)("a",{parentName:"p",href:"https://matplotlib.org/stable/gallery/lines_bars_and_markers/cohere.html#sphx-glr-gallery-lines-bars-and-markers-cohere-py"},"Matplotlib Docs \u7684\u539f\u59cb\u793a\u4f8b"),"\u3002"),(0,l.kt)("img",{src:"/website/img/docs/controls/charts/matplotlib-linechart.png",className:"screenshot-60"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use("svg")\n\ndef main(page: ft.Page):\n\n    # Fixing random state for reproducibility\n    np.random.seed(19680801)\n\n    dt = 0.01\n    t = np.arange(0, 30, dt)\n    nse1 = np.random.randn(len(t))  # white noise 1\n    nse2 = np.random.randn(len(t))  # white noise 2\n\n    # Two signals with a coherent part at 10Hz and a random part\n    s1 = np.sin(2 * np.pi * 10 * t) + nse1\n    s2 = np.sin(2 * np.pi * 10 * t) + nse2\n\n    fig, axs = plt.subplots(2, 1)\n    axs[0].plot(t, s1, t, s2)\n    axs[0].set_xlim(0, 2)\n    axs[0].set_xlabel("time")\n    axs[0].set_ylabel("s1 and s2")\n    axs[0].grid(True)\n\n    cxy, f = axs[1].cohere(s1, s2, 256, 1.0 / dt)\n    axs[1].set_ylabel("coherence")\n\n    fig.tight_layout()\n\n    page.add(MatplotlibChart(fig, expand=True))\n\nft.app(target=main)\n')),(0,l.kt)("h2",{id:"properties"},"properties"),(0,l.kt)("h3",{id:"figure"},(0,l.kt)("inlineCode",{parentName:"h3"},"figure")),(0,l.kt)("p",null,"\u7ed8\u5236 matplotlib \u56fe - ",(0,l.kt)("inlineCode",{parentName:"p"},"matplotlib.figure.Figure")," class \u7684\u5b9e\u4f8b\u3002"),(0,l.kt)("h3",{id:"isolated"},(0,l.kt)("inlineCode",{parentName:"h3"},"isolated")),(0,l.kt)("p",null,"\u6bcf\u6b21\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"page.update()"),"\u6216",(0,l.kt)("inlineCode",{parentName:"p"},"Control.update()"),"\u65b9\u6cd5\u66f4\u65b0\u9875\u9762\u6216\u7236\u56fe\u63a7\u4ef6\u65f6\uff0c\u901a\u8fc7\u8c03\u7528 Matplotlib API \u91cd\u65b0\u7ed8\u5236\u56fe\u8868\u3002 \u9891\u7e41\u91cd\u65b0\u7ed8\u5236\u5927\u56fe\u53ef\u80fd\u4f1a\u5f71\u54cd\u6574\u4e2a Flet \u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u3002"),(0,l.kt)("p",null,"\u5c06",(0,l.kt)("inlineCode",{parentName:"p"},"isolated"),"\u8bbe\u7f6e\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"True"),"\u4ee5\u542f\u7528\u663e\u5f0f\u56fe\u8868\u66f4\u65b0\u3002 \u91cd\u65b0\u7ed8\u5236\u56fe\u8868\u8c03\u7528\u5176",(0,l.kt)("inlineCode",{parentName:"p"},"update()"),"\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u6b64\u9875\u9762\u4e0a\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u53ef\u4ee5\u5982\u4e0b\u4fee\u6539:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def main(page: ft.Page):\n\n    # ...\n\n    # set initial axis legent\n    ax.legend(title="Fruit color")\n\n    # enable explicit updates\n    # and add chart to a page\n    chart1 = MatplotlibChart(fig, isolated=True, expand=True)\n    page.add(chart1)\n\n    sleep(5)\n\n    # update chart axis\n    ax.legend(title="Colors")\n    chart1.update()\n\nft.app(target=main)\n')),(0,l.kt)("h3",{id:"original_size"},(0,l.kt)("inlineCode",{parentName:"h3"},"original_size")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True"),"\u4ee5\u539f\u59cb\u5927\u5c0f\u663e\u793a\u56fe\u8868\u3002 ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),"\uff08\u9ed8\u8ba4\uff09\u663e\u793a\u9002\u5408\u914d\u7f6e\u8fb9\u754c\u7684\u56fe\u8868\u3002"),(0,l.kt)("h3",{id:"transparent"},(0,l.kt)("inlineCode",{parentName:"h3"},"transparent")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True"),"\u4ece\u56fe\u8868\u4e2d\u5220\u9664\u80cc\u666f\u3002 ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),"\uff08\u9ed8\u8ba4\u503c\uff09\u663e\u793a\u5177\u6709\u80cc\u666f\u7684\u56fe\u8868\u3002"))}m.isMDXComponent=!0}}]);