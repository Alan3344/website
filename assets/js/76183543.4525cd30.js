"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[8727],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5496:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={title:"How Flet works",sidebar_label:"How it works",slug:"how-it-works"},l=void 0,c={unversionedId:"how-it-works",id:"how-it-works",title:"How Flet works",description:"Flet UI does not become embedded into your program, but is being served by an out-of-process Flet server. Application state and control flow logic lives in your persistent-process program while UI changes and events are communicated to Flet server via WebSocket-based protocol. It allows writing web app as a standalone monolith without any knowledge of request/response model, routing, templating or state management.",source:"@site/docs/how-it-works.md",sourceDirName:".",slug:"/how-it-works",permalink:"/website/docs/how-it-works",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/how-it-works.md",tags:[],version:"current",frontMatter:{title:"How Flet works",sidebar_label:"How it works",slug:"how-it-works"}},u={},p=[],d={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Flet UI does not become embedded into your program, but is being served by an out-of-process Flet server. Application state and control flow logic lives in your persistent-process program while UI changes and events are communicated to Flet server via WebSocket-based protocol. It allows writing web app as a standalone monolith without any knowledge of request/response model, routing, templating or state management."),(0,a.kt)("p",null,"In a classic client-server architecture front-end communicates to a one or more back-end services. Flet implements an opposite approach where multiple back-end services scattered across internal network behind a firewall and communicate to a centralized Flet web server, i.e. front-end service, installed in DMZ or hosted as a service. "),(0,a.kt)("div",{style:{textAlign:"center"}},(0,a.kt)("img",{src:"/img/blog/pglet-introduction/pglet-highlevel-design.png"})),(0,a.kt)("p",null,"This design gives a number of advantages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Secure by design - your internal services and critical data stay behind the firewall and not accessible from the outside world."),(0,a.kt)("li",{parentName:"ul"},"Apps running next to services and data they process - faster/cheaper access and maximum security."),(0,a.kt)("li",{parentName:"ul"},"Zero deployment - run apps on any server in your network or your development machine, no need to deploy apps to a web server.")))}m.isMDXComponent=!0}}]);