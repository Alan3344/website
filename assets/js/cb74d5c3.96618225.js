"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[6187],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9743:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={title:"PlotlyChart",sidebar_label:"PlotlyChart",slug:"plotlychart"},p=void 0,c={unversionedId:"controls/plotlychart",id:"controls/plotlychart",title:"PlotlyChart",description:"Displays Plotly chart.",source:"@site/docs/controls/plotlychart.md",sourceDirName:"controls",slug:"/controls/plotlychart",permalink:"/docs/controls/plotlychart",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/plotlychart.md",tags:[],version:"current",frontMatter:{title:"PlotlyChart",sidebar_label:"PlotlyChart",slug:"plotlychart"},sidebar:"docs",previous:{title:"MatplotlibChart",permalink:"/docs/controls/matplotlibchart"},next:{title:"Animations",permalink:"/docs/controls/animations"}},s={},d=[{value:"Examples",id:"examples",level:2},{value:"Line chart",id:"line-chart",level:3},{value:"Bar chart",id:"bar-chart",level:3},{value:"Pie chart",id:"pie-chart",level:3},{value:"Box chart",id:"box-chart",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>figure</code>",id:"figure",level:3},{value:"<code>original_size</code>",id:"original_size",level:3},{value:"<code>isolated</code>",id:"isolated",level:3}],u={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Displays ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/"},"Plotly")," chart."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"line-chart"},"Line chart"),(0,o.kt)("p",null,"The following example is based on ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/line-charts/"},"original example from Plotly docs"),"."),(0,o.kt)("img",{src:"/img/docs/controls/charts/plotly-linechart.png",className:"screenshot-60"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import plotly.express as px\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    df = px.data.gapminder().query("continent==\'Oceania\'")\n    fig = px.line(df, x="year", y="lifeExp", color="country")\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"bar-chart"},"Bar chart"),(0,o.kt)("p",null,"The following example is based on ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/bar-charts/"},"original example from Plotly docs"),"."),(0,o.kt)("img",{src:"/img/docs/controls/charts/plotly-barchart.png",className:"screenshot-60"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import plotly.express as px\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    df = px.data.gapminder().query("continent == \'Oceania\'")\n    fig = px.bar(\n        df,\n        x="year",\n        y="pop",\n        hover_data=["lifeExp", "gdpPercap"],\n        color="country",\n        labels={"pop": "population of Canada"},\n        height=400,\n    )\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"pie-chart"},"Pie chart"),(0,o.kt)("p",null,"The following example is based on ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/pie-charts/"},"original example from Plotly docs"),"."),(0,o.kt)("img",{src:"/img/docs/controls/charts/plotly-piechart.png",className:"screenshot-60"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import plotly.graph_objects as go\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    labels = ["Oxygen", "Hydrogen", "Carbon_Dioxide", "Nitrogen"]\n    values = [4500, 2500, 1053, 500]\n\n    fig = go.Figure(data=[go.Pie(labels=labels, values=values)])\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"box-chart"},"Box chart"),(0,o.kt)("p",null,"The following example is based on ",(0,o.kt)("a",{parentName:"p",href:"https://plotly.com/python/box-plots/"},"original example from Plotly docs"),"."),(0,o.kt)("img",{src:"/img/docs/controls/charts/plotly-boxchart.png",className:"screenshot-70"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import plotly.graph_objects as go\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\n\ndef main(page: ft.Page):\n\n    x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n        'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\n    fig = go.Figure()\n\n    fig.add_trace(go.Box(\n        y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n        x=x,\n        name='kale',\n        marker_color='#3D9970'\n    ))\n    fig.add_trace(go.Box(\n        y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n        x=x,\n        name='radishes',\n        marker_color='#FF4136'\n    ))\n    fig.add_trace(go.Box(\n        y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n        x=x,\n        name='carrots',\n        marker_color='#FF851B'\n    ))\n\n    fig.update_layout(\n        yaxis_title='normalized moisture',\n        boxmode='group' # group together boxes of the different traces for each value of x\n    )\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(target=main)\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"figure"},(0,o.kt)("inlineCode",{parentName:"h3"},"figure")),(0,o.kt)("p",null,"Plotly figure to draw - an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"plotly.graph_objects.Figure")," class."),(0,o.kt)("h3",{id:"original_size"},(0,o.kt)("inlineCode",{parentName:"h3"},"original_size")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"True")," to display chart in original size. ",(0,o.kt)("inlineCode",{parentName:"p"},"False")," (default) to display a chart that fits configured bounds."),(0,o.kt)("h3",{id:"isolated"},(0,o.kt)("inlineCode",{parentName:"h3"},"isolated")),(0,o.kt)("p",null,"Every time when a page or parent chart control are updated with ",(0,o.kt)("inlineCode",{parentName:"p"},"page.update()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Control.update()")," methods respectively the chart is re-drawn by calling Plotly API. Frequent re-drawings of large charts could affect the performance of the entire Flet app."),(0,o.kt)("p",null,"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"isolated")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," to enable explicit chart updates. To re-draw the chart call its ",(0,o.kt)("inlineCode",{parentName:"p"},"update()")," method."))}f.isMDXComponent=!0}}]);