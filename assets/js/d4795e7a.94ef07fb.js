"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[4661],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(b,a(a({ref:t},p),{},{components:n})):r.createElement(b,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4031:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={title:"Accessibility",sidebar_label:"Accessibility"},l=void 0,c={unversionedId:"guides/python/accessibility",id:"guides/python/accessibility",title:"Accessibility",description:"Flet is based on Flutter which includes first-class framework support for accessibility in addition to that provided by the underlying operating system.",source:"@site/docs/guides/python/accessibility.md",sourceDirName:"guides/python",slug:"/guides/python/accessibility",permalink:"/website/docs/guides/python/accessibility",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/accessibility.md",tags:[],version:"current",frontMatter:{title:"Accessibility",sidebar_label:"Accessibility"},sidebar:"docs",previous:{title:"Control Refs",permalink:"/website/docs/guides/python/control-refs"},next:{title:"Async apps",permalink:"/website/docs/guides/python/async-apps"}},p={},u=[{value:"Screen readers",id:"screen-readers",level:2},{value:"Text",id:"text",level:3},{value:"Buttons",id:"buttons",level:3},{value:"<code>TextField</code> and <code>Dropdown</code>",id:"textfield-and-dropdown",level:3},{value:"Custom semantics",id:"custom-semantics",level:3},{value:"Debugging semantics",id:"debugging-semantics",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Flet is based on Flutter which includes first-class framework support for accessibility in addition to that provided by the underlying operating system."),(0,o.kt)("h2",{id:"screen-readers"},"Screen readers"),(0,o.kt)("p",null,"For mobile, screen readers (",(0,o.kt)("a",{parentName:"p",href:"https://support.google.com/accessibility/android/answer/6283677?hl=en"},"TalkBack"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.apple.com/lae/accessibility/iphone/vision/"},"VoiceOver"),") enable visually impaired users to get spoken feedback about the contents of the screen and interact with the UI via gestures on mobile and keyboard shortcuts on desktop. Turn on VoiceOver or TalkBack on your mobile device and navigate around your app."),(0,o.kt)("p",null,"For web, the following screen readers are currently supported:"),(0,o.kt)("p",null,"Mobile Browsers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"iOS - VoiceOver"),(0,o.kt)("li",{parentName:"ul"},"Android - TalkBack")),(0,o.kt)("p",null,"Desktop Browsers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"MacOS - VoiceOver"),(0,o.kt)("li",{parentName:"ul"},"Windows - JAWs & NVDA")),(0,o.kt)("p",null,'Screen Readers users on web will need to toggle "Enable accessibility" button to build the semantics tree.'),(0,o.kt)("h3",{id:"text"},"Text"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"Text.semantics_label")," property to override default Text control semantics."),(0,o.kt)("h3",{id:"buttons"},"Buttons"),(0,o.kt)("p",null,"All buttons with text on them generate proper semantics."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"tooltip")," property to add screen reader semantics for ",(0,o.kt)("inlineCode",{parentName:"p"},"IconButton"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FloatingActionButton")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PopupMenuButton")," buttons."),(0,o.kt)("h3",{id:"textfield-and-dropdown"},(0,o.kt)("inlineCode",{parentName:"h3"},"TextField")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"Dropdown")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"TextField.label")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Dropdown.label")," properties to add screen reader semantics to those controls."),(0,o.kt)("h3",{id:"custom-semantics"},"Custom semantics"),(0,o.kt)("p",null,"For any specific requirements use ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls/semantics"},(0,o.kt)("inlineCode",{parentName:"a"},"Semantics"))," control."),(0,o.kt)("h3",{id:"debugging-semantics"},"Debugging semantics"),(0,o.kt)("p",null,"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"page.show_semantics_debugger")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," to show an overlay that shows the accessibility information reported by the framework."),(0,o.kt)("p",null,"You can implement a specific ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/keyboard-shortcuts"},"keyboard shortcut")," to conveniently toggle semantics debugger during app development:"),(0,o.kt)("img",{src:"/img/docs/getting-started/debug-accessibility-toggle.gif",className:"screenshot-50"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Flet counter example"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def on_keyboard(e: ft.KeyboardEvent):\n        print(e)\n        if e.key == "S" and e.ctrl:\n            page.show_semantics_debugger = not page.show_semantics_debugger\n            page.update()\n\n    page.on_keyboard_event = on_keyboard\n\n    txt_number = ft.Text("0", size=40)\n\n    def button_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    page.add(\n        txt_number,\n        ft.Text("Press CTRL+S to toggle semantics debugger"),\n        ft.FloatingActionButton(\n            icon=ft.icons.ADD, tooltip="Increment number", on_click=button_click\n        ),\n    )\n\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\n')))}m.isMDXComponent=!0}}]);