"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[7780],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6207:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Client storage",sidebar_label:"Client storage"},s=void 0,p={unversionedId:"guides/python/client-storage",id:"guides/python/client-storage",title:"Client storage",description:"Flet's client storage API allows storing key-value data on a client side in a persistent storage. Flet implementation uses sharedpreferences Flutter package.",source:"@site/docs/guides/python/client-storage.md",sourceDirName:"guides/python",slug:"/guides/python/client-storage",permalink:"/website/docs/guides/python/client-storage",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/client-storage.md",tags:[],version:"current",frontMatter:{title:"Client storage",sidebar_label:"Client storage"},sidebar:"docs",previous:{title:"Authentication",permalink:"/website/docs/guides/python/authentication"},next:{title:"Session storage",permalink:"/website/docs/guides/python/session-storage"}},c={},u=[],d={toc:u};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Flet's client storage API allows storing key-value data on a client side in a persistent storage. Flet implementation uses ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/shared_preferences"},(0,o.kt)("inlineCode",{parentName:"a"},"shared_preferences"))," Flutter package."),(0,o.kt)("p",null,"The actual storage mechanism depends on a platform where Flet app is running:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Web - ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage"},"Local storage"),"."),(0,o.kt)("li",{parentName:"ul"},"Desktop - JSON file."),(0,o.kt)("li",{parentName:"ul"},"iOS - ",(0,o.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/foundation/nsuserdefaults"},"NSUserDefaults"),"."),(0,o.kt)("li",{parentName:"ul"},"Android - ",(0,o.kt)("a",{parentName:"li",href:"https://developer.android.com/reference/android/content/SharedPreferences"},"SharedPreferences"),".")),(0,o.kt)("p",null,"Writing data to the storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# strings\npage.client_storage.set("key", "value")\n\n# numbers, booleans\npage.client_storage.set("number.setting", 12345)\npage.client_storage.set("bool_setting", True)\n\n# lists\npage.client_storage.set("favorite_colors", ["read", "green", "blue"])\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Each Flutter application using ",(0,o.kt)("inlineCode",{parentName:"p"},"shared_preferences")," plugin has its own set of preferences. As the same Flet client (which is a Flutter app) is used to run UI for muliple Flet apps any values stored in one Flet application are visible/available to another Flet app running by the same user."),(0,o.kt)("p",{parentName:"admonition"},"To distinguish one application settings from another it is recommended to use some unique prefix for all storage keys, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"{company}.{product}."),". For example to store auth token in one app you could use ",(0,o.kt)("inlineCode",{parentName:"p"},"acme.one_app.auth_token")," key and in another app use ",(0,o.kt)("inlineCode",{parentName:"p"},"acme.second_app.auth_token"),".")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"It is responsibility of Flet app developer to encrypt sensitive data before sending it to a client storage, so it's not read/tampered by another app or an app user.")),(0,o.kt)("p",null,"Reading data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# The value is automatically converted back to the original type\nvalue = page.client_storage.get("key")\n\ncolors = page.client_storage.get("favorite_colors")\n# colors = ["read", "green", "blue"]\n')),(0,o.kt)("p",null,"Check if a key exists:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.client_storage.contains_key("key") # True if the key exists\n')),(0,o.kt)("p",null,"Get all keys:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.client_storage.get_keys("key-prefix.")\n')),(0,o.kt)("p",null,"Remove a value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.client_storage.remove("key")\n')),(0,o.kt)("p",null,"Clear the storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"page.client_storage.clear()\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"clear()")," is a dangerous function that removes all preferences of all Flet apps ever run by the same user and serves as a heads-up that permanent application data shouldn't be stored in the client storage.")))}g.isMDXComponent=!0}}]);