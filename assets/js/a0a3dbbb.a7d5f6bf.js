"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[4653],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),y=o,m=d["".concat(l,".").concat(y)]||d[y]||u[y]||r;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},1259:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=["components"],s={title:"Async apps",sidebar_label:"Async apps"},l=void 0,p={unversionedId:"guides/python/async-apps",id:"guides/python/async-apps",title:"Async apps",description:"Flet app can be written as an async app and use asyncio and other Python async libraries. Calling coroutines is naturally supported in Flet, so you don't need to wrap them to run synchronously.",source:"@site/docs/guides/python/async-apps.md",sourceDirName:"guides/python",slug:"/guides/python/async-apps",permalink:"/website/docs/guides/python/async-apps",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/async-apps.md",tags:[],version:"current",frontMatter:{title:"Async apps",sidebar_label:"Async apps"},sidebar:"docs",previous:{title:"Accessibility",permalink:"/website/docs/guides/python/accessibility"},next:{title:"Hot reload",permalink:"/website/docs/guides/python/hot-reload"}},c={},d=[{value:"Getting started with async",id:"getting-started-with-async",level:2},{value:"Control event handlers",id:"control-event-handlers",level:2},{value:"Async lambdas",id:"async-lambdas",level:3},{value:"Sleeping",id:"sleeping",level:2},{value:"Threading",id:"threading",level:2}],u={toc:d};function y(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Flet app can be written as an async app and use ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncio")," and other Python async libraries. Calling coroutines is naturally supported in Flet, so you don't need to wrap them to run synchronously. "),(0,r.kt)("p",null,"By default, Flet uses ",(0,r.kt)("inlineCode",{parentName:"p"},"threading")," library to run user sessions and execute event handlers in separate threads, but sometimes that could be an ineffective usage of CPU as it does nothing while waiting for a HTTP response or executing ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep()"),"."),(0,r.kt)("p",null,'Asyncio, on the other hand, allows implementing concurrency in a single thread by switching execution context between "coroutines". This is especially important for apps that are going to be ',(0,r.kt)("a",{parentName:"p",href:"/docs/guides/python/publishing-static-website"},"published as static websites")," using ",(0,r.kt)("a",{parentName:"p",href:"https://pyodide.org/en/stable/"},"Pyodide"),". Pyodide is a Python runtime built as a WebAssembly (WASM) and running in the browser. At the time of writing it doesn't support ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pyodide/pyodide/issues/237"},"threading")," yet."),(0,r.kt)("h2",{id:"getting-started-with-async"},"Getting started with async"),(0,r.kt)("p",null,"To start with an async Flet app you should make ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," method ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nasync def main(page: ft.Page):\n    await page.add_async(ft.Text("Hello, async world!"))\n\nft.app(main)\n')),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"await ft.app_async(main)")," if Flet app is part of a larger app and called from ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," code."),(0,r.kt)("p",null,"Notice the usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"await page.add_async(...)")," to add new controls to the page. In an async app you cannot use ",(0,r.kt)("inlineCode",{parentName:"p"},"page.add()")," or other sync page methods anymore - you must use their async counterparts ending with ",(0,r.kt)("inlineCode",{parentName:"p"},"_async")," everywhere in the code:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"page.add()")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"await page.add_async()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"page.update()")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"await page.update_async()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"page.clean()")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"li"},"await page.clean_async()")),(0,r.kt)("li",{parentName:"ul"},"etc.")),(0,r.kt)("h2",{id:"control-event-handlers"},"Control event handlers"),(0,r.kt)("p",null,"Control event handlers could be both sync and ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"."),(0,r.kt)("p",null,"If a handler does not call any async methods it could be a regular sync method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def page_resize(e):\n    print("New page size:", page.window_width, page.window_height)\n\npage.on_resize = page_resize\n')),(0,r.kt)("p",null,"However, if a handler calls async logic it must be async too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'async def button_click(e):\n    page.controls.append(ft.Text("Hello!"))\n    await page.update_async()\n\nft.ElevatedButton("Say hello!", on_click=button_click)\n')),(0,r.kt)("h3",{id:"async-lambdas"},"Async lambdas"),(0,r.kt)("p",null,"There are no async lambdas in Python. It's perfectly fine to have a lambda event handler in async app for simple things:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'page.on_error = lambda e: print("Page error:", e.data)\n')),(0,r.kt)("p",null,"but you can't have an async lambda, so an async event handler must be used."),(0,r.kt)("h2",{id:"sleeping"},"Sleeping"),(0,r.kt)("p",null,"To delay code execution in async Flet app you should use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep"},(0,r.kt)("inlineCode",{parentName:"a"},"asyncio.sleep()"))," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"time.sleep()"),", for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nimport flet as ft\n\nasync def main(page: ft.Page):\n    async def button_click(e):\n        await asyncio.sleep(1)\n        await page.add_async(ft.Text("Hello!"))\n\n    await page.add_async(\n        ft.ElevatedButton("Say hello with delay!", on_click=button_click)\n    )\n\nft.app(main)\n')),(0,r.kt)("h2",{id:"threading"},"Threading"),(0,r.kt)("p",null,"Technically, nobody will stop you from using ",(0,r.kt)("inlineCode",{parentName:"p"},"threading")," library in async app, but it would be a bad idea. ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncio")," versions of locks, queues and tasks, used by Flet API are not thread-safe and, for example, calling ",(0,r.kt)("inlineCode",{parentName:"p"},"await page.update_async()")," from multiple threads will lead to unpredictable results. Also, ",(0,r.kt)("inlineCode",{parentName:"p"},"threading")," library is not supported by Pyodide if you decide to ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/python/publishing-static-website"},"deploy your app as a static website"),"."),(0,r.kt)("p",null,"To run something in the background use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task"},(0,r.kt)("inlineCode",{parentName:"a"},"asyncio.create_task()")),'. For example, an async version of "countdown" control from ',(0,r.kt)("a",{parentName:"p",href:"/docs/guides/python/user-controls"},"User controls")," guide would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\nimport flet as ft\n\nclass Countdown(ft.UserControl):\n    def __init__(self, seconds):\n        super().__init__()\n        self.seconds = seconds\n\n    async def did_mount_async(self):\n        self.running = True\n        asyncio.create_task(self.update_timer())\n\n    async def will_unmount_async(self):\n        self.running = False\n\n    async def update_timer(self):\n        while self.seconds and self.running:\n            mins, secs = divmod(self.seconds, 60)\n            self.countdown.value = "{:02d}:{:02d}".format(mins, secs)\n            await self.update_async()\n            await asyncio.sleep(1)\n            self.seconds -= 1\n\n    def build(self):\n        self.countdown = ft.Text()\n        return self.countdown\n\nasync def main(page: ft.Page):\n    await page.add_async(Countdown(120), Countdown(60))\n\nft.app(target=main)\n')),(0,r.kt)("img",{src:"/img/docs/getting-started/user-control-countdown.gif",className:"screenshot-40"}))}y.isMDXComponent=!0}}]);