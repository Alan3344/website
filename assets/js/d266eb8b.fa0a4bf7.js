"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[5014],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=c(n),g=a,f=s["".concat(u,".").concat(g)]||s[g]||p[g]||o;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return l}});var r=n(7294),a=n(6010),o="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return _}});var r=n(7462),a=n(7294),o=n(6010),l=n(2466),i=n(6550),u=n(1980),c=n(7392),d=n(12);function s(e){return function(e){var t,n;return null!=(t=null==(n=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,a.useMemo)((function(){var e=null!=t?t:s(n);return function(e){var t=(0,c.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function g(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,n=void 0!==t&&t,r=e.groupId,o=(0,i.k6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,r=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:r});return[(0,u._X)(l),(0,a.useCallback)((function(e){if(l){var t=new URLSearchParams(o.location.search);t.set(l,e),o.replace(Object.assign({},o.location,{search:t.toString()}))}}),[l,o])]}function h(e){var t,n,r,o,l=e.defaultValue,i=e.queryString,u=void 0!==i&&i,c=e.groupId,s=p(e),h=(0,a.useState)((function(){return function(e){var t,n=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var a=null!=(t=r.find((function(e){return e.default})))?t:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:l,tabValues:s})})),m=h[0],v=h[1],b=f({queryString:u,groupId:c}),k=b[0],y=b[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),n=(0,d.Nk)(t),r=n[0],o=n[1],[r,(0,a.useCallback)((function(e){t&&o.set(e)}),[t,o])]),_=w[0],N=w[1],C=function(){var e=null!=k?k:_;return g({value:e,tabValues:s})?e:null}();return(0,a.useLayoutEffect)((function(){C&&v(C)}),[C]),{selectedValue:m,selectValue:(0,a.useCallback)((function(e){if(!g({value:e,tabValues:s}))throw new Error("Can't select invalid tab value="+e);v(e),y(e),N(e)}),[y,N,s]),tabValues:s}}var m=n(2389),v="tabList__CuJ",b="tabItem_LNqP";function k(e){var t=e.className,n=e.block,i=e.selectedValue,u=e.selectValue,c=e.tabValues,d=[],s=(0,l.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=d.indexOf(t),r=c[n].value;r!==i&&(s(t),u(r))},g=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var r,a=d.indexOf(e.currentTarget)+1;n=null!=(r=d[a])?r:d[0];break;case"ArrowLeft":var o,l=d.indexOf(e.currentTarget)-1;n=null!=(o=d[l])?o:d[d.length-1]}null==(t=n)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((function(e){var t=e.value,n=e.label,l=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:function(e){return d.push(e)},onKeyDown:g,onClick:p},l,{className:(0,o.Z)("tabs__item",b,null==l?void 0:l.className,{"tabs__item--active":i===t})}),null!=n?n:t)})))}function y(e){var t=e.lazy,n=e.children,r=e.selectedValue,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var l=o.find((function(e){return e.props.value===r}));return l?(0,a.cloneElement)(l,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})})))}function w(e){var t=h(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v)},a.createElement(k,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function _(e){var t=(0,m.Z)();return a.createElement(w,(0,r.Z)({key:String(t)},e))}},1572:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return g}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=n(4866),i=n(5162),u=["components"],c={title:"DragTarget",sidebar_label:"DragTarget",slug:"dragtarget"},d=void 0,s={unversionedId:"controls/dragtarget",id:"controls/dragtarget",title:"DragTarget",description:"A control that completes drag operation when a Draggable widget is dropped.",source:"@site/docs/controls/dragtarget.md",sourceDirName:"controls",slug:"/controls/dragtarget",permalink:"/docs/controls/dragtarget",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/dragtarget.md",tags:[],version:"current",frontMatter:{title:"DragTarget",sidebar_label:"DragTarget",slug:"dragtarget"},sidebar:"docs",previous:{title:"Draggable",permalink:"/docs/controls/draggable"},next:{title:"FilePicker",permalink:"/docs/controls/filepicker"}},p={},g=[{value:"Examples",id:"examples",level:2},{value:"Drag and drop colors",id:"drag-and-drop-colors",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>content</code>",id:"content",level:3},{value:"<code>group</code>",id:"group",level:3},{value:"Events",id:"events",level:2},{value:"<code>on_accept</code>",id:"on_accept",level:3},{value:"<code>on_leave</code>",id:"on_leave",level:3},{value:"<code>on_will_accept</code>",id:"on_will_accept",level:3}],f={toc:g};function h(e){var t=e.components,n=(0,a.Z)(e,u);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A control that completes drag operation when a ",(0,o.kt)("a",{parentName:"p",href:"#draggable"},"Draggable")," widget is dropped."),(0,o.kt)("p",null,"When a draggable is dragged on top of a drag target, the drag target is asked whether it will accept the data the draggable is carrying. The drag target will accept incoming drag if it belongs to the same ",(0,o.kt)("inlineCode",{parentName:"p"},"group")," as draggable. If the user does drop the draggable on top of the drag target (and the drag target has indicated that it will accept the draggable's data), then the drag target is asked to accept the draggable's data."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/utility/draggable"},"Live example")),(0,o.kt)("h3",{id:"drag-and-drop-colors"},"Drag and drop colors"),(0,o.kt)("img",{src:"/img/docs/controls/drag-and-drop/drag-and-drop-colors.gif",className:"screenshot-50"}),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    page.title = "Drag and Drop example"\n\n    def drag_will_accept(e):\n        e.control.content.border = ft.border.all(\n            2, ft.colors.BLACK45 if e.data == "true" else ft.colors.RED\n        )\n        e.control.update()\n\n    def drag_accept(e):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        ft.Row(\n            [\n                ft.Column(\n                    [\n                        ft.Draggable(\n                            group="color",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.CYAN,\n                                border_radius=5,\n                            ),\n                            content_feedback=ft.Container(\n                                width=20,\n                                height=20,\n                                bgcolor=ft.colors.CYAN,\n                                border_radius=3,\n                            ),\n                        ),\n                        ft.Draggable(\n                            group="color",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.YELLOW,\n                                border_radius=5,\n                            ),\n                        ),\n                        ft.Draggable(\n                            group="color1",\n                            content=ft.Container(\n                                width=50,\n                                height=50,\n                                bgcolor=ft.colors.GREEN,\n                                border_radius=5,\n                            ),\n                        ),\n                    ]\n                ),\n                ft.Container(width=100),\n                ft.DragTarget(\n                    group="color",\n                    content=ft.Container(\n                        width=50,\n                        height=50,\n                        bgcolor=ft.colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\nft.app(target=main)\n')))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"content"},(0,o.kt)("inlineCode",{parentName:"h3"},"content")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," that is a visual representation of the drag target."),(0,o.kt)("h3",{id:"group"},(0,o.kt)("inlineCode",{parentName:"h3"},"group")),(0,o.kt)("p",null,"A group this drag target belongs to. For ",(0,o.kt)("a",{parentName:"p",href:"dragtarget"},"DragTarget")," to accept incoming drag both ",(0,o.kt)("inlineCode",{parentName:"p"},"Draggable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DragTarget")," must be in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"group"),"."),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"on_accept"},(0,o.kt)("inlineCode",{parentName:"h3"},"on_accept")),(0,o.kt)("p",null,"Fires when the user does drop the draggable on top of the drag target (and the drag target is in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"group")," with draggable). Event handler argument is an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"DragTargetAcceptEvent")," class with the following fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src_id")," - unique control ID of draggable."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"x")," - x component of the global position when the specific pointer event occurred on the draggable."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"y")," - y component of the global position when the specific pointer event occurred on the draggable.")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"page.get_control(e.src_id)")," to retrieve Control reference by its ID."),(0,o.kt)("h3",{id:"on_leave"},(0,o.kt)("inlineCode",{parentName:"h3"},"on_leave")),(0,o.kt)("p",null,"Fires when a mouse pointer during ongoing drag event leaves the target."),(0,o.kt)("h3",{id:"on_will_accept"},(0,o.kt)("inlineCode",{parentName:"h3"},"on_will_accept")),(0,o.kt)("p",null,"Fires when draggable is dragged on top of a drag target. ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," field of event details contains ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," (String) if both ",(0,o.kt)("inlineCode",{parentName:"p"},"Draggable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DragTarget")," has the same ",(0,o.kt)("inlineCode",{parentName:"p"},"group"),"; otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," (String)."))}h.isMDXComponent=!0}}]);