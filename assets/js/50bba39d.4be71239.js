"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[8981],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),h=s(n),u=i,f=h["".concat(d,".").concat(u)]||h[u]||c[u]||l;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=u;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[h]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2195:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return h}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],r={title:"LineChart",sidebar_label:"LineChart",slug:"linechart"},d=void 0,s={unversionedId:"controls/linechart",id:"controls/linechart",title:"LineChart",description:"Draws a line chart.",source:"@site/docs/controls/linechart.md",sourceDirName:"controls",slug:"/controls/linechart",permalink:"/website/docs/controls/linechart",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/linechart.md",tags:[],version:"current",frontMatter:{title:"LineChart",sidebar_label:"LineChart",slug:"linechart"},sidebar:"docs",previous:{title:"Charts",permalink:"/website/docs/controls/charts"},next:{title:"BarChart",permalink:"/website/docs/controls/barchart"}},p={},h=[{value:"Examples",id:"examples",level:2},{value:"LineChart 1",id:"linechart-1",level:3},{value:"LineChart 2",id:"linechart-2",level:3},{value:"<code>LineChart</code> properties",id:"linechart-properties",level:2},{value:"<code>data_series</code>",id:"data_series",level:3},{value:"<code>animate</code>",id:"animate",level:3},{value:"<code>interactive</code>",id:"interactive",level:3},{value:"<code>bgcolor</code>",id:"bgcolor",level:3},{value:"<code>tooltip_bgcolor</code>",id:"tooltip_bgcolor",level:3},{value:"<code>border</code>",id:"border",level:3},{value:"<code>point_line_start</code>",id:"point_line_start",level:3},{value:"<code>point_line_end</code>",id:"point_line_end",level:3},{value:"<code>horizontal_grid_lines</code>",id:"horizontal_grid_lines",level:3},{value:"<code>vertical_grid_lines</code>",id:"vertical_grid_lines",level:3},{value:"<code>left_axis</code>",id:"left_axis",level:3},{value:"<code>top_axis</code>",id:"top_axis",level:3},{value:"<code>right_axis</code>",id:"right_axis",level:3},{value:"<code>bottom_axis</code>",id:"bottom_axis",level:3},{value:"<code>baseline_x</code>",id:"baseline_x",level:3},{value:"<code>min_x</code>",id:"min_x",level:3},{value:"<code>max_x</code>",id:"max_x",level:3},{value:"<code>baseline_y</code>",id:"baseline_y",level:3},{value:"<code>min_y</code>",id:"min_y",level:3},{value:"<code>max_y</code>",id:"max_y",level:3},{value:"<code>LineChart</code> events",id:"linechart-events",level:2},{value:"<code>on_chart_event</code>",id:"on_chart_event",level:3},{value:"<code>LineChartData</code> properties",id:"linechartdata-properties",level:2},{value:"<code>data_points</code>",id:"data_points",level:3},{value:"<code>curved</code>",id:"curved",level:3},{value:"<code>color</code>",id:"color",level:3},{value:"<code>gradient</code>",id:"gradient",level:3},{value:"<code>stroke_width</code>",id:"stroke_width",level:3},{value:"<code>stroke_cap_round</code>",id:"stroke_cap_round",level:3},{value:"<code>dash_pattern</code>",id:"dash_pattern",level:3},{value:"<code>shadow</code>",id:"shadow",level:3},{value:"<code>above_line_bgcolor</code>",id:"above_line_bgcolor",level:3},{value:"<code>above_line_gradient</code>",id:"above_line_gradient",level:3},{value:"<code>above_line_cutoff_y</code>",id:"above_line_cutoff_y",level:3},{value:"<code>above_line</code>",id:"above_line",level:3},{value:"<code>below_line_bgcolor</code>",id:"below_line_bgcolor",level:3},{value:"<code>below_line_gradient</code>",id:"below_line_gradient",level:3},{value:"<code>below_line_cutoff_y</code>",id:"below_line_cutoff_y",level:3},{value:"<code>below_line</code>",id:"below_line",level:3},{value:"<code>selected_below_line</code>",id:"selected_below_line",level:3},{value:"<code>point</code>",id:"point",level:3},{value:"<code>selected_point</code>",id:"selected_point",level:3},{value:"<code>LineChartDataPoint</code> properties",id:"linechartdatapoint-properties",level:2},{value:"<code>x</code>",id:"x",level:3},{value:"<code>y</code>",id:"y",level:3},{value:"<code>selected</code>",id:"selected",level:3},{value:"<code>show_tooltip</code>",id:"show_tooltip",level:3},{value:"<code>tooltip</code>",id:"tooltip",level:3},{value:"<code>tooltip_style</code>",id:"tooltip_style",level:3},{value:"<code>tooltip_align</code>",id:"tooltip_align",level:3},{value:"<code>point</code>",id:"point-1",level:3},{value:"<code>selected_point</code>",id:"selected_point-1",level:3},{value:"<code>show_above_line</code>",id:"show_above_line",level:3},{value:"<code>show_below_line</code>",id:"show_below_line",level:3},{value:"<code>selected_below_line</code>",id:"selected_below_line-1",level:3},{value:"<code>ChartGridLines</code> properties",id:"chartgridlines-properties",level:2},{value:"<code>interval</code>",id:"interval",level:3},{value:"<code>color</code>",id:"color-1",level:3},{value:"<code>width</code>",id:"width",level:3},{value:"<code>dash_pattern</code>",id:"dash_pattern-1",level:3},{value:"<code>ChartAxis</code> properties",id:"chartaxis-properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>title_size</code>",id:"title_size",level:3},{value:"<code>show_labels</code>",id:"show_labels",level:3},{value:"<code>labels</code>",id:"labels",level:3},{value:"<code>labels_interval</code>",id:"labels_interval",level:3},{value:"<code>labels_size</code>",id:"labels_size",level:3},{value:"<code>ChartAxisLabel</code> properties",id:"chartaxislabel-properties",level:2},{value:"<code>value</code>",id:"value",level:3},{value:"<code>label</code>",id:"label",level:3},{value:"<code>ChartPointLine</code> properties",id:"chartpointline-properties",level:2},{value:"<code>color</code>",id:"color-2",level:3},{value:"<code>width</code>",id:"width-1",level:3},{value:"<code>dash_pattern</code>",id:"dash_pattern-2",level:3}],c={toc:h};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Draws a line chart."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/charts/linechart"},"Live example")),(0,l.kt)("h3",{id:"linechart-1"},"LineChart 1"),(0,l.kt)("img",{src:"/img/docs/controls/charts/linechart-sample-1.gif",className:"screenshot-50"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 1.5),\n                ft.LineChartDataPoint(5, 1.4),\n                ft.LineChartDataPoint(7, 3.4),\n                ft.LineChartDataPoint(10, 2),\n                ft.LineChartDataPoint(12, 2.2),\n                ft.LineChartDataPoint(13, 1.8),\n            ],\n            stroke_width=8,\n            color=ft.colors.LIGHT_GREEN,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 2.8),\n                ft.LineChartDataPoint(7, 1.2),\n                ft.LineChartDataPoint(10, 2.8),\n                ft.LineChartDataPoint(12, 2.6),\n                ft.LineChartDataPoint(13, 3.9),\n            ],\n            color=ft.colors.PINK,\n            below_line_bgcolor=ft.colors.with_opacity(0, ft.colors.PINK),\n            stroke_width=8,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 2.8),\n                ft.LineChartDataPoint(3, 1.9),\n                ft.LineChartDataPoint(6, 3),\n                ft.LineChartDataPoint(10, 1.3),\n                ft.LineChartDataPoint(13, 2.5),\n            ],\n            color=ft.colors.CYAN,\n            stroke_width=8,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n    ]\n\n    data_2 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 4),\n                ft.LineChartDataPoint(5, 1.8),\n                ft.LineChartDataPoint(7, 5),\n                ft.LineChartDataPoint(10, 2),\n                ft.LineChartDataPoint(12, 2.2),\n                ft.LineChartDataPoint(13, 1.8),\n            ],\n            stroke_width=4,\n            color=ft.colors.with_opacity(0.5, ft.colors.LIGHT_GREEN),\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 2.8),\n                ft.LineChartDataPoint(7, 1.2),\n                ft.LineChartDataPoint(10, 2.8),\n                ft.LineChartDataPoint(12, 2.6),\n                ft.LineChartDataPoint(13, 3.9),\n            ],\n            color=ft.colors.with_opacity(0.5, ft.colors.PINK),\n            below_line_bgcolor=ft.colors.with_opacity(0.2, ft.colors.PINK),\n            stroke_width=4,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 3.8),\n                ft.LineChartDataPoint(3, 1.9),\n                ft.LineChartDataPoint(6, 5),\n                ft.LineChartDataPoint(10, 3.3),\n                ft.LineChartDataPoint(13, 4.5),\n            ],\n            color=ft.colors.with_opacity(0.5, ft.colors.CYAN),\n            stroke_width=4,\n            stroke_cap_round=True,\n        ),\n    ]\n\n    chart = ft.LineChart(\n        data_series=data_1,\n        border=ft.Border(\n            bottom=ft.BorderSide(4, ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE))\n        ),\n        left_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=1,\n                    label=ft.Text("1m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Text("2m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=3,\n                    label=ft.Text("3m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=4,\n                    label=ft.Text("4m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Text("5m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=6,\n                    label=ft.Text("6m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n            ],\n            labels_size=40,\n        ),\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Container(\n                        ft.Text(\n                            "SEP",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=7,\n                    label=ft.Container(\n                        ft.Text(\n                            "OCT",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=12,\n                    label=ft.Container(\n                        ft.Text(\n                            "DEC",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n            ],\n            labels_size=32,\n        ),\n        tooltip_bgcolor=ft.colors.with_opacity(0.8, ft.colors.BLUE_GREY),\n        min_y=0,\n        max_y=4,\n        min_x=0,\n        max_x=14,\n        # animate=5000,\n        expand=True,\n    )\n\n    def toggle_data(e):\n        if s.toggle:\n            chart.data_series = data_2\n            chart.data_series[2].point = True\n            chart.max_y = 6\n            chart.interactive = False\n        else:\n            chart.data_series = data_1\n            chart.max_y = 4\n            chart.interactive = True\n        s.toggle = not s.toggle\n        chart.update()\n\n    page.add(ft.IconButton(ft.icons.REFRESH, on_click=toggle_data), chart)\n\nft.app(main)\n')),(0,l.kt)("h3",{id:"linechart-2"},"LineChart 2"),(0,l.kt)("img",{src:"/img/docs/controls/charts/linechart-sample-2.gif",className:"screenshot-50"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(0, 3),\n                ft.LineChartDataPoint(2.6, 2),\n                ft.LineChartDataPoint(4.9, 5),\n                ft.LineChartDataPoint(6.8, 3.1),\n                ft.LineChartDataPoint(8, 4),\n                ft.LineChartDataPoint(9.5, 3),\n                ft.LineChartDataPoint(11, 4),\n            ],\n            stroke_width=5,\n            color=ft.colors.CYAN,\n            curved=True,\n            stroke_cap_round=True,\n        )\n    ]\n\n    data_2 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(0, 3.44),\n                ft.LineChartDataPoint(2.6, 3.44),\n                ft.LineChartDataPoint(4.9, 3.44),\n                ft.LineChartDataPoint(6.8, 3.44),\n                ft.LineChartDataPoint(8, 3.44),\n                ft.LineChartDataPoint(9.5, 3.44),\n                ft.LineChartDataPoint(11, 3.44),\n            ],\n            stroke_width=5,\n            color=ft.colors.CYAN,\n            curved=True,\n            stroke_cap_round=True,\n        )\n    ]\n\n    chart = ft.LineChart(\n        data_series=data_1,\n        border=ft.border.all(3, ft.colors.with_opacity(0.2, ft.colors.ON_SURFACE)),\n        horizontal_grid_lines=ft.ChartGridLines(\n            interval=1, color=ft.colors.with_opacity(0.2, ft.colors.ON_SURFACE), width=1\n        ),\n        vertical_grid_lines=ft.ChartGridLines(\n            interval=1, color=ft.colors.with_opacity(0.2, ft.colors.ON_SURFACE), width=1\n        ),\n        left_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=1,\n                    label=ft.Text("10K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=3,\n                    label=ft.Text("30K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Text("50K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n            ],\n            labels_size=40,\n        ),\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Container(\n                        ft.Text(\n                            "MAR",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Container(\n                        ft.Text(\n                            "JUN",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=8,\n                    label=ft.Container(\n                        ft.Text(\n                            "SEP",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.colors.with_opacity(0.5, ft.colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n            ],\n            labels_size=32,\n        ),\n        tooltip_bgcolor=ft.colors.with_opacity(0.8, ft.colors.BLUE_GREY),\n        min_y=0,\n        max_y=6,\n        min_x=0,\n        max_x=11,\n        # animate=5000,\n        expand=True,\n    )\n\n    def toggle_data(e):\n        if s.toggle:\n            chart.data_series = data_2\n            chart.interactive = False\n        else:\n            chart.data_series = data_1\n            chart.interactive = True\n        s.toggle = not s.toggle\n        chart.update()\n\n    page.add(ft.ElevatedButton("avg", on_click=toggle_data), chart)\n\nft.app(main)\n')),(0,l.kt)("h2",{id:"linechart-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"LineChart")," properties"),(0,l.kt)("img",{src:"/img/docs/controls/charts/linechart-diagram.svg",className:"screenshot-100"}),(0,l.kt)("h3",{id:"data_series"},(0,l.kt)("inlineCode",{parentName:"h3"},"data_series")),(0,l.kt)("p",null,"A list of ",(0,l.kt)("a",{parentName:"p",href:"#linechartdata-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"LineChartData"))," controls drawn as separate lines on a chart."),(0,l.kt)("h3",{id:"animate"},(0,l.kt)("inlineCode",{parentName:"h3"},"animate")),(0,l.kt)("p",null,"Controls chart implicit animation."),(0,l.kt)("p",null,"The value of ",(0,l.kt)("inlineCode",{parentName:"p"},"animate")," property could be one of the following types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"True")," to enable chart animation with ",(0,l.kt)("inlineCode",{parentName:"li"},"linear")," curve and ",(0,l.kt)("inlineCode",{parentName:"li"},"1000")," milliseconds duration."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int")," - enables chart animation with ",(0,l.kt)("inlineCode",{parentName:"li"},"linear")," curve and specified number of milliseconds."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ft.Animation(duration: int, curve: str)")," - enables chart animation with specified duration and transition curve.")),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"animate")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," then ",(0,l.kt)("inlineCode",{parentName:"p"},"linear")," animation with ",(0,l.kt)("inlineCode",{parentName:"p"},"150")," milliseconds duration is enabled by default."),(0,l.kt)("h3",{id:"interactive"},(0,l.kt)("inlineCode",{parentName:"h3"},"interactive")),(0,l.kt)("p",null,"Enables automatic tooltips and points highlighting when hovering over the chart."),(0,l.kt)("h3",{id:"bgcolor"},(0,l.kt)("inlineCode",{parentName:"h3"},"bgcolor")),(0,l.kt)("p",null,"Background ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of the chart."),(0,l.kt)("h3",{id:"tooltip_bgcolor"},(0,l.kt)("inlineCode",{parentName:"h3"},"tooltip_bgcolor")),(0,l.kt)("p",null,"Background ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of tooltips."),(0,l.kt)("h3",{id:"border"},(0,l.kt)("inlineCode",{parentName:"h3"},"border")),(0,l.kt)("p",null,"The border around the chart. The value is the instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"ft.Border")," class."),(0,l.kt)("h3",{id:"point_line_start"},(0,l.kt)("inlineCode",{parentName:"h3"},"point_line_start")),(0,l.kt)("p",null,"The start of the vertical line drawn under the selected point. Default is chart's bottom edge."),(0,l.kt)("h3",{id:"point_line_end"},(0,l.kt)("inlineCode",{parentName:"h3"},"point_line_end")),(0,l.kt)("p",null,"The end of the vertical line drawn at selected point position. Default is data point's ",(0,l.kt)("inlineCode",{parentName:"p"},"y")," value."),(0,l.kt)("h3",{id:"horizontal_grid_lines"},(0,l.kt)("inlineCode",{parentName:"h3"},"horizontal_grid_lines")),(0,l.kt)("p",null,"Controls drawing of chart's horizontal lines. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartgridlines"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartGridLines"))," class."),(0,l.kt)("h3",{id:"vertical_grid_lines"},(0,l.kt)("inlineCode",{parentName:"h3"},"vertical_grid_lines")),(0,l.kt)("p",null,"Controls drawing of chart's vertical lines. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartgridlines"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartGridLines"))," class."),(0,l.kt)("h3",{id:"left_axis"},(0,l.kt)("inlineCode",{parentName:"h3"},"left_axis")),(0,l.kt)("p",null,"Configures the appearance of the left axis, its title and labels. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,l.kt)("h3",{id:"top_axis"},(0,l.kt)("inlineCode",{parentName:"h3"},"top_axis")),(0,l.kt)("p",null,"Configures the appearance of the top axis, its title and labels. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,l.kt)("h3",{id:"right_axis"},(0,l.kt)("inlineCode",{parentName:"h3"},"right_axis")),(0,l.kt)("p",null,"Configures the appearance of the right axis, its title and labels. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,l.kt)("h3",{id:"bottom_axis"},(0,l.kt)("inlineCode",{parentName:"h3"},"bottom_axis")),(0,l.kt)("p",null,"Configures the appearance of the bottom axis, its title and labels. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class."),(0,l.kt)("h3",{id:"baseline_x"},(0,l.kt)("inlineCode",{parentName:"h3"},"baseline_x")),(0,l.kt)("p",null,"Baseline value for X axis. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("h3",{id:"min_x"},(0,l.kt)("inlineCode",{parentName:"h3"},"min_x")),(0,l.kt)("p",null,"Configures the minimum displayed value for X axis."),(0,l.kt)("h3",{id:"max_x"},(0,l.kt)("inlineCode",{parentName:"h3"},"max_x")),(0,l.kt)("p",null,"Configures the maximum displayed value for X axis."),(0,l.kt)("h3",{id:"baseline_y"},(0,l.kt)("inlineCode",{parentName:"h3"},"baseline_y")),(0,l.kt)("p",null,"Baseline value for Y axis. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("h3",{id:"min_y"},(0,l.kt)("inlineCode",{parentName:"h3"},"min_y")),(0,l.kt)("p",null,"Configures the minimum displayed value for Y axis."),(0,l.kt)("h3",{id:"max_y"},(0,l.kt)("inlineCode",{parentName:"h3"},"max_y")),(0,l.kt)("p",null,"Configures the maximum displayed value for Y axis."),(0,l.kt)("h2",{id:"linechart-events"},(0,l.kt)("inlineCode",{parentName:"h2"},"LineChart")," events"),(0,l.kt)("h3",{id:"on_chart_event"},(0,l.kt)("inlineCode",{parentName:"h3"},"on_chart_event")),(0,l.kt)("p",null,"Fires when a chart line is hovered or clicked."),(0,l.kt)("p",null,"Event data is an instance ",(0,l.kt)("inlineCode",{parentName:"p"},"ft.LineChartEvent")," class with the following properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type")," event type such as ",(0,l.kt)("inlineCode",{parentName:"li"},"PointerHoverEvent"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"PointerExitEvent"),", etc."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bar_index")," - line's index or ",(0,l.kt)("inlineCode",{parentName:"li"},"-1")," if no line hovered."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"spot_index")," - line point's index or ",(0,l.kt)("inlineCode",{parentName:"li"},"-1")," if no point hovered.")),(0,l.kt)("h2",{id:"linechartdata-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"LineChartData")," properties"),(0,l.kt)("h3",{id:"data_points"},(0,l.kt)("inlineCode",{parentName:"h3"},"data_points")),(0,l.kt)("p",null,"A list of points (dots) of ",(0,l.kt)("a",{parentName:"p",href:"#linechartdatapoint-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"LineChartDataPoint"))," type representing a single chart line."),(0,l.kt)("h3",{id:"curved"},(0,l.kt)("inlineCode",{parentName:"h3"},"curved")),(0,l.kt)("p",null,"Set to ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," to draw chart line as a curve. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,l.kt)("h3",{id:"color"},(0,l.kt)("inlineCode",{parentName:"h3"},"color")),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of chart line."),(0,l.kt)("h3",{id:"gradient"},(0,l.kt)("inlineCode",{parentName:"h3"},"gradient")),(0,l.kt)("p",null,"Gradient to draw line's background. See ",(0,l.kt)("a",{parentName:"p",href:"container#gradient"},(0,l.kt)("inlineCode",{parentName:"a"},"Container.gradient"))," property for more information and possible values."),(0,l.kt)("h3",{id:"stroke_width"},(0,l.kt)("inlineCode",{parentName:"h3"},"stroke_width")),(0,l.kt)("p",null,"The width of a chart line."),(0,l.kt)("h3",{id:"stroke_cap_round"},(0,l.kt)("inlineCode",{parentName:"h3"},"stroke_cap_round")),(0,l.kt)("p",null,"Set to ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," to draw rounded line caps. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,l.kt)("h3",{id:"dash_pattern"},(0,l.kt)("inlineCode",{parentName:"h3"},"dash_pattern")),(0,l.kt)("p",null,"Defines dash effect of the line. The value is a circular list of dash offsets and lengths. For example, the list ",(0,l.kt)("inlineCode",{parentName:"p"},"[5, 10]")," would result in dashes 5 pixels long followed by blank spaces 10 pixels long. By default, a solid line is drawn."),(0,l.kt)("h3",{id:"shadow"},(0,l.kt)("inlineCode",{parentName:"h3"},"shadow")),(0,l.kt)("p",null,"Shadow to drop by a chart line. The value is the instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"ft.Shadow")," class."),(0,l.kt)("h3",{id:"above_line_bgcolor"},(0,l.kt)("inlineCode",{parentName:"h3"},"above_line_bgcolor")),(0,l.kt)("p",null,"Fill the area above chart line with the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),"."),(0,l.kt)("h3",{id:"above_line_gradient"},(0,l.kt)("inlineCode",{parentName:"h3"},"above_line_gradient")),(0,l.kt)("p",null,"Fill the area above chart line with the specified gradient."),(0,l.kt)("h3",{id:"above_line_cutoff_y"},(0,l.kt)("inlineCode",{parentName:"h3"},"above_line_cutoff_y")),(0,l.kt)("p",null,"Cut off filled area above line chart at specific Y value."),(0,l.kt)("h3",{id:"above_line"},(0,l.kt)("inlineCode",{parentName:"h3"},"above_line")),(0,l.kt)("p",null,"A vertical line drawn between a line point and the top edge of the chart. The value is an instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartpointline-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartPointLine"))," class."),(0,l.kt)("h3",{id:"below_line_bgcolor"},(0,l.kt)("inlineCode",{parentName:"h3"},"below_line_bgcolor")),(0,l.kt)("p",null,"Fill the area below chart line with the specified ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),"."),(0,l.kt)("h3",{id:"below_line_gradient"},(0,l.kt)("inlineCode",{parentName:"h3"},"below_line_gradient")),(0,l.kt)("p",null,"Fill the area below chart line with the specified gradient."),(0,l.kt)("h3",{id:"below_line_cutoff_y"},(0,l.kt)("inlineCode",{parentName:"h3"},"below_line_cutoff_y")),(0,l.kt)("p",null,"Cut off filled area below line chart at specific Y value."),(0,l.kt)("h3",{id:"below_line"},(0,l.kt)("inlineCode",{parentName:"h3"},"below_line")),(0,l.kt)("p",null,"A vertical line drawn between a line point and the bottom edge of the chart. The value is an instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartpointline-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartPointLine"))," class."),(0,l.kt)("h3",{id:"selected_below_line"},(0,l.kt)("inlineCode",{parentName:"h3"},"selected_below_line")),(0,l.kt)("p",null,"A vertical line drawn between selected line point and the bottom adge of the chart. The value is either ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," - draw a line with default style, ",(0,l.kt)("inlineCode",{parentName:"p"},"False")," - do not draw a line under selected point, or an instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartpointline-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartPointLine"))," class to specify line style to draw."),(0,l.kt)("h3",{id:"point"},(0,l.kt)("inlineCode",{parentName:"h3"},"point")),(0,l.kt)("p",null,"Configures the appearance and shape of a line point (dot). The value of this property is either ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," - draw a point with default style, ",(0,l.kt)("inlineCode",{parentName:"p"},"False")," - do not draw a line point, or one of the implementations of ",(0,l.kt)("inlineCode",{parentName:"p"},"ChartPointShape")," class:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ChartCirclePoint")," - circle point"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ChartSquarePoint")," - square point"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ChartCrossPoint")," - cross point")),(0,l.kt)("h3",{id:"selected_point"},(0,l.kt)("inlineCode",{parentName:"h3"},"selected_point")),(0,l.kt)("p",null,"Configures the appearance and shape of a selected line point. See ",(0,l.kt)("a",{parentName:"p",href:"#point"},(0,l.kt)("inlineCode",{parentName:"a"},"LineChartData.point"))," for supported property values."),(0,l.kt)("h2",{id:"linechartdatapoint-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"LineChartDataPoint")," properties"),(0,l.kt)("h3",{id:"x"},(0,l.kt)("inlineCode",{parentName:"h3"},"x")),(0,l.kt)("p",null,"The position of a point on ",(0,l.kt)("inlineCode",{parentName:"p"},"X")," axis."),(0,l.kt)("h3",{id:"y"},(0,l.kt)("inlineCode",{parentName:"h3"},"y")),(0,l.kt)("p",null,"The position of a point on ",(0,l.kt)("inlineCode",{parentName:"p"},"Y")," axis."),(0,l.kt)("h3",{id:"selected"},(0,l.kt)("inlineCode",{parentName:"h3"},"selected")),(0,l.kt)("p",null,"Draw the point as selected when ",(0,l.kt)("inlineCode",{parentName:"p"},"LineChart.interactive")," is set to False."),(0,l.kt)("h3",{id:"show_tooltip"},(0,l.kt)("inlineCode",{parentName:"h3"},"show_tooltip")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True")," (default) if a tooltip should be shown on top of hovered data point."),(0,l.kt)("h3",{id:"tooltip"},(0,l.kt)("inlineCode",{parentName:"h3"},"tooltip")),(0,l.kt)("p",null,"A custom tooltip value. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,l.kt)("h3",{id:"tooltip_style"},(0,l.kt)("inlineCode",{parentName:"h3"},"tooltip_style")),(0,l.kt)("p",null,"A text style to display tooltip with. The value is the instance of ",(0,l.kt)("a",{parentName:"p",href:"text#textstyle-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ft.TextStyle"))," class."),(0,l.kt)("h3",{id:"tooltip_align"},(0,l.kt)("inlineCode",{parentName:"h3"},"tooltip_align")),(0,l.kt)("p",null,"An align for the tooltip. The value is the instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"ft.TextAlign")," enum."),(0,l.kt)("h3",{id:"point-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"point")),(0,l.kt)("p",null,"Configures the appearance and shape of a line point. See ",(0,l.kt)("a",{parentName:"p",href:"#point"},(0,l.kt)("inlineCode",{parentName:"a"},"LineChartData.point"))," for supported property values."),(0,l.kt)("h3",{id:"selected_point-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"selected_point")),(0,l.kt)("p",null,"Configures the appearance and shape of a selected line point. See ",(0,l.kt)("a",{parentName:"p",href:"#point"},(0,l.kt)("inlineCode",{parentName:"a"},"LineChartData.point"))," for supported property values."),(0,l.kt)("h3",{id:"show_above_line"},(0,l.kt)("inlineCode",{parentName:"h3"},"show_above_line")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True")," to display a line above data point. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,l.kt)("h3",{id:"show_below_line"},(0,l.kt)("inlineCode",{parentName:"h3"},"show_below_line")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True")," to display a line below data point. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,l.kt)("h3",{id:"selected_below_line-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"selected_below_line")),(0,l.kt)("p",null,"A vertical line drawn between selected line point and the bottom adge of the chart. The value is either ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," - draw a line with default style, ",(0,l.kt)("inlineCode",{parentName:"p"},"False")," - do not draw a line under selected point, or an instance of ",(0,l.kt)("a",{parentName:"p",href:"#chartpointline-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ChartPointLine"))," class to specify line style to draw."),(0,l.kt)("h2",{id:"chartgridlines-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"ChartGridLines")," properties"),(0,l.kt)("p",null,"Configures the appearance of horizontal and vertical grid lines within the chart."),(0,l.kt)("h3",{id:"interval"},(0,l.kt)("inlineCode",{parentName:"h3"},"interval")),(0,l.kt)("p",null,"Interval between grid lines. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("h3",{id:"color-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"color")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"Color")," of a grid line."),(0,l.kt)("h3",{id:"width"},(0,l.kt)("inlineCode",{parentName:"h3"},"width")),(0,l.kt)("p",null,"Width of a grid line. Default is ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("h3",{id:"dash_pattern-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"dash_pattern")),(0,l.kt)("p",null,"Defines dash effect of the line. The value is a circular list of dash offsets and lengths. For example, the list ",(0,l.kt)("inlineCode",{parentName:"p"},"[5, 10]")," would result in dashes 5 pixels long followed by blank spaces 10 pixels long. By default, a solid line is drawn."),(0,l.kt)("h2",{id:"chartaxis-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"ChartAxis")," properties"),(0,l.kt)("p",null,"Configures chart axis."),(0,l.kt)("h3",{id:"title"},(0,l.kt)("inlineCode",{parentName:"h3"},"title")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Control")," to display as axis title."),(0,l.kt)("h3",{id:"title_size"},(0,l.kt)("inlineCode",{parentName:"h3"},"title_size")),(0,l.kt)("p",null,"Width or height of title area."),(0,l.kt)("h3",{id:"show_labels"},(0,l.kt)("inlineCode",{parentName:"h3"},"show_labels")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"True")," to display labels along the axis. If ",(0,l.kt)("inlineCode",{parentName:"p"},"labels")," is empty then automatic labels are displayed. "),(0,l.kt)("h3",{id:"labels"},(0,l.kt)("inlineCode",{parentName:"h3"},"labels")),(0,l.kt)("p",null,"The list of ",(0,l.kt)("a",{parentName:"p",href:"#chartaxislabel-properties"},(0,l.kt)("inlineCode",{parentName:"a"},"ft.ChartAxisLabel"))," objects to set custom axis labels for only specific values."),(0,l.kt)("h3",{id:"labels_interval"},(0,l.kt)("inlineCode",{parentName:"h3"},"labels_interval")),(0,l.kt)("p",null,"The interval between automatic labels."),(0,l.kt)("h3",{id:"labels_size"},(0,l.kt)("inlineCode",{parentName:"h3"},"labels_size")),(0,l.kt)("p",null,"Width or height of labels area."),(0,l.kt)("h2",{id:"chartaxislabel-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"ChartAxisLabel")," properties"),(0,l.kt)("p",null,"Configures a custom label for specific value."),(0,l.kt)("h3",{id:"value"},(0,l.kt)("inlineCode",{parentName:"h3"},"value")),(0,l.kt)("p",null,"A value to draw label for."),(0,l.kt)("h3",{id:"label"},(0,l.kt)("inlineCode",{parentName:"h3"},"label")),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"Control")," to draw as a label."),(0,l.kt)("h2",{id:"chartpointline-properties"},(0,l.kt)("inlineCode",{parentName:"h2"},"ChartPointLine")," properties"),(0,l.kt)("h3",{id:"color-2"},(0,l.kt)("inlineCode",{parentName:"h3"},"color")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"Color")," of the line."),(0,l.kt)("h3",{id:"width-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"width")),(0,l.kt)("p",null,"Width of the line."),(0,l.kt)("h3",{id:"dash_pattern-2"},(0,l.kt)("inlineCode",{parentName:"h3"},"dash_pattern")),(0,l.kt)("p",null,"Dash pattern of the line."))}u.isMDXComponent=!0}}]);