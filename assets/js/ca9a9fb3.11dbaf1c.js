"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[6517],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=i,m=c["".concat(p,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,r(r({ref:t},s),{},{components:n})):a.createElement(m,r({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5704:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],l={title:"Authentication",sidebar_label:"Authentication"},p=void 0,u={unversionedId:"guides/python/authentication",id:"guides/python/authentication",title:"Authentication",description:"\u60a8\u53ef\u4ee5\u5728 Flet \u5e94\u7528\u4e2d\u4f7f\u7528\u7b2c\u4e09\u65b9\u8eab\u4efd\u63d0\u4f9b\u8005\uff0c\u4f8b\u5982 Github\uff0cGoogle\uff0cGoogle\uff0cAzure\uff0cAuth0\uff0cLinkedIn \u7b49\uff0c\u5728\u60a8\u7684 Flet \u5e94\u7528\u4e2d\u5b9e\u73b0\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\uff08\u201c\u4f7f\u7528 X\u201d\u6309\u94ae\uff09\u3002",source:"@site/docs/guides/python/authentication.md",sourceDirName:"guides/python",slug:"/guides/python/authentication",permalink:"/website/docs/guides/python/authentication",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/authentication.md",tags:[],version:"current",frontMatter:{title:"Authentication",sidebar_label:"Authentication"},sidebar:"docs",previous:{title:"Animations",permalink:"/website/docs/guides/python/animations"},next:{title:"Client storage",permalink:"/website/docs/guides/python/client-storage"}},s={},c=[{value:"\u767b\u5f55\u8fc7\u7a0b\u6982\u8ff0",id:"\u767b\u5f55\u8fc7\u7a0b\u6982\u8ff0",level:2},{value:"\u914d\u7f6e Oauth Provider",id:"\u914d\u7f6e-oauth-provider",level:2},{value:"Sign in with OAuth provider",id:"sign-in-with-oauth-provider",level:2},{value:"Redirect URL",id:"redirect-url",level:3},{value:"Scope",id:"scope",level:3},{value:"Checking authentication results",id:"checking-authentication-results",level:3},{value:"Accessing user details",id:"accessing-user-details",level:2},{value:"Using OAuth token",id:"using-oauth-token",level:2},{value:"Saving and restoring an auth token",id:"saving-and-restoring-an-auth-token",level:2},{value:"Signing out",id:"signing-out",level:2},{value:"Customizing authorization flow",id:"customizing-authorization-flow",level:2},{value:"Configuring a custom OAuth provider",id:"configuring-a-custom-oauth-provider",level:2}],d={toc:c};function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u60a8\u53ef\u4ee5\u5728 Flet \u5e94\u7528\u4e2d\u4f7f\u7528\u7b2c\u4e09\u65b9\u8eab\u4efd\u63d0\u4f9b\u8005\uff0c\u4f8b\u5982 Github\uff0cGoogle\uff0cGoogle\uff0cAzure\uff0cAuth0\uff0cLinkedIn \u7b49\uff0c\u5728\u60a8\u7684 Flet \u5e94\u7528\u4e2d\u5b9e\u73b0\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\uff08\u201c\u4f7f\u7528 X\u201d\u6309\u94ae\uff09\u3002"),(0,o.kt)("p",null,"\u8eab\u4efd\u63d0\u4f9b\u5546\u5fc5\u987b\u652f\u6301",(0,o.kt)("a",{parentName:"p",href:"https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow"},"OAUTH 2.0 \u6388\u6743\u4ee3\u7801\u6d41"),"\u624d\u80fd\u68c0\u7d22 API \u8bbf\u95ee\u4ee4\u724c\u3002"),(0,o.kt)("p",null,"\u5185\u7f6e Flet \u767b\u5f55\u5177\u6709\u51ed\u636e\u548c\u7528\u6237\u7ba1\u7406\u7684\u767b\u5f55\u8ba1\u5212\u4ee5\u672a\u6765\u53d1\u884c\u3002\n\u5982\u679c\u60a8\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u521b\u5efa\u548c\u7ba1\u7406\u7528\u6237\u5e10\u6237\uff0c\u5219\u53ef\u4ee5\u5b9e\u73b0\u5b83\n\u901a\u8fc7\u60a8\u81ea\u5df1\u6216\u4f7f\u7528",(0,o.kt)("a",{parentName:"p",href:"https://auth0.com/user-management"},"auth0"),"\u8eab\u4efd\u63d0\u4f9b\u5546\n\u6177\u6168\u7684\u81ea\u7531\u5c42\u3002"),(0,o.kt)("p",null,"Flet \u8eab\u4efd\u9a8c\u8bc1\u529f\u80fd:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u4e0e Flet \u684c\u9762\uff0cWeb \u548c\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u4f7f\u7528\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u591a\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u63d0\u4f9b\u5546\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5e26\u6709\u81ea\u52a8\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7684\u5185\u7f6e OAuth \u63d0\u4f9b\u5546\u83b7\u53d6:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"github"),(0,o.kt)("li",{parentName:"ul"},"azure"),(0,o.kt)("li",{parentName:"ul"},"\u8c37\u6b4c"),(0,o.kt)("li",{parentName:"ul"},"auth0"))),(0,o.kt)("li",{parentName:"ul"},"\u53ef\u9009\u7ec4\u63d0\u53d6\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u81ea\u52a8\u4ee4\u724c\u5237\u65b0\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u4fdd\u5b58\u7684\u4ee4\u724c\u767b\u5f55\uff08\u201c\u8bb0\u4f4f\u6211\u201d\uff09\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u81ea\u5b9a\u4e49 OAuth \u63d0\u4f9b\u5546\u3002")),(0,o.kt)("h2",{id:"\u767b\u5f55\u8fc7\u7a0b\u6982\u8ff0"},"\u767b\u5f55\u8fc7\u7a0b\u6982\u8ff0"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u914d\u7f6e OAuth Provider\uff08\u5185\u7f6e\u6216\u901a\u7528\uff09\uff0c\u5e26\u6709\u5ba2\u6237\u7aef ID\uff0c\u5ba2\u6237\u7aef\u79d8\u5bc6\uff0c\u91cd\u5b9a\u5411 URL\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"page.login(provider)"),"\u542f\u52a8 OAuth Web \u6d41\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u7528\u6237\u6b63\u5728\u91cd\u5b9a\u5411\u5230 OAuth \u63d0\u4f9b\u5546\u7f51\u7ad9\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u5728\u63d0\u4f9b\u5546\u7f51\u7ad9\u4e0a\uff0c\u7528\u6237\u767b\u5f55\u5e76\u540c\u610f\u4f7f\u7528\u8bf7\u6c42\u7684\u8303\u56f4\u8bbf\u95ee\u670d\u52a1 API\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u63d0\u4f9b\u5546\u7f51\u7ad9\u5c06\u5e26\u6709\u6388\u6743\u4ee3\u7801\u7684 oauth \u56de\u8c03 URL \u91cd\u5b9a\u5411\u5230 Flet \u7684 OAuth \u56de\u8c03 URL\u3002"),(0,o.kt)("li",{parentName:"ul"},"Flet \u5c06\u6388\u6743\u4ee3\u7801\u6362\u6210\u4ee4\u724c\uff0c\u5e76\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"page.on_login"),"\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002"),(0,o.kt)("li",{parentName:"ul"},"Flet \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ece",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.token"),"\u5c5e\u6027\u548c\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u4e2d\u68c0\u7d22",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.user"),"\u7684\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u3002")),(0,o.kt)("h2",{id:"\u914d\u7f6e-oauth-provider"},"\u914d\u7f6e Oauth Provider"),(0,o.kt)("p",null,"Flet \u5177\u6709\u4ee5\u4e0b\u5185\u7f6e\u7684 OAuth \u63d0\u4f9b\u5546:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"github"),(0,o.kt)("li",{parentName:"ul"},"azure"),(0,o.kt)("li",{parentName:"ul"},"\u8c37\u6b4c"),(0,o.kt)("li",{parentName:"ul"},"auth0")),(0,o.kt)("p",null,"\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u914d\u7f6e\u901a\u7528\u7684 OAuth \u63d0\u4f9b\u5546\u5e76\u63d0\u4f9b\u6388\u6743\uff0c\u4ee4\u724c\u548c\u7528\u6237\u4fe1\u606f\u7ec8\u70b9\u3002"),(0,o.kt)("p",null,"\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 GitHub \u5e10\u6237\u914d\u7f6e Flet \u767b\u5f55\u9875\u9762\u3002"),(0,o.kt)("p",null,"\u8981\u4e0e github \u96c6\u6210 Flet \u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e94\u9996\u5148\u6ce8\u518c\u65b0\u7684",(0,o.kt)("a",{parentName:"p",href:"https://github.com/settings/developers"},"GitHub Oauth App"),"\uff08",(0,o.kt)("strong",{parentName:"p"},"\u914d\u7f6e\u6587\u4ef6\u8bbe\u7f6e"),"\u2192",(0,o.kt)("strong",{parentName:"p"},"\u5f00\u53d1\u4eba\u5458\u8bbe\u7f6e"),"\u2192",(0,o.kt)("strong",{parentName:"p"}," OAuth Apps "),"\uff09\u3002"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"*","\u6388\u6743\u56de\u8c03 URL ","*","*","\u5e94\u91c7\u7528\u683c\u5f0f:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{application-url}/api/oauth/redirect\n")),(0,o.kt)("img",{src:"/website/img/docs/getting-started/authentication/github-new-oauth-app.png",className:"screenshot-40"}),(0,o.kt)("p",null,'On OAuth app details page click "Generate a new client secret" button.\nCopy "Client ID" and "Client secret" values to a safe place - you\'ll need them in a Flet app.'),(0,o.kt)("img",{src:"/website/img/docs/getting-started/authentication/github-oauth-app-details.png",className:"screenshot-40"}),(0,o.kt)("h2",{id:"sign-in-with-oauth-provider"},"Sign in with OAuth provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nimport flet as ft\nfrom flet.auth.providers import GitHubOAuthProvider\n\nGITHUB_CLIENT_ID = os.getenv("GITHUB_CLIENT_ID")\nassert GITHUB_CLIENT_ID, "set GITHUB_CLIENT_ID environment variable"\nGITHUB_CLIENT_SECRET = os.getenv("GITHUB_CLIENT_SECRET")\nassert GITHUB_CLIENT_SECRET, "set GITHUB_CLIENT_SECRET environment variable"\n\ndef main(page: ft.Page):\n    provider = GitHubOAuthProvider(\n        client_id=GITHUB_CLIENT_ID,\n        client_secret=GITHUB_CLIENT_SECRET,\n        redirect_url="http://localhost:8550/api/oauth/redirect",\n    )\n\n    def login_click(e):\n        page.login(provider)\n\n    def on_login(e):\n        print("Login error:", e.error)\n        print("Access token:", page.auth.token.access_token)\n        print("User ID:", page.auth.user.id)\n\n    page.on_login = on_login\n    page.add(ft.ElevatedButton("Login with GitHub", on_click=login_click))\n\nft.app(target=main, port=8550, view=ft.WEB_BROWSER)\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Notice, we are fetching OAuth app client ID and client secret from an environment variables.\nDo not embed any secrets into source code to avoid accidential exposure to a public!")),(0,o.kt)("p",null,"Before running the app set the secret environment variables in a command line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ export GITHUB_CLIENT_ID="<client_id>"\n$ export GITHUB_CLIENT_SECRET="<client_secret>"\n')),(0,o.kt)("p",null,'Run the program and click "Login with GitHub" button. GitHub authorize app page will be opened in:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Desktop")," app - a new browser window or tab."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Web")," app - a new popup window (make sure popup blocker is off)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Mobile")," app - an in-app web browser.")),(0,o.kt)("img",{src:"/website/img/docs/getting-started/authentication/github-oauth-authorize.png",className:"screenshot-40"}),(0,o.kt)("h3",{id:"redirect-url"},"Redirect URL"),(0,o.kt)("p",null,"We used ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8550/api/oauth/redirect")," as a redirect URL while registering GitHub OAuth app.\nNotice it has a fixed port ",(0,o.kt)("inlineCode",{parentName:"p"},"8550"),". To run your Flet app on a fixed port use ",(0,o.kt)("inlineCode",{parentName:"p"},"port")," argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"flet.app")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"ft.app(target=main, port=8550)\n")),(0,o.kt)("h3",{id:"scope"},"Scope"),(0,o.kt)("p",null,"Most of OAuth providers allows applications to request one or more scopes to limit application's access to a\nuser's account."),(0,o.kt)("p",null,"Built-in Flet providers, by default, request scopes to access user profile, but you can request additional scopes in login method, like ",(0,o.kt)("inlineCode",{parentName:"p"},"public_repo")," in the example above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.login(\n    provider,\n    scope=["public_repo"])\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"page.login()")," method has a number of arguments to control authentication process:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fetch_user")," (bool) - whether to fetch user details into ",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.user"),". Default is ",(0,o.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fetch_groups")," (bool) - whether to fetch user groups into ",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.user.groups"),". Default is ",(0,o.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scope")," - a list of scopes to request."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"saved_token")," - a JSON snapshot of ",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.token")," to restore authorization from. Token can be serialized with ",(0,o.kt)("inlineCode",{parentName:"li"},"page.auth.token.to_json()"),", enscrypted and saved in ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/python/client-storage"},(0,o.kt)("inlineCode",{parentName:"a"},"page.client_storage")),". See below."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on_open_authorization_url")," - a callback to open a browser with authorization URL. See below."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"complete_page_html"),' - a custom HTML contents of "You\'ve been successfully authenticated. Close this page now" page.'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"redirect_to_page")," (bool) - used with Flet web app only when authorization page is opened in the same browser tab.")),(0,o.kt)("p",null,"The result of ",(0,o.kt)("inlineCode",{parentName:"p"},"page.login()")," call is an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," class with the following fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"token"))," - OAuth token used to access provider's API. See below."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"user"))," - user details with a mandatory ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," field and other fields specific to OAuth provider."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"provider"))," - an instance of OAuth provider used for authorization.")),(0,o.kt)("p",null,"A reference to the last authorization is saved in ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth")," property."),(0,o.kt)("p",null,"If you app allows authorizations with multiple OAuth providers you can save authorizations in a session,\nfor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.session["github_auth"] = page.login(github_provider)\npage.session["google_auth"] = page.login(google_provider)\n')),(0,o.kt)("h3",{id:"checking-authentication-results"},"Checking authentication results"),(0,o.kt)("p",null,"Upon successful or failed authorization ",(0,o.kt)("inlineCode",{parentName:"p"},"page.on_login")," event handler is called."),(0,o.kt)("p",null,"Event handler argument ",(0,o.kt)("inlineCode",{parentName:"p"},"e")," is an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginEvent")," class with the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error")," (str) - OAuth error."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"error_description")," (str) - OAuth error description.")),(0,o.kt)("p",null,"Authorization was successful if ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," is an empty string."),(0,o.kt)("p",null,"You can use this event handler to toggle signed in/out UI, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nimport flet\nfrom flet import ElevatedButton, LoginEvent, Page\nfrom flet.auth.providers import GitHubOAuthProvider\n\ndef main(page: Page):\n    provider = GitHubOAuthProvider(\n        client_id=os.getenv("GITHUB_CLIENT_ID"),\n        client_secret=os.getenv("GITHUB_CLIENT_SECRET"),\n        redirect_url="http://localhost:8550/api/oauth/redirect",\n    )\n\n    def login_button_click(e):\n        page.login(provider, scope=["public_repo"])\n\n    def on_login(e: LoginEvent):\n        if not e.error:\n            toggle_login_buttons()\n\n    def logout_button_click(e):\n        page.logout()\n\n    def on_logout(e):\n        toggle_login_buttons()\n\n    def toggle_login_buttons():\n        login_button.visible = page.auth is None\n        logout_button.visible = page.auth is not None\n        page.update()\n\n    login_button = ElevatedButton("Login with GitHub", on_click=login_button_click)\n    logout_button = ElevatedButton("Logout", on_click=logout_button_click)\n    toggle_login_buttons()\n    page.on_login = on_login\n    page.on_logout = on_logout\n    page.add(login_button, logout_button)\n\nflet.app(target=main, port=8550, view=flet.WEB_BROWSER)\n')),(0,o.kt)("h2",{id:"accessing-user-details"},"Accessing user details"),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"page.login()")," method is called with ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch_user=True")," (default) a user profile will\nbe assigned to ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.user"),"."),(0,o.kt)("p",null,"All built-in OAuth providers implement ",(0,o.kt)("inlineCode",{parentName:"p"},"user.id")," property - unique user identifier - which value depends\non the provider (a number, Guid or email) and can be used in your app as a user key."),(0,o.kt)("p",null,"The rest of user profile properties depends on provider and can be accessed with an indexer.\nFor example, to print some properties of GitHub user:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'print("Name:", page.auth.user["name"])\nprint("Login:", page.auth.user["login"])\nprint("Email:", page.auth.user["email"])\n')),(0,o.kt)("h2",{id:"using-oauth-token"},"Using OAuth token"),(0,o.kt)("p",null,"Upon successful authorization ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.token")," will contain OAuth token that can be used to access providers's API. Token object has the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"access_token")," - access token used as an authorization token in API request header."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scope")," - token's scope."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token_type")," - access token type, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"Bearer"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"expires_in")," - optional number of seconds when access token expires."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"expires_at")," - optional time (",(0,o.kt)("inlineCode",{parentName:"li"},"time.time()")," + ",(0,o.kt)("inlineCode",{parentName:"li"},"expires_in"),") when access token expires."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"refresh_token")," - optional refresh token which is used to get a new access token, when the old one expires.")),(0,o.kt)("p",null,"Usually, only ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.token.access_token")," is needed to call provider's API,\nfor example to list user's GitHub repositories:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import requests\nheaders = {"Authorization": "Bearer {}".format(page.auth.token.access_token)}\nrepos_resp = requests.get("https://api.github.com/user/repos", headers=headers)\nuser_repos = json.loads(repos_resp.text)\nfor repo in user_repos:\n    print(repo["full_name"])\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Do not save a reference to ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.token")," somewhere in your code, but rather call ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.token"),"\nevery time you need to grab access token. ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth.token")," is a property which automatically refreshes\nOAuth token if/when it expires."),(0,o.kt)("p",{parentName:"admonition"},"Correct code:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"access_token = page.auth.token.access_token\n")),(0,o.kt)("p",{parentName:"admonition"},"Wrong code:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-python"},"token = page.auth.token\n# some other code\naccess_token = token.access_token # token could expire by this moment\n"))),(0,o.kt)("h2",{id:"saving-and-restoring-an-auth-token"},"Saving and restoring an auth token"),(0,o.kt)("p",null,'To implement persistent login ("Remember me" checkbox on login page) you can save auth token in a ',(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/client-storage"},"client storage")," and use it to login next time a user opens your Flet app."),(0,o.kt)("p",null,"To serialize auth token to JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"jt = page.auth.token.to_json()\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Encrypt sensitive data before sending it to a client storage.")),(0,o.kt)("p",null,"Flet includes utility methods for encrypting text data using symmetric algorithm (where the same key is used for encryption and decryption). They use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fernet/spec/blob/master/Spec.md"},"Fernet")," implementation from ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/cryptography/"},"cryptography")," package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase."),(0,o.kt)("p",null,"To encrypt JSON token:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv("MY_APP_SECRET_KEY")\n# returns base64-encoded string\nejt = encrypt(jt, secret_key)\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Notice, we are fetching a secret key (aka passphrase, password, etc.) from an environment variable.\nDo not embed any secrets into source code to avoid accidential exposure to a public!")),(0,o.kt)("p",null,"Before running the app set the secret in a command line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ export MY_APP_SECRET_KEY="<secret>"\n')),(0,o.kt)("p",null,"Now, encrypted value can be stored in a client storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'page.client_storage.set("myapp.auth_token", ejt)\n')),(0,o.kt)("p",null,"Next time a user opens the app you can read encrypted token from a client storage and, if it exists,\ndecrypt it and use in ",(0,o.kt)("inlineCode",{parentName:"p"},"page.login()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'ejt = page.client_storage.get("myapp.auth_token")\nif ejt:\n    jt = decrypt(ejt, secret_key)\n    page.login(provider, saved_token=jt)\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/flet-dev/examples/blob/main/python/apps/authentication/github-oauth-with-listing-repos.py"},"See complete app example"),"."),(0,o.kt)("h2",{id:"signing-out"},"Signing out"),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"page.logout()")," resets ",(0,o.kt)("inlineCode",{parentName:"p"},"page.auth")," reference and triggers ",(0,o.kt)("inlineCode",{parentName:"p"},"page.on_logout")," event handlers."),(0,o.kt)("p",null,"You can remove saved token in logout method, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def logout_button_click(e):\n    page.client_storage.remove(AUTH_TOKEN_KEY)\n    page.logout()\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/flet-dev/examples/blob/main/python/apps/authentication/github-oauth-with-listing-repos.py"},"See complete app example"),"."),(0,o.kt)("h2",{id:"customizing-authorization-flow"},"Customizing authorization flow"),(0,o.kt)("p",null,"By default, OAuth authorization flow is happening in either new browser window/tab (desktop app), browser popup window (web) or in-app web view (mobile)."),(0,o.kt)("p",null,"Upon completion of authorization flow a user is redirected to Flet's OAuth callback page (",(0,o.kt)("inlineCode",{parentName:"p"},"/api/oauth/redirect"),") which tries to close a browser window/tab with JavaScript and provides user with instructions to close the window manually if JavaScript close didn't work."),(0,o.kt)("p",null,"This section is applicable to Flet desktop and web apps only as in-app web view in mobile apps can be closed by Flet without relying on JavaScript."),(0,o.kt)("p",null,'You can customize the contents of "Authorization complete" page in ',(0,o.kt)("inlineCode",{parentName:"p"},"page.login()")," method, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'complete_page_html = """\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Signed in to MyApp</title>\n  </head>\n<body>\n  <script type="text/javascript">\n      window.close();\n  <\/script>\n  <p>You\'ve been successfully signed in! You can close this tab or window now.</p>\n</body>\n</html>\n\u201d\u201c\u201d\n\npage.login\uff08\n     \u63d0\u4f9b\u8005\uff0c\n     \u5b8c\u6574_page_html =\u5b8c\u6574_page_html\uff0c\n\uff09\n')),(0,o.kt)("p",null,"You can also change web app to open provider's authorization page in the same tab which might be more familiar to your users and save them from dealing with popup blockers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Python"},"page.login\uff08\n     \u63d0\u4f9b\u8005\uff0c\n     on_open_authorization_url = lambda url: page.launch_url\uff08url\uff0cweb_window_name =\u201c _ self\u201d\uff09\uff0c\n     redirect_to_page = true\n\uff09\n")),(0,o.kt)("p",null,"To open flow in a new tab (notice ",(0,o.kt)("inlineCode",{parentName:"p"},"_self")," replaced with ",(0,o.kt)("inlineCode",{parentName:"p"},"_blank"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Python"},"page.login\uff08\n     \u63d0\u4f9b\u8005\uff0c\n     on_open_authorization_url = lambda url: page.launch_url\uff08url\uff0cweb_window_name =\u201c _ blank\u201d\uff09\n\uff09\n")),(0,o.kt)("h2",{id:"configuring-a-custom-oauth-provider"},"Configuring a custom OAuth provider"),(0,o.kt)("p",null,"You can configure any OAuth-compatible authentication provider in your app with ",(0,o.kt)("inlineCode",{parentName:"p"},"flet.auth.oauth_provider.OAuthProvider")," class."),(0,o.kt)("p",null,"Following the instructions in ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow?context=linkedin%2Fcontext&tabs=HTTPS"},"LinkedIn Authorization Code Flow guide")," we are able\nto get all required parameters to configure LinkedIn OAuth provider to allow users of your Flet app to login\nwith their LinkedIn accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Python",metastring:"{9-16}","{9-16}":!0},'import os\n\nimport flet\n\u6765\u81eaFlet Import EvipatedButton\uff0c\u9875\u9762\n\u6765\u81eaflet.auth import oauthprovider\n\nDEF\u4e3b\uff08\u9875\u9762: \u9875\u9762\uff09:\n     \u63d0\u4f9b\u8005= oauthprovider\uff08\n         client_id = os.getEnv\uff08\u201c linkedin_client_id\u201d\uff09\uff0c\n         client_secret = os.getEnv\uff08\u201c linkedin_client_secret\u201d\uff09\uff0c\n         \u6388\u6743_endpoint =\u201c https://www.linkedin.com/oauth/v2/authorization\u201d\uff0c\n         token_endpoint =\u201c https://www.linkedin.com/oauth/v2/accesstoken\u201d\uff0c\n         user_endpoint =\u201c https://api.linkedin.com/v2/me\u201d\uff0c\n         user_scopes = [\u201c r_liteprofile\u201d\uff0c\u201c r_emailaddress\u201d]\uff0c\n         user_id_fn = lambda u: u [\u201c id\u201d]\uff0c\n         redirect_url =\u201c http: // localhost: 8550/api/oauth/redirect\u201d\uff0c\n     \uff09\n\n    def login_click(e):\n        page.login(provider)\n\n    def on_login(e):\n        if e.error:\n            raise Exception(e.error)\n        print("User ID:", page.auth.user.id)\n        print("Access token:", page.auth.token.access_token)\n\n    page.on_login = on_login\n    page.add(ElevatedButton("Login with LinkedIn", on_click=login_click))\n\nflet.app\uff08target = main\uff0cport = 8550\uff0cview = flet.web_browser\uff09\n')),(0,o.kt)("p",null,"\u5f3a\u5236\u63d0\u4f9b\u8005\u8bbe\u7f6e:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"client_id")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"client_secret")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"authorization_endpoint")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token_endpoint")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"redirect_url"))),(0,o.kt)("p",null,"\u4e0e\u5176\u4ed6\u793a\u4f8b\u7c7b\u4f3c\u7684\u5ba2\u6237 ID \u548c\u5ba2\u6237\u7aef\u79d8\u5bc6\u662f\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\u7684\u3002"))}h.isMDXComponent=!0}}]);