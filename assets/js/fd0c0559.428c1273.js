"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[2778],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),p=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(m.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(t),f=i,u=c["".concat(m,".").concat(f)]||c[f]||d[f]||o;return t?a.createElement(u,r(r({ref:n},s),{},{components:t})):a.createElement(u,r({ref:n},s))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=f;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4404:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return m},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],l={title:"Animations",sidebar_label:"Animations"},m=void 0,p={unversionedId:"guides/python/animations",id:"guides/python/animations",title:"Animations",description:"Implicit animations",source:"@site/docs/guides/python/animations.md",sourceDirName:"guides/python",slug:"/guides/python/animations",permalink:"/website/docs/guides/python/animations",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/animations.md",tags:[],version:"current",frontMatter:{title:"Animations",sidebar_label:"Animations"},sidebar:"docs",previous:{title:"File picker and uploads",permalink:"/website/docs/guides/python/file-picker-and-uploads"},next:{title:"Authentication",permalink:"/website/docs/guides/python/authentication"}},s={},c=[{value:"Implicit animations",id:"implicit-animations",level:2},{value:"Opacity animation",id:"opacity-animation",level:3},{value:"Rotation animation",id:"rotation-animation",level:3},{value:"Scale animation",id:"scale-animation",level:3},{value:"Offset animation",id:"offset-animation",level:3},{value:"Position animation",id:"position-animation",level:3},{value:"Animated container",id:"animated-container",level:3},{value:"Animated content switcher",id:"animated-content-switcher",level:3},{value:"Animation end callback",id:"animation-end-callback",level:3}],d={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"implicit-animations"},"Implicit animations"),(0,o.kt)("p",null,"With implicit animations, you can animate a control property by setting a target value; whenever that target value changes, the control animates the property from the old value to the new one. Animation produces interpolated values between the old and the new value over the given ",(0,o.kt)("em",{parentName:"p"},"duration"),". By default, the animation is ",(0,o.kt)("em",{parentName:"p"},"linearly")," increasing the animation value, however, a ",(0,o.kt)("em",{parentName:"p"},"curve")," can be applied to the animation which changes the value according to the provided curve. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"easeOutCubic")," curve increases the animation value quickly at the beginning of the animation and then slows down until the target value is reached:"),(0,o.kt)("video",{controls:!0},(0,o.kt)("source",{src:"https://flutter.github.io/assets-for-api-docs/assets/animation/curve_ease_out_cubic.mp4"})),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," provides a number of ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_{something}")," properties, described below, to enable implicit animation of its appearance:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate_opacity")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate_rotation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate_scale")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate_offset")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate_position")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"animate")," (Container)")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"animate_*")," properties could have one of the following values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Instance of ",(0,o.kt)("inlineCode",{parentName:"li"},"animation.Animation")," class - allows configuring the duration (in milliseconds) and the curve of the animation, for example ",(0,o.kt)("inlineCode",{parentName:"li"},'animate_rotation=ft.animation.Animation(duration=300, curve="bounceOut")'),". See ",(0,o.kt)("a",{parentName:"li",href:"https://api.flutter.dev/flutter/animation/Curves-class.html"},"Curves")," in Flutter docs for possible values. Default is ",(0,o.kt)("inlineCode",{parentName:"li"},"linear"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int")," value - enables animation with specified duration in milliseconds and ",(0,o.kt)("inlineCode",{parentName:"li"},"linear")," curve."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bool")," value - enables anumation with the duration of 1000 milliseconds and ",(0,o.kt)("inlineCode",{parentName:"li"},"linear")," curve.")),(0,o.kt)("h3",{id:"opacity-animation"},"Opacity animation"),(0,o.kt)("p",null,"Setting control's ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_opacity")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls#opacity"},(0,o.kt)("inlineCode",{parentName:"a"},"Control.opacity"))," property."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-opacity.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor="blue",\n        border_radius=10,\n        animate_opacity=300,\n    )\n\n    def animate_opacity(e):\n        c.opacity = 0 if c.opacity == 1 else 1\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton(\n            "Animate opacity",\n            on_click=animate_opacity,\n        ),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"rotation-animation"},"Rotation animation"),(0,o.kt)("p",null,"Setting control's ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_rotation")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls#rotate"},(0,o.kt)("inlineCode",{parentName:"a"},"Control.rotate"))," property."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-rotation.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from math import pi\nimport flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=100,\n        height=70,\n        bgcolor="blue",\n        border_radius=5,\n        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),\n        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.rotate.angle += pi / 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton("Animate!", on_click=animate),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"scale-animation"},"Scale animation"),(0,o.kt)("p",null,"Setting control's ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_scale")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls#scale"},(0,o.kt)("inlineCode",{parentName:"a"},"Control.scale"))," property."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-scale.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=100,\n        height=100,\n        bgcolor="blue",\n        border_radius=5,\n        scale=ft.transform.Scale(scale=1),\n        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate(e):\n        c.scale = 2\n        page.update()\n\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.spacing = 30\n    page.add(\n        c,\n        ft.ElevatedButton("Animate!", on_click=animate),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"offset-animation"},"Offset animation"),(0,o.kt)("p",null,"Setting control's ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_offset")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Control.offset")," property."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"offset")," property is an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"transform.Offset")," class which specifies horizontal ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and vertical ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," offset of a control scaled to control's size. For example, an offset ",(0,o.kt)("inlineCode",{parentName:"p"},"transform.Offset(-0.25, 0)")," will result in a horizontal translation of one quarter the width of the control."),(0,o.kt)("p",null,"Offset animation is used for various sliding effects:"),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-offset.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor="blue",\n        border_radius=10,\n        offset=ft.transform.Offset(-2, 0),\n        animate_offset=ft.animation.Animation(1000),\n    )\n\n    def animate(e):\n        c.offset = ft.transform.Offset(0, 0)\n        c.update()\n\n    page.add(\n        c,\n        ft.ElevatedButton("Reveal!", on_click=animate),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"position-animation"},"Position animation"),(0,o.kt)("p",null,"Setting control's ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_position")," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls#left"},"Control's ",(0,o.kt)("inlineCode",{parentName:"a"},"left"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"top"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"right")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"bottom")," properties"),"."),(0,o.kt)("p",null,"Please note Control position works inside ",(0,o.kt)("inlineCode",{parentName:"p"},"Stack")," control only."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-position.gif",className:"screenshot-30"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c1 = ft.Container(width=50, height=50, bgcolor="red", animate_position=1000)\n\n    c2 = ft.Container(\n        width=50, height=50, bgcolor="green", top=60, left=0, animate_position=500\n    )\n\n    c3 = ft.Container(\n        width=50, height=50, bgcolor="blue", top=120, left=0, animate_position=1000\n    )\n\n    def animate_container(e):\n        c1.top = 20\n        c1.left = 200\n        c2.top = 100\n        c2.left = 40\n        c3.top = 180\n        c3.left = 100\n        page.update()\n\n    page.add(\n        ft.Stack([c1, c2, c3], height=250),\n        ft.ElevatedButton("Animate!", on_click=animate_container),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"animated-container"},"Animated container"),(0,o.kt)("p",null,"Setting ",(0,o.kt)("a",{parentName:"p",href:"/docs/controls/container#animate"},(0,o.kt)("inlineCode",{parentName:"a"},"Container.animate"))," to either ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", number or an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"animation.Animation")," class (see above) enables implicit animation of container properties such as size, background color, border style, gradient."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animate-container.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n\n    c = ft.Container(\n        width=150,\n        height=150,\n        bgcolor="red",\n        animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),\n    )\n\n    def animate_container(e):\n        c.width = 100 if c.width == 150 else 150\n        c.height = 50 if c.height == 150 else 150\n        c.bgcolor = "blue" if c.bgcolor == "red" else "red"\n        c.update()\n\n    page.add(c, ft.ElevatedButton("Animate container", on_click=animate_container))\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"animated-content-switcher"},"Animated content switcher"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/controls/animatedswitcher"},(0,o.kt)("inlineCode",{parentName:"a"},"AnimatedSwitcher"))," allows animated transition between a new control and the control previously set on the AnimatedSwitcher as a ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,o.kt)("img",{src:"/img/docs/getting-started/animations/animated-switcher-images.gif",className:"screenshot-20"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import time\n\nimport flet as ft\n\ndef main(page: ft.Page):\n\n    i = ft.Image(src="https://picsum.photos/150/150", width=150, height=150)\n\n    def animate(e):\n        sw.content = ft.Image(\n            src=f"https://picsum.photos/150/150?{time.time()}", width=150, height=150\n        )\n        page.update()\n\n    sw = ft.AnimatedSwitcher(\n        i,\n        transition=ft.AnimatedSwitcherTransition.SCALE,\n        duration=500,\n        reverse_duration=500,\n        switch_in_curve=ft.AnimationCurve.BOUNCE_OUT,\n        switch_out_curve=ft.AnimationCurve.BOUNCE_IN,\n    )\n\n    page.add(\n        sw,\n        ft.ElevatedButton("Animate!", on_click=animate),\n    )\n\nft.app(target=main)\n')),(0,o.kt)("h3",{id:"animation-end-callback"},"Animation end callback"),(0,o.kt)("p",null,"All controls with ",(0,o.kt)("inlineCode",{parentName:"p"},"animate_*")," properties have ",(0,o.kt)("inlineCode",{parentName:"p"},"on_animation_end")," event handler which is called\nwhen animation complete and cab be used to chain multiple animations."),(0,o.kt)("p",null,"Event's object ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," field contains the name of animation:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"opacity")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rotation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scale")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"offset")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"position")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container"))),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},' c = ft.Container(\n        ft.Text("Animate me!"),\n        # ...\n        animate=ft.animation.Animation(1000, "bounceOut"),\n        on_animation_end=lambda e: print("Container animation end:", e.data)\n    )\n')))}f.isMDXComponent=!0}}]);