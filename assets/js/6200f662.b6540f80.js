"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[7073],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(a),u=n,f=c["".concat(d,".").concat(u)]||c[u]||h[u]||o;return a?r.createElement(f,i(i({ref:t},p),{},{components:a})):r.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6981:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),i=["components"],l={title:"BarChart",sidebar_label:"BarChart",slug:"barchart"},d=void 0,s={unversionedId:"controls/barchart",id:"controls/barchart",title:"BarChart",description:"Draws a bar chart.",source:"@site/docs/controls/barchart.md",sourceDirName:"controls",slug:"/controls/barchart",permalink:"/docs/controls/barchart",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/barchart.md",tags:[],version:"current",frontMatter:{title:"BarChart",sidebar_label:"BarChart",slug:"barchart"},sidebar:"docs",previous:{title:"LineChart",permalink:"/docs/controls/linechart"},next:{title:"PieChart",permalink:"/docs/controls/piechart"}},p={},c=[{value:"Examples",id:"examples",level:2},{value:"BarChart 1",id:"barchart-1",level:3},{value:"BarChart 2",id:"barchart-2",level:3},{value:"<code>BarChart</code> properties",id:"barchart-properties",level:2},{value:"<code>bar_groups</code>",id:"bar_groups",level:3},{value:"<code>groups_space</code>",id:"groups_space",level:3},{value:"<code>animate</code>",id:"animate",level:3},{value:"<code>interactive</code>",id:"interactive",level:3},{value:"<code>bgcolor</code>",id:"bgcolor",level:3},{value:"<code>tooltip_bgcolor</code>",id:"tooltip_bgcolor",level:3},{value:"<code>border</code>",id:"border",level:3},{value:"<code>horizontal_grid_lines</code>",id:"horizontal_grid_lines",level:3},{value:"<code>vertical_grid_lines</code>",id:"vertical_grid_lines",level:3},{value:"<code>left_axis</code>",id:"left_axis",level:3},{value:"<code>top_axis</code>",id:"top_axis",level:3},{value:"<code>right_axis</code>",id:"right_axis",level:3},{value:"<code>bottom_axis</code>",id:"bottom_axis",level:3},{value:"<code>baseline_y</code>",id:"baseline_y",level:3},{value:"<code>min_y</code>",id:"min_y",level:3},{value:"<code>max_y</code>",id:"max_y",level:3},{value:"<code>BarChart</code> events",id:"barchart-events",level:2},{value:"<code>on_chart_event</code>",id:"on_chart_event",level:3},{value:"<code>BarChartGroup</code> properties",id:"barchartgroup-properties",level:2},{value:"<code>x</code>",id:"x",level:3},{value:"<code>bar_rods</code>",id:"bar_rods",level:3},{value:"<code>group_vertically</code>",id:"group_vertically",level:3},{value:"<code>bars_space</code>",id:"bars_space",level:3},{value:"<code>BarChartRod</code> properties",id:"barchartrod-properties",level:2},{value:"<code>rod_stack_items</code>",id:"rod_stack_items",level:3},{value:"<code>from_y</code>",id:"from_y",level:3},{value:"<code>to_y</code>",id:"to_y",level:3},{value:"<code>width</code>",id:"width",level:3},{value:"<code>color</code>",id:"color",level:3},{value:"<code>gradient</code>",id:"gradient",level:3},{value:"<code>border_radius</code>",id:"border_radius",level:3},{value:"<code>border_side</code>",id:"border_side",level:3},{value:"<code>bg_from_y</code>",id:"bg_from_y",level:3},{value:"<code>bg_to_y</code>",id:"bg_to_y",level:3},{value:"<code>bg_color</code>",id:"bg_color",level:3},{value:"<code>bg_gradient</code>",id:"bg_gradient",level:3},{value:"<code>selected</code>",id:"selected",level:3},{value:"<code>show_tooltip</code>",id:"show_tooltip",level:3},{value:"<code>tooltip</code>",id:"tooltip",level:3},{value:"<code>tooltip_style</code>",id:"tooltip_style",level:3},{value:"<code>tooltip_align</code>",id:"tooltip_align",level:3},{value:"<code>BarChartRodStackItem</code> properties",id:"barchartrodstackitem-properties",level:2},{value:"<code>from_y</code>",id:"from_y-1",level:3},{value:"<code>to_y</code>",id:"to_y-1",level:3},{value:"<code>color</code>",id:"color-1",level:3},{value:"<code>border_side</code>",id:"border_side-1",level:3},{value:"<code>ChartGridLines</code> properties",id:"chartgridlines-properties",level:2},{value:"<code>interval</code>",id:"interval",level:3},{value:"<code>color</code>",id:"color-2",level:3},{value:"<code>width</code>",id:"width-1",level:3},{value:"<code>dash_pattern</code>",id:"dash_pattern",level:3},{value:"<code>ChartAxis</code> properties",id:"chartaxis-properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>title_size</code>",id:"title_size",level:3},{value:"<code>show_labels</code>",id:"show_labels",level:3},{value:"<code>labels</code>",id:"labels",level:3},{value:"<code>labels_interval</code>",id:"labels_interval",level:3},{value:"<code>labels_size</code>",id:"labels_size",level:3},{value:"<code>ChartAxisLabel</code> properties",id:"chartaxislabel-properties",level:2},{value:"<code>value</code>",id:"value",level:3},{value:"<code>label</code>",id:"label",level:3}],h={toc:c};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Draws a bar chart."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/charts/barchart"},"Live example")),(0,o.kt)("h3",{id:"barchart-1"},"BarChart 1"),(0,o.kt)("img",{src:"/img/docs/controls/charts/barchart-sample-1.png",className:"screenshot-50"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\ndef main(page: ft.Page):\n    chart = ft.BarChart(\n        bar_groups=[\n            ft.BarChartGroup(\n                x=0,\n                bar_rods=[\n                    ft.BarChartRod(\n                        from_y=0,\n                        to_y=40,\n                        width=40,\n                        color=ft.colors.AMBER,\n                        tooltip="Apple",\n                        border_radius=0,\n                    ),\n                ],\n            ),\n            ft.BarChartGroup(\n                x=1,\n                bar_rods=[\n                    ft.BarChartRod(\n                        from_y=0,\n                        to_y=100,\n                        width=40,\n                        color=ft.colors.BLUE,\n                        tooltip="Blueberry",\n                        border_radius=0,\n                    ),\n                ],\n            ),\n            ft.BarChartGroup(\n                x=2,\n                bar_rods=[\n                    ft.BarChartRod(\n                        from_y=0,\n                        to_y=30,\n                        width=40,\n                        color=ft.colors.RED,\n                        tooltip="Cherry",\n                        border_radius=0,\n                    ),\n                ],\n            ),\n            ft.BarChartGroup(\n                x=3,\n                bar_rods=[\n                    ft.BarChartRod(\n                        from_y=0,\n                        to_y=60,\n                        width=40,\n                        color=ft.colors.ORANGE,\n                        tooltip="Orange",\n                        border_radius=0,\n                    ),\n                ],\n            ),\n        ],\n        border=ft.border.all(1, ft.colors.GREY_400),\n        left_axis=ft.ChartAxis(\n            labels_size=40, title=ft.Text("Fruit supply"), title_size=40\n        ),\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=0, label=ft.Container(ft.Text("Apple"), padding=10)\n                ),\n                ft.ChartAxisLabel(\n                    value=1, label=ft.Container(ft.Text("Blueberry"), padding=10)\n                ),\n                ft.ChartAxisLabel(\n                    value=2, label=ft.Container(ft.Text("Cherry"), padding=10)\n                ),\n                ft.ChartAxisLabel(\n                    value=3, label=ft.Container(ft.Text("Orange"), padding=10)\n                ),\n            ],\n            labels_size=40,\n        ),\n        horizontal_grid_lines=ft.ChartGridLines(\n            color=ft.colors.GREY_300, width=1, dash_pattern=[3, 3]\n        ),\n        tooltip_bgcolor=ft.colors.with_opacity(0.5, ft.colors.GREY_300),\n        max_y=110,\n        interactive=True,\n        expand=True,\n    )\n\n    page.add(chart)\n\nft.app(main)\n')),(0,o.kt)("h3",{id:"barchart-2"},"BarChart 2"),(0,o.kt)("img",{src:"/img/docs/controls/charts/barchart-sample-2.gif",className:"screenshot-50"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass SampleRod(ft.BarChartRod):\n    def __init__(self, y: float, hovered: bool = False):\n        super().__init__()\n        self.hovered = hovered\n        self.y = y\n\n    def _before_build_command(self):\n        self.to_y = self.y + 1 if self.hovered else self.y\n        self.color = ft.colors.YELLOW if self.hovered else ft.colors.WHITE\n        self.border_side = (\n            ft.BorderSide(width=1, color=ft.colors.GREEN_400)\n            if self.hovered\n            else ft.BorderSide(width=0, color=ft.colors.WHITE)\n        )\n        super()._before_build_command()\n\n    def _build(self):\n        self.tooltip = str(self.y)\n        self.width = 22\n        self.color = ft.colors.WHITE\n        self.bg_to_y = 20\n        self.bg_color = ft.colors.GREEN_300\n\n\ndef main(page: ft.Page):\n    def on_chart_event(e: ft.BarChartEvent):\n        for group_index, group in enumerate(chart.bar_groups):\n            for rod_index, rod in enumerate(group.bar_rods):\n                rod.hovered = e.group_index == group_index and e.rod_index == rod_index\n        chart.update()\n\n    chart = ft.BarChart(\n        bar_groups=[\n            ft.BarChartGroup(\n                x=0,\n                bar_rods=[SampleRod(5)],\n            ),\n            ft.BarChartGroup(\n                x=1,\n                bar_rods=[SampleRod(6.5)],\n            ),\n            ft.BarChartGroup(\n                x=2,\n                bar_rods=[SampleRod(5)],\n            ),\n            ft.BarChartGroup(\n                x=3,\n                bar_rods=[SampleRod(7.5)],\n            ),\n            ft.BarChartGroup(\n                x=4,\n                bar_rods=[SampleRod(9)],\n            ),\n            ft.BarChartGroup(\n                x=5,\n                bar_rods=[SampleRod(11.5)],\n            ),\n            ft.BarChartGroup(\n                x=6,\n                bar_rods=[SampleRod(6)],\n            ),\n        ],\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(value=0, label=ft.Text("M")),\n                ft.ChartAxisLabel(value=1, label=ft.Text("T")),\n                ft.ChartAxisLabel(value=2, label=ft.Text("W")),\n                ft.ChartAxisLabel(value=3, label=ft.Text("T")),\n                ft.ChartAxisLabel(value=4, label=ft.Text("F")),\n                ft.ChartAxisLabel(value=5, label=ft.Text("S")),\n                ft.ChartAxisLabel(value=6, label=ft.Text("S")),\n            ],\n        ),\n        on_chart_event=on_chart_event,\n        interactive=True,\n    )\n\n    page.add(\n        ft.Container(\n            chart, bgcolor=ft.colors.GREEN_200, padding=10, border_radius=5, expand=True\n        )\n    )\n\nft.app(main)\n')),(0,o.kt)("h2",{id:"barchart-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"BarChart")," properties"),(0,o.kt)("img",{src:"/img/docs/controls/charts/barchart-diagram.svg",className:"screenshot-100"}),(0,o.kt)("h3",{id:"bar_groups"},(0,o.kt)("inlineCode",{parentName:"h3"},"bar_groups")),(0,o.kt)("p",null,"The list of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.BarChartGroup")," to draw."),(0,o.kt)("h3",{id:"groups_space"},(0,o.kt)("inlineCode",{parentName:"h3"},"groups_space")),(0,o.kt)("p",null,"A gap between bar groups."),(0,o.kt)("h3",{id:"animate"},(0,o.kt)("inlineCode",{parentName:"h3"},"animate")),(0,o.kt)("p",null,"Controls chart implicit animation. See ",(0,o.kt)("a",{parentName:"p",href:"linechart#animate"},(0,o.kt)("inlineCode",{parentName:"a"},"LineChart.animate"))," property for more information and possible values."),(0,o.kt)("h3",{id:"interactive"},(0,o.kt)("inlineCode",{parentName:"h3"},"interactive")),(0,o.kt)("p",null,"Enables automatic tooltips when hovering chart bars."),(0,o.kt)("h3",{id:"bgcolor"},(0,o.kt)("inlineCode",{parentName:"h3"},"bgcolor")),(0,o.kt)("p",null,"Background ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of the chart."),(0,o.kt)("h3",{id:"tooltip_bgcolor"},(0,o.kt)("inlineCode",{parentName:"h3"},"tooltip_bgcolor")),(0,o.kt)("p",null,"Background ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of tooltips."),(0,o.kt)("h3",{id:"border"},(0,o.kt)("inlineCode",{parentName:"h3"},"border")),(0,o.kt)("p",null,"The border around the chart. The value is the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.Border")," class."),(0,o.kt)("h3",{id:"horizontal_grid_lines"},(0,o.kt)("inlineCode",{parentName:"h3"},"horizontal_grid_lines")),(0,o.kt)("p",null,"Controls drawing of chart's horizontal lines. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartgridlines"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartGridLines"))," class."),(0,o.kt)("h3",{id:"vertical_grid_lines"},(0,o.kt)("inlineCode",{parentName:"h3"},"vertical_grid_lines")),(0,o.kt)("p",null,"Controls drawing of chart's vertical lines. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartgridlines"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartGridLines"))," class."),(0,o.kt)("h3",{id:"left_axis"},(0,o.kt)("inlineCode",{parentName:"h3"},"left_axis")),(0,o.kt)("p",null,"Configures the appearance of the left axis, its title and labels. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,o.kt)("h3",{id:"top_axis"},(0,o.kt)("inlineCode",{parentName:"h3"},"top_axis")),(0,o.kt)("p",null,"Configures the appearance of the top axis, its title and labels. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,o.kt)("h3",{id:"right_axis"},(0,o.kt)("inlineCode",{parentName:"h3"},"right_axis")),(0,o.kt)("p",null,"Configures the appearance of the right axis, its title and labels. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,o.kt)("h3",{id:"bottom_axis"},(0,o.kt)("inlineCode",{parentName:"h3"},"bottom_axis")),(0,o.kt)("p",null,"Configures the appearance of the bottom axis, its title and labels. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"#chartaxis-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ChartAxis"))," class.  "),(0,o.kt)("h3",{id:"baseline_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"baseline_y")),(0,o.kt)("p",null,"Baseline value for Y axis. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("h3",{id:"min_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"min_y")),(0,o.kt)("p",null,"Configures the minimum displayed value for Y axis."),(0,o.kt)("h3",{id:"max_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"max_y")),(0,o.kt)("p",null,"Configures the maximum displayed value for Y axis."),(0,o.kt)("h2",{id:"barchart-events"},(0,o.kt)("inlineCode",{parentName:"h2"},"BarChart")," events"),(0,o.kt)("h3",{id:"on_chart_event"},(0,o.kt)("inlineCode",{parentName:"h3"},"on_chart_event")),(0,o.kt)("p",null,"Fires when a bar is hovered or clicked."),(0,o.kt)("p",null,"Event data is an instance ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.BarChartEvent")," class with the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"type")," event type such as ",(0,o.kt)("inlineCode",{parentName:"li"},"PointerHoverEvent"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"PointerExitEvent"),", etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bar_index")," - bar's index or ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," if chart is hovered or clicked outside of any bar."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rod_index")," - rod's index or ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," if chart is hovered or clicked outside of any bar."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"stack_item_index")," - stack item's index or ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," if chart is hovered or clicked outside of any bar.")),(0,o.kt)("h2",{id:"barchartgroup-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"BarChartGroup")," properties"),(0,o.kt)("h3",{id:"x"},(0,o.kt)("inlineCode",{parentName:"h3"},"x")),(0,o.kt)("p",null,"Group position on X axis."),(0,o.kt)("h3",{id:"bar_rods"},(0,o.kt)("inlineCode",{parentName:"h3"},"bar_rods")),(0,o.kt)("p",null,"The list of ",(0,o.kt)("a",{parentName:"p",href:"#barchartrod-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"BarChartRod"))," objects to display in the group."),(0,o.kt)("h3",{id:"group_vertically"},(0,o.kt)("inlineCode",{parentName:"h3"},"group_vertically")),(0,o.kt)("p",null,"If set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," bar rods are drawn on top of each other; otherwise bar rods are drawn next to each other. Default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,o.kt)("h3",{id:"bars_space"},(0,o.kt)("inlineCode",{parentName:"h3"},"bars_space")),(0,o.kt)("p",null,"The gap between bar rods."),(0,o.kt)("h2",{id:"barchartrod-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"BarChartRod")," properties"),(0,o.kt)("h3",{id:"rod_stack_items"},(0,o.kt)("inlineCode",{parentName:"h3"},"rod_stack_items")),(0,o.kt)("p",null,"Optional list of ",(0,o.kt)("a",{parentName:"p",href:"#barchartrodstackitem-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"BarChartRodStackItem"))," objects to draw a stacked bar."),(0,o.kt)("h3",{id:"from_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"from_y")),(0,o.kt)("p",null,"Specifies a starting position of a rod on Y axis. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("h3",{id:"to_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"to_y")),(0,o.kt)("p",null,"Specifies an ending position of a rod on Y axis."),(0,o.kt)("h3",{id:"width"},(0,o.kt)("inlineCode",{parentName:"h3"},"width")),(0,o.kt)("p",null,"The width of a rod. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"8"),"."),(0,o.kt)("h3",{id:"color"},(0,o.kt)("inlineCode",{parentName:"h3"},"color")),(0,o.kt)("p",null,"Rod ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color"),". Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"cyan"),"."),(0,o.kt)("h3",{id:"gradient"},(0,o.kt)("inlineCode",{parentName:"h3"},"gradient")),(0,o.kt)("p",null,"Gradient to draw rod's background. See ",(0,o.kt)("a",{parentName:"p",href:"container#gradient"},(0,o.kt)("inlineCode",{parentName:"a"},"Container.gradient"))," property for more information and possible values."),(0,o.kt)("h3",{id:"border_radius"},(0,o.kt)("inlineCode",{parentName:"h3"},"border_radius")),(0,o.kt)("p",null,"Border radius of a bar rod. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"4"),"."),(0,o.kt)("h3",{id:"border_side"},(0,o.kt)("inlineCode",{parentName:"h3"},"border_side")),(0,o.kt)("p",null,"Border to draw around rod. The value is the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.BorderSide")," class."),(0,o.kt)("h3",{id:"bg_from_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"bg_from_y")),(0,o.kt)("p",null,"An optional starting position of a background behind a rod."),(0,o.kt)("h3",{id:"bg_to_y"},(0,o.kt)("inlineCode",{parentName:"h3"},"bg_to_y")),(0,o.kt)("p",null,"An optional ending position of a background behind a rod."),(0,o.kt)("h3",{id:"bg_color"},(0,o.kt)("inlineCode",{parentName:"h3"},"bg_color")),(0,o.kt)("p",null,"An optional ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of a background behind a rod."),(0,o.kt)("h3",{id:"bg_gradient"},(0,o.kt)("inlineCode",{parentName:"h3"},"bg_gradient")),(0,o.kt)("p",null,"An optional gradient to draw a background with."),(0,o.kt)("h3",{id:"selected"},(0,o.kt)("inlineCode",{parentName:"h3"},"selected")),(0,o.kt)("p",null,"If set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," a tooltip is always shown on top of the bar when ",(0,o.kt)("inlineCode",{parentName:"p"},"BarChart.interactive")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,o.kt)("h3",{id:"show_tooltip"},(0,o.kt)("inlineCode",{parentName:"h3"},"show_tooltip")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"True")," (default) if a tooltip should be shown on top of hovered bar."),(0,o.kt)("h3",{id:"tooltip"},(0,o.kt)("inlineCode",{parentName:"h3"},"tooltip")),(0,o.kt)("p",null,"A custom tooltip value. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"to_y"),"."),(0,o.kt)("h3",{id:"tooltip_style"},(0,o.kt)("inlineCode",{parentName:"h3"},"tooltip_style")),(0,o.kt)("p",null,"A text style to display tooltip with. The value is the instance of ",(0,o.kt)("a",{parentName:"p",href:"text#textstyle-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ft.TextStyle"))," class."),(0,o.kt)("h3",{id:"tooltip_align"},(0,o.kt)("inlineCode",{parentName:"h3"},"tooltip_align")),(0,o.kt)("p",null,"An align for the tooltip. The value is the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.TextAlign")," enum."),(0,o.kt)("h2",{id:"barchartrodstackitem-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"BarChartRodStackItem")," properties"),(0,o.kt)("h3",{id:"from_y-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"from_y")),(0,o.kt)("p",null,"The starting position for a stack item inside a bar rod."),(0,o.kt)("h3",{id:"to_y-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"to_y")),(0,o.kt)("p",null,"The ending position for a stack item inside a bar rod."),(0,o.kt)("h3",{id:"color-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"color")),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"color")," of stack item."),(0,o.kt)("h3",{id:"border_side-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"border_side")),(0,o.kt)("p",null,"A border around stack item. The value is the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft.BorderSide")," class."),(0,o.kt)("h2",{id:"chartgridlines-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"ChartGridLines")," properties"),(0,o.kt)("p",null,"Configures the appearance of horizontal and vertical grid lines within the chart."),(0,o.kt)("h3",{id:"interval"},(0,o.kt)("inlineCode",{parentName:"h3"},"interval")),(0,o.kt)("p",null,"Interval between grid lines. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,o.kt)("h3",{id:"color-2"},(0,o.kt)("inlineCode",{parentName:"h3"},"color")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guides/python/colors"},"Color")," of a grid line."),(0,o.kt)("h3",{id:"width-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"width")),(0,o.kt)("p",null,"Width of a grid line. Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,o.kt)("h3",{id:"dash_pattern"},(0,o.kt)("inlineCode",{parentName:"h3"},"dash_pattern")),(0,o.kt)("p",null,"Defines dash effect of the line. The value is a circular list of dash offsets and lengths. For example, the list ",(0,o.kt)("inlineCode",{parentName:"p"},"[5, 10]")," would result in dashes 5 pixels long followed by blank spaces 10 pixels long. By default, a solid line is drawn."),(0,o.kt)("h2",{id:"chartaxis-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"ChartAxis")," properties"),(0,o.kt)("p",null,"Configures chart axis."),(0,o.kt)("h3",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h3"},"title")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," to display as axis title."),(0,o.kt)("h3",{id:"title_size"},(0,o.kt)("inlineCode",{parentName:"h3"},"title_size")),(0,o.kt)("p",null,"Width or height of title area."),(0,o.kt)("h3",{id:"show_labels"},(0,o.kt)("inlineCode",{parentName:"h3"},"show_labels")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"True")," to display labels along the axis. If ",(0,o.kt)("inlineCode",{parentName:"p"},"labels")," is empty then automatic labels are displayed. "),(0,o.kt)("h3",{id:"labels"},(0,o.kt)("inlineCode",{parentName:"h3"},"labels")),(0,o.kt)("p",null,"The list of ",(0,o.kt)("a",{parentName:"p",href:"#chartaxislabel-properties"},(0,o.kt)("inlineCode",{parentName:"a"},"ft.ChartAxisLabel"))," objects to set custom axis labels for only specific values."),(0,o.kt)("h3",{id:"labels_interval"},(0,o.kt)("inlineCode",{parentName:"h3"},"labels_interval")),(0,o.kt)("p",null,"The interval between automatic labels."),(0,o.kt)("h3",{id:"labels_size"},(0,o.kt)("inlineCode",{parentName:"h3"},"labels_size")),(0,o.kt)("p",null,"Width or height of labels area."),(0,o.kt)("h2",{id:"chartaxislabel-properties"},(0,o.kt)("inlineCode",{parentName:"h2"},"ChartAxisLabel")," properties"),(0,o.kt)("p",null,"Configures a custom label for specific value."),(0,o.kt)("h3",{id:"value"},(0,o.kt)("inlineCode",{parentName:"h3"},"value")),(0,o.kt)("p",null,"A value to draw label for."),(0,o.kt)("h3",{id:"label"},(0,o.kt)("inlineCode",{parentName:"h3"},"label")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," to draw as a label."))}u.isMDXComponent=!0}}]);