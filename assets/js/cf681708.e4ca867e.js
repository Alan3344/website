"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[2167],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),f=o,m=u["".concat(i,".").concat(f)]||u[f]||p[f]||l;return t?r.createElement(m,a(a({ref:n},c),{},{components:t})):r.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<l;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9799:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var r=t(7462),o=t(3366),l=(t(7294),t(3905)),a=["components"],s={title:"User controls",sidebar_label:"User controls"},i=void 0,d={unversionedId:"guides/python/user-controls",id:"guides/python/user-controls",title:"User controls",description:"User control (UserControl) allows building isolated re-usable components by combining existing Flet controls. User control behaves like a Control, could have methods and properties.",source:"@site/docs/guides/python/user-controls.md",sourceDirName:"guides/python",slug:"/guides/python/user-controls",permalink:"/docs/guides/python/user-controls",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/user-controls.md",tags:[],version:"current",frontMatter:{title:"User controls",sidebar_label:"User controls"},sidebar:"docs",previous:{title:"PubSub",permalink:"/docs/guides/python/pub-sub"},next:{title:"Control Refs",permalink:"/docs/guides/python/control-refs"}},c={},u=[],p={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"User control (",(0,l.kt)("inlineCode",{parentName:"p"},"UserControl"),") allows building isolated re-usable components by combining existing Flet controls. User control behaves like a ",(0,l.kt)("inlineCode",{parentName:"p"},"Control"),", could have methods and properties."),(0,l.kt)("p",null,"Below is a minimal example of user control:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass GreeterControl(ft.UserControl):\n    def build(self):\n        return ft.Text("Hello!")\n\ndef main(page):\n    page.add(GreeterControl())\n\nft.app(target=main)\n')),(0,l.kt)("p",null,"UserControl must implement ",(0,l.kt)("inlineCode",{parentName:"p"},"build()")," method that is called to build control's UI and should returns a single ",(0,l.kt)("inlineCode",{parentName:"p"},"Control")," instance or a ",(0,l.kt)("inlineCode",{parentName:"p"},"List")," of controls. ",(0,l.kt)("inlineCode",{parentName:"p"},"UserControl")," is inherited from ",(0,l.kt)("a",{parentName:"p",href:"/docs/controls/stack"},(0,l.kt)("inlineCode",{parentName:"a"},"Stack")),", so multiple children will be arranged on top of each other. If you need to arrange control's UI differently use ",(0,l.kt)("a",{parentName:"p",href:"/docs/controls/row"},(0,l.kt)("inlineCode",{parentName:"a"},"Row")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/controls/column"},(0,l.kt)("inlineCode",{parentName:"a"},"Column"))," or other ",(0,l.kt)("a",{parentName:"p",href:"/docs/controls/layout"},"layout controls"),", for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class GreeterControl(ft.UserControl):\n    def build(self):\n        return ft.Column([\n            ft.TextField(label="Your name"),\n            ft.ElevatedButton("Login")\n        ])\n')),(0,l.kt)("p",null,"UserControl is isolated from outside layout, i.e. when ",(0,l.kt)("inlineCode",{parentName:"p"},"update()")," method is called for the parent control any changes inside the UserControl are not included into the update digest. UserControl should call ",(0,l.kt)("inlineCode",{parentName:"p"},"self.update()")," to push its changes to a Flet page, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass Counter(ft.UserControl):\n    def add_click(self, e):\n        self.counter += 1\n        self.text.value = str(self.counter)\n        self.update()\n\n    def build(self):\n        self.counter = 0\n        self.text = ft.Text(str(self.counter))\n        return ft.Row([self.text, ft.ElevatedButton("Add", on_click=self.add_click)])\n\ndef main(page):\n    page.add(Counter(), Counter())\n\nft.app(target=main)\n')),(0,l.kt)("img",{src:"/img/docs/getting-started/user-control-counter.gif",className:"screenshot-40"}),(0,l.kt)("p",null,"You could either declare event handlers (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"def add_click(self, e)"),") and control references (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"self.text"),") as class members or implement all UserControl's logic inside ",(0,l.kt)("inlineCode",{parentName:"p"},"build()")," method using local variables and inner functions. For example, the code above could be rewritten as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Counter(ft.UserControl):\n    def build(self):\n\n        self.counter = 0\n        text = ft.Text(str(self.counter))\n\n        def add_click(e):\n            self.counter += 1\n            text.value = str(self.counter)\n            self.update()\n\n        return ft.Row([text, ft.ElevatedButton("Add", on_click=add_click)])\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"counter")," cannot be declared as a local variable as it won't be visible inside ",(0,l.kt)("inlineCode",{parentName:"p"},"add_click")," method, so it must be declared as a class field ",(0,l.kt)("inlineCode",{parentName:"p"},"self.counter"),".")),(0,l.kt)("p",null,"User control can have a constructor to pass custom data, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\n\nclass Counter(ft.UserControl):\n    def __init__(self, initial_count):\n        super().__init__()\n        self.counter = initial_count\n\n    def build(self):\n        text = ft.Text(str(self.counter))\n        def add_click(e):\n            self.counter += 1\n            text.value = str(self.counter)\n            self.update()\n\n        return ft.Row([text, ft.ElevatedButton("Add", on_click=add_click)])\n\n# then use the control\ndef main(page):\n    page.add(\n        Counter(100),\n        Counter(200))\n\nft.app(target=main)\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"super().__init__()")," must be always called in your own constructor.")),(0,l.kt)("p",null,'User control provides life-cycle "hook" methods:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"did_mount()")," - called after the ",(0,l.kt)("inlineCode",{parentName:"li"},"UserControl")," added to a page and assigned transient ",(0,l.kt)("inlineCode",{parentName:"li"},"id"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"will_unmount()")," - called before the ",(0,l.kt)("inlineCode",{parentName:"li"},"UserControl")," is removed from a page.")),(0,l.kt)("p",null,'Using those methods we could implement a simple "countdown" control:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import flet as ft\nimport time, threading\n\nclass Countdown(ft.UserControl):\n    def __init__(self, seconds):\n        super().__init__()\n        self.seconds = seconds\n\n    def did_mount(self):\n        self.running = True\n        self.th = threading.Thread(target=self.update_timer, args=(), daemon=True)\n        self.th.start()\n\n    def will_unmount(self):\n        self.running = False\n\n    def update_timer(self):\n        while self.seconds and self.running:\n            mins, secs = divmod(self.seconds, 60)\n            self.countdown.value = "{:02d}:{:02d}".format(mins, secs)\n            self.update()\n            time.sleep(1)\n            self.seconds -= 1\n\n    def build(self):\n        self.countdown = ft.Text()\n        return self.countdown\n\ndef main(page: ft.Page):\n    page.add(Countdown(120), Countdown(60))\n\nft.app(target=main)\n')),(0,l.kt)("img",{src:"/img/docs/getting-started/user-control-countdown.gif",className:"screenshot-40"}))}f.isMDXComponent=!0}}]);