"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[1075],{1229:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"flet-for-ios","metadata":{"permalink":"/website/blog/flet-for-ios","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-07-05-flet-for-ios.md","source":"@site/blog/2023-07-05-flet-for-ios.md","title":"Flet for iOS","description":"\ud83c\udf89 Whoo-hoo, Flet app is now on App Store! \ud83c\udf89","date":"2023-07-05T00:00:00.000Z","formattedDate":"July 5, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":1.64,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-for-ios","title":"Flet for iOS","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"nextItem":{"title":"Scrolling controls and Theming","permalink":"/website/blog/scrolling-controls-and-theming"}},"content":"\ud83c\udf89 Whoo-hoo, Flet app is now on App Store! \ud83c\udf89\\n\\n<a href=\\"https://apps.apple.com/app/flet/id1624979699\\" target=\\"_blank\\"><img src=\\"/img/blog/ios/flet-1080x1080.png\\" className=\\"screenshot-50 screenshot-rounded\\"/></a>\\n\\nWith Flet iOS app you can see how your Flet Python app looks and behaves on iPhone or iPad while the app itself is running on your computer.\\n\\nBut it\'s more than just testing Flet apps on the phone! Flet mobile app itself is written in Python and its publishing to App Store is an important milestone for the entire Flet project. It is a successful proof that you can create awesome mobile apps in Python only and package them so that they are accepted in App Store!\\n\\n**[Follow this guide](/docs/guides/python/testing-on-ios)** to get started with testing your Flet apps on iPhone or iPad. Explore the app, browse gallery, play with sample projects and app settings.\\n\\nI would like to thank [Kivy project](https://kivy.org/) for making a [toolchain for iOS](https://github.com/kivy/kivy-ios) which we used to compile Python interpreter and dependencies for iOS devices. We published [serious_python](https://pub.dev/packages/serious_python) package for adding Python runtime to any Flutter app.\\n\\n## FAQ\\n\\n### When Android is supported?\\n\\nSoon. It has #1 priority now and we\'ve already started working on it.\\n\\n### How to package my Flet app for App Store?\\n\\nWe are going to provide a project template for bootstrap Flutter app and a guide how to combine Flutter, `serious_python` package and your Python app together to create a standalone iOS app and publish it to App Store.\\n\\nLater this year we\'ll create a CI pipeline to fully automate the process.\\n\\nCheck [`serious_python`\'s readme](https://github.com/flet-dev/serious-python#usage) for instructions on how create a Flutter bootstrap and package your Python app to run within it. Use [flet_example](https://github.com/flet-dev/serious-python/tree/main/example/flet_example) project as a starting point.\\n\\n## Flet v0.8.0 release notes\\n\\nFor testing on iOS you need to upgrade your Flet installation to v0.8.0.\\n\\nIt\'s been [changed a lot](https://github.com/flet-dev/flet/blob/main/CHANGELOG.md#080) in v0.8.0 and there were some breaking changes. Bear with us while you are upgrading to 0.8.0 and let us know if you have any troubles with it.\\n\\nEnjoy!"},{"id":"scrolling-controls-and-theming","metadata":{"permalink":"/website/blog/scrolling-controls-and-theming","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-05-12-theming-and-scrollables.md","source":"@site/blog/2023-05-12-theming-and-scrollables.md","title":"Scrolling controls and Theming","description":"Flet 0.7.1 enables developers changing scroll position and receiving scroll notifications from Page, View, Column, Row, ListView and GridView controls.","date":"2023-05-12T00:00:00.000Z","formattedDate":"May 12, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":4.28,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"scrolling-controls-and-theming","title":"Scrolling controls and Theming","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"prevItem":{"title":"Flet for iOS","permalink":"/website/blog/flet-for-ios"},"nextItem":{"title":"Canvas","permalink":"/website/blog/canvas"}},"content":"Flet 0.7.1 enables developers [changing scroll position](#controlling-scroll-position) and [receiving scroll notifications](#receiving-scroll-notifications) from `Page`, `View`, `Column`, `Row`, `ListView` and `GridView` controls.\\n\\nThe release also introduces theming improvements:\\n* [Color scheme customization](#color-scheme-customization)\\n* [Nested themes](#nested-themes)\\n* [Text theming](#text-theming)\\n* [Scrollbar theming](#scrollbar-theme)\\n* [Tabs theming](#tabs-theming)\\n\\n## Controlling scroll position\\n\\nScrollable controls (`Page`, `View`, `Column`, `Row`, `ListView` and `GridView`) introduce `scroll_to()` method to change their scroll position to either absolute `offset`, relative `delta` or jump to the control with specified `key`.\\n\\nMoving to a `key` is particularly exciting as it allows simulating the navigation between page bookmarks, kind of HTML hrefs with `#`:\\n\\n<img src=\\"/img/docs/controls/column/column-scroll-to-key.gif\\"  className=\\"screenshot-70 screenshot-rounded\\" />\\n\\nCheck the [source code](https://github.com/flet-dev/examples/blob/main/python/controls/column/column-scroll-to-key.py) of the example above.\\n\\nSee [`Column.scroll_to`](/docs/controls/column#scroll_tooffset-delta-key-duration-curve) for more details about controlling scroll position.\\n\\n## Receiving scroll notifications\\n\\nAll scrollable controls now provide `on_scroll` event handler which fires when a scroll position is changed. From event object properties you can determine whether scroll operation has started, finished, changed direction or scroll position went behind scrolling extent (overscroll). You can also get updates of the current scroll position as well as dimensions of the scroll area, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def on_column_scroll(e: ft.OnScrollEvent):\\n        print(\\n            f\\"Type: {e.event_type}, pixels: {e.pixels}, min_scroll_extent: {e.min_scroll_extent}, max_scroll_extent: {e.max_scroll_extent}\\"\\n        )\\n\\n    cl = ft.Column(\\n        spacing=10,\\n        height=200,\\n        width=200,\\n        scroll=ft.ScrollMode.ALWAYS,\\n        on_scroll=on_column_scroll,\\n    )\\n    for i in range(0, 50):\\n        cl.controls.append(ft.Text(f\\"Text line {i}\\", key=str(i)))\\n\\n    page.add(\\n        ft.Container(cl, border=ft.border.all(1)),\\n    )\\n\\nft.app(main)\\n```\\n\\nSee [`Column.on_scroll`](/docs/controls/column#on_scroll) for more details about scroll notification.\\n\\nCheck [infinite scroll example](https://github.com/flet-dev/examples/blob/main/python/controls/column/column-infinite-list.py).\\n\\n## Color scheme customization\\n\\nUntil today the only way to control color scheme for your application was specifying `color_scheme_seed` when creating a new `ft.Theme` object.\\n\\nThis release enables you to fine tune all 30 colors based on the [Material spec](https://m3.material.io/styles/color/the-color-system/color-roles) and used by various Flet controls.\\n\\n<img src=\\"/img/blog/theme-scrolling/material-theme-builder.png\\"  className=\\"screenshot-70 screenshot-rounded\\" />\\n\\nYou can even use [Material Theme Builder](https://m3.material.io/theme-builder#/dynamic) and apply exported color palette to your app, for example:\\n\\n```python\\npage.theme = ft.Theme(\\n    color_scheme=ft.ColorScheme(\\n        primary=ft.colors.GREEN,\\n        primary_container=ft.colors.GREEN_200\\n        # ...\\n    ),\\n)\\n```\\n\\nSee [`ColorScheme` class](/docs/controls/page#colorscheme-class) for more details.\\n\\n## Nested themes\\n\\nAnother awesome feature of this release is nested themes!\\n\\nYou can have a part of your app to use a different theme or override some theme styles for specific controls.\\n\\nRemember `page` object having `theme` and `theme_mode` properties? Now `Container` has `theme` and `theme_mode` properties too!\\n\\n`Container.theme` accepts the same `ft.Theme` object as a page. Specifying `theme_mode` in the container means you don\'t want to inherit parent theme, but want a completely new, unique scheme for all controls inside the container. However, if the container does not have `theme_mode` property set then the styles from its `theme` property will override the ones from the parent, inherited theme:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    # Yellow page theme with SYSTEM (default) mode\\n    page.theme = ft.Theme(\\n        color_scheme_seed=ft.colors.YELLOW,\\n    )\\n\\n    page.add(\\n        # Page theme\\n        ft.Container(\\n            content=ft.ElevatedButton(\\"Page theme button\\"),\\n            bgcolor=ft.colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n\\n        # Inherited theme with primary color overridden\\n        ft.Container(\\n            theme=ft.Theme(color_scheme=ft.ColorScheme(primary=ft.colors.PINK)),\\n            content=ft.ElevatedButton(\\"Inherited theme button\\"),\\n            bgcolor=ft.colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n\\n        # Unique always DARK theme\\n        ft.Container(\\n            theme=ft.Theme(color_scheme_seed=ft.colors.INDIGO),\\n            theme_mode=ft.ThemeMode.DARK,\\n            content=ft.ElevatedButton(\\"Unique theme button\\"),\\n            bgcolor=ft.colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n    )\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/img/blog/theme-scrolling/nested-themes.png\\"  className=\\"screenshot-60\\" />\\n\\n## Scrollbar theme\\n\\nYou can now customize the look and fill of scrollbars in your application (or a particular scroillbar with [nested themes](#nested-themes)).\\n\\nIt could be done via [`page.theme.scrollbar_theme`](/docs/controls/page#scrollbartheme-class) property, for example:\\n\\n```python\\npage.theme = ft.Theme(\\n    scrollbar_theme=ft.ScrollbarTheme(\\n        track_color={\\n            ft.MaterialState.HOVERED: ft.colors.AMBER,\\n            ft.MaterialState.DEFAULT: ft.colors.TRANSPARENT,\\n        },\\n        track_visibility=True,\\n        track_border_color=ft.colors.BLUE,\\n        thumb_visibility=True,\\n        thumb_color={\\n            ft.MaterialState.HOVERED: ft.colors.RED,\\n            ft.MaterialState.DEFAULT: ft.colors.GREY_300,\\n        },\\n        thickness=30,\\n        radius=15,\\n        main_axis_margin=5,\\n        cross_axis_margin=10,\\n    )\\n)\\n```\\n\\n<img src=\\"/img/docs/controls/column/column-scroll-to.png\\"  className=\\"screenshot-60\\" />\\n\\n## Text theming\\n\\nMaterial 3 design defines [5 groups of text styles with 3 sizes in each group](/docs/controls/text#pre-defined-theme-text-styles): \\"Display\\", \\"Headline\\", \\"Title\\", \\"Label\\" and \\"Body\\" which are used across Flet controls. You can now customize each of those styles with `page.theme.text_theme`, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.theme = ft.Theme(\\n        text_theme=ft.TextTheme(body_medium=ft.TextStyle(color=ft.colors.GREEN))\\n    )\\n\\n    page.add(ft.Text(\\"Hello, green world!\\"))\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/img/blog/theme-scrolling/text-theme.png\\"  className=\\"screenshot-50\\" />\\n\\nApparently, `Body Medium` is used by `Text` control as a default style.\\n\\nSee [`TextTheme` class](/docs/controls/page#texttheme-class) for more details.\\n\\n## Tabs theming\\n\\nYou can now control the look and feel of `Tabs` control. In this release `Tabs` adds a bunch of new properties and there is a new [`page.theme.tabs_theme`](/docs/controls/page#tabstheme-class) property to style all tabs in your app:\\n\\n```python\\npage.theme = ft.Theme(\\n    tabs_theme=ft.TabsTheme(\\n        divider_color=ft.colors.BLUE,\\n        indicator_color=ft.colors.RED,\\n        indicator_tab_size=True,\\n        label_color=ft.colors.GREEN,\\n        unselected_label_color=ft.colors.AMBER,\\n        overlay_color={\\n            ft.MaterialState.FOCUSED: ft.colors.with_opacity(0.2, ft.colors.GREEN),\\n            ft.MaterialState.DEFAULT: ft.colors.with_opacity(0.2, ft.colors.PINK),\\n        },\\n    )\\n)\\n```\\n\\n<img src=\\"/img/blog/theme-scrolling/tabs-theme.png\\"  className=\\"screenshot-60\\" />\\n\\nSee [`TabsTheme` class](/docs/controls/page#tabstheme-class) for more details.\\n\\n## Other changes\\n\\n### Flutter 3.10\\n\\nThis Flet release is based on Flutter 3.10 which [brings new features, performance and size optimizations](https://medium.com/flutter/whats-new-in-flutter-3-10-b21db2c38c73). As a result, most of Flet dependencies bumped their versions too, so if you notice any issues please let us know.\\n\\n### Color emoji in web apps\\n\\nColor emoji support in web apps are back! In Flutter 3.7 color emoji were disabled in \\"CanvasKit\\" renderer (default in Flet) because of their font size (8 MB!) and returned back as an opt-in in Flutter 3.10. You can enable color emoji in server-driven app with `use_color_emoji` argument:\\n\\n```python\\nft.app(main, use_color_emoji=True)\\n```\\n\\nand [use `--use-color-emoji` switch](/docs/guides/python/publishing-static-website#color-emojis) when publishing app as a static side.\\n\\nThat\'s all for today!\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"canvas","metadata":{"permalink":"/website/blog/canvas","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-04-26-canvas.md","source":"@site/blog/2023-04-26-canvas.md","title":"Canvas","description":"Unleash your inner artist \ud83e\uddd1\u200d\ud83c\udfa8 and boost your Flet creativity with brand-new Canvas control just released in Flet 0.6.0!","date":"2023-04-26T00:00:00.000Z","formattedDate":"April 26, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":2.125,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"canvas","title":"Canvas","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"prevItem":{"title":"Scrolling controls and Theming","permalink":"/website/blog/scrolling-controls-and-theming"},"nextItem":{"title":"Flet Charts","permalink":"/website/blog/flet-charts"}},"content":"Unleash your inner artist \ud83e\uddd1\u200d\ud83c\udfa8 and boost your Flet creativity with brand-new [Canvas](/docs/controls/canvas) control just released in [Flet 0.6.0](https://pypi.org/project/flet/)!\\n\\nCanvas enables you to draw arbitrary graphics using a set of primitives, or \\"shapes\\", such as line, circle, arc, path and text. I bet you can even implement your own version of [charts](/blog/flet-charts) using Canvas control!\\n\\nCombine Canvas with [GestureDetector](/docs/controls/gesturedetector) and you get a free-hand drawing app - Flet Brush \ud83d\ude00!\\n\\n<img src=\\"/img/docs/controls/canvas/canvas-flet-brush.gif\\" className=\\"screenshot-70 screenshot-rounded\\"/>\\n\\n[Example source](https://github.com/flet-dev/examples/blob/main/python/controls/canvas/canvas-flet-brush.py)\\n\\n`Canvas` control is located in `flet.canvas` package. You need another import to use it:\\n\\n```python\\nimport flet.canvas as cv\\n```\\n\\nHere\'s a simple program drawing a smiley face with [`Circle`](/docs/controls/canvas#circle-shape-properties) and [`Arc`](/docs/controls/canvas#arc-shape-properties) shapes using filled and stroke [`Paint`](/docs/controls/canvas#paint-properties):\\n\\n```python\\nimport math\\nimport flet as ft\\nimport flet.canvas as cv\\n\\ndef main(page: ft.Page):\\n    stroke_paint = paint = ft.Paint(stroke_width=2, style=ft.PaintingStyle.STROKE)\\n    fill_paint = paint = ft.Paint(style=ft.PaintingStyle.FILL)\\n    cp = cv.Canvas(\\n        [\\n            cv.Circle(100, 100, 50, stroke_paint),\\n            cv.Circle(80, 90, 10, stroke_paint),\\n            cv.Circle(84, 87, 5, fill_paint),\\n            cv.Circle(120, 90, 10, stroke_paint),\\n            cv.Circle(124, 87, 5, fill_paint),\\n            cv.Arc(70, 95, 60, 40, 0, math.pi, paint=stroke_paint),\\n        ],\\n        width=float(\\"inf\\"),\\n        expand=True,\\n    )\\n\\n    page.add(cp)\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/img/docs/controls/canvas/canvas-face.png\\" className=\\"screenshot-30\\"/>\\n\\nRead more about Canvas in [docs](/docs/controls/canvas) and explore [Canvas examples](https://github.com/flet-dev/examples/tree/main/python/controls/canvas)!\\n\\n## Other changes\\n\\n### Rich text support\\n\\nWhile working on [drawing text on Canvas](/docs/controls/canvas#drawing-text), as a bonus to this release, we implemented a new [`TextSpan`](/docs/controls/text#textspan-properties) control which can now be used with [`Text.spans`](/docs/controls/text#spans) to output rich text.\\n\\n<img src=\\"/img/docs/controls/text/richtext-borders-stroke.png\\" className=\\"screenshot-60\\" />\\n\\nCheck rich text examples: [one](/docs/controls/text#rich-text-basics), [two](/docs/controls/text#rich-text-with-borders-and-stroke) and [three](/docs/controls/text#rich-text-with-gradient).\\n\\n### `url` property for buttons\\n\\nIf you need to open a URL by clicking on a button or any other control with `on_click` event you can just provide that URL in `url` instead of doing that in the code with [`page.launch_url()`](/docs/controls/page#launch_urlurl) method.\\n\\nInstead of that:\\n\\n```python\\nft.ElevatedButton(\\"Go to Google\\", on_click=lambda e: e.page.launch_url(\\"https://google.com\\"))\\n```\\n\\nyou can just do this:\\n\\n```python\\nft.ElevatedButton(\\"Go to Google\\", url=\\"https://google.com\\")\\n```\\n\\nA new `url` property also solves [blocked window on Safari](https://github.com/flet-dev/flet/issues/1105) issue.\\n\\n### Auto-follow links in `Markdown`\\n\\nAs a continuation of `url` property `Markdown` control can now be enabled to auto-follow URLs in the document:\\n\\n```python\\nimport flet as ft\\n\\nmd = \\"\\"\\"\\n[Go to Google](https://www.google.com)\\n\\"\\"\\"\\n\\ndef main(page: ft.Page):\\n    page.add(\\n        ft.Markdown(\\n            md,\\n            extension_set=ft.MarkdownExtensionSet.GITHUB_WEB,\\n            auto_follow_links=True,\\n        )\\n    )\\n\\nft.app(main)\\n```\\n\\n### Better web support\\n\\nIn this release we also did some improvements to web support like [capturing user info in `page.client_id` and `page.client_user_agent`](https://github.com/flet-dev/flet/pull/1302) as well as fixing nasty [#1333](https://github.com/flet-dev/flet/pull/1333) and [#1289](https://github.com/flet-dev/flet/pull/1289) bugs related to routing.\\n\\nThat\'s all for today!\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give canvas and rich text a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-charts","metadata":{"permalink":"/website/blog/flet-charts","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-04-12-flet-charts.md","source":"@site/blog/2023-04-12-flet-charts.md","title":"Flet Charts","description":"Last year we introduced support for Matplotlib and Plotly charts. Both libraries are able to export charts as SVG images which are then displayed in a Flet app. However, such charts, while serving the purpose of visualization, are lacking interactivity and animation.","date":"2023-04-12T00:00:00.000Z","formattedDate":"April 12, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":1.295,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-charts","title":"Flet Charts","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"prevItem":{"title":"Canvas","permalink":"/website/blog/canvas"},"nextItem":{"title":"Standalone Flet web apps with Pyodide","permalink":"/website/blog/standalone-flet-web-apps-with-pyodide"}},"content":"Last year we introduced support for [Matplotlib and Plotly charts](/blog/matplotlib-and-plotly-charts). Both libraries are able to export charts as SVG images which are then displayed in a Flet app. However, such charts, while serving the purpose of visualization, are lacking interactivity and animation.\\n\\nToday we are releasing [Flet 0.5.2](https://pypi.org/project/flet/) with built-in charts \ud83d\udcca based on the awesome [fl_chart](https://pub.dev/packages/fl_chart) library!\\n\\nThree new chart controls have been introduced:\\n\\n## LineChart\\n\\n<img src=\\"/img/docs/controls/charts/linechart-sample-1.gif\\" className=\\"screenshot-50\\"/>\\n\\n[Docs](/docs/controls/linechart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n## BarChart\\n\\n<img src=\\"/img/docs/controls/charts/barchart-sample-2.gif\\" className=\\"screenshot-50\\"/>\\n\\n[Docs](/docs/controls/barchart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n## PieChart\\n\\n<img src=\\"/img/docs/controls/charts/piechart-sample-2.gif\\" className=\\"screenshot-30\\"/>\\n\\n[Docs](/docs/controls/piechart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n:::note\\nWe spent a lot of time studying `fl_chart` library while trying to implement most of its features in a Flet way. However, if you see anything missing in Flet, but available in a library please [submit a new feature request](https://github.com/flet-dev/flet/issues).\\n:::\\n\\n## Other changes\\n\\n### Pyodide 0.23\\n\\nPyodide, which provides Python runtime in a browser and is used to run Flet app as a static website, was upgraded to version 0.23 which is based on Python 3.11.2 and giving some [size and performance improvements](https://blog.pyodide.org/posts/0.23-release/).\\n\\n### Memory leak fixes\\n\\nIn this release we paid a lot of attention to memory leak issues in Flet apps. Now, when a user session is closed its memory is reliably released and garbage-collected. That makes Flet ready for production applications with a lot of users.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give charts a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nHey, [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 5K stars \u2b50\ufe0f - thank you all for your continuing support!"},{"id":"standalone-flet-web-apps-with-pyodide","metadata":{"permalink":"/website/blog/standalone-flet-web-apps-with-pyodide","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-02-06-standalone-flet-web-apps-with-pyodide.md","source":"@site/blog/2023-02-06-standalone-flet-web-apps-with-pyodide.md","title":"Standalone Flet web apps with Pyodide","description":"We\'ve just released Flet 0.4.0 with a super exciting new feature - packaging Flet apps into a standalone static website that can be run entirely in the browser! The app can be published to any free hosting for static websites such as GitHub Pages or Cloudflare Pages. Thanks to Pyodide - a Python port to WebAssembly!","date":"2023-02-06T00:00:00.000Z","formattedDate":"February 6, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":3.83,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"standalone-flet-web-apps-with-pyodide","title":"Standalone Flet web apps with Pyodide","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"prevItem":{"title":"Flet Charts","permalink":"/website/blog/flet-charts"},"nextItem":{"title":"Packaging desktop apps with a custom icon","permalink":"/website/blog/packaging-desktop-apps-with-custom-icon"}},"content":"import Card from \'@site/src/components/card\';\\n\\nWe\'ve just released [Flet 0.4.0](https://pypi.org/project/flet/) with a super exciting new feature - [packaging Flet apps into a standalone static website](/docs/guides/python/publishing-static-website) that can be run entirely in the browser! The app can be published to any free hosting for static websites such as GitHub Pages or Cloudflare Pages. Thanks to [Pyodide](https://pyodide.org/en/stable/) - a Python port to WebAssembly!\\n\\n<img src=\\"/img/blog/pyodide/pyodide-logo.png\\" className=\\"screenshot-50\\" />\\n\\nYou can quickly build awesome single-page applications (SPA) entirely in Python and host them everywhere! No HTML, CSS or JavaScript required!\\n\\n## Quick Flet with Pyodide demo\\n\\nInstall the latest Flet package:\\n\\n```\\npip install flet --upgrade\\n```\\n\\nCreate a simple `counter.py` app:\\n\\n```python title=\\"counter.py\\"\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Flet counter example\\"\\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\\n\\n    txt_number = ft.TextField(value=\\"0\\", text_align=ft.TextAlign.RIGHT, width=100)\\n\\n    def minus_click(e):\\n        txt_number.value = str(int(txt_number.value) - 1)\\n        page.update()\\n\\n    def plus_click(e):\\n        txt_number.value = str(int(txt_number.value) + 1)\\n        page.update()\\n\\n    page.add(\\n        ft.Row(\\n            [\\n                ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\\n                txt_number,\\n                ft.IconButton(ft.icons.ADD, on_click=plus_click),\\n            ],\\n            alignment=ft.MainAxisAlignment.CENTER,\\n        )\\n    )\\n\\nft.app(main)\\n```\\n\\nRun a brand-new `flet publish` command to publish Flet app as a static website:\\n\\n```\\nflet publish counter.py\\n```\\n\\nThe website will be published to `dist` directory next to `counter.py`.\\nGive website a try using built-in Python web server:\\n\\n```\\npython -m http.server --directory dist\\n```\\n\\nOpen `http://localhost:8000` in your browser to check the published app.\\n\\n<img src=\\"/img/docs/getting-started/flet-counter-safari.png\\" className=\\"screenshot-50\\" />\\n\\nHere are a few live Flet apps hosted at Cloudflare Pages:\\n\\nexport const ImageCard = ({title, href, imageUrl}) => (\\n    <div className=\\"col col--4 margin-bottom--lg\\">\\n      <Card href={href}>\\n        <img src={\\"/img/gallery/\\" + imageUrl} className=\\"screenshot-100\\"/>\\n        <h2>{title}</h2>\\n      </Card>\\n    </div>\\n);\\n\\n<div className=\\"margin-top--lg\\">\\n  <section className=\\"row\\">\\n    <ImageCard title=\\"To-Do\\" href=\\"https://gallery.flet.dev/todo/\\" imageUrl=\\"todo.png\\" />\\n    <ImageCard title=\\"Icons browser\\" href=\\"https://gallery.flet.dev/icons-browser/\\" imageUrl=\\"icons-browser.png\\" />\\n    <ImageCard title=\\"Calc\\" href=\\"https://gallery.flet.dev/calculator/\\" imageUrl=\\"calc.png\\" />\\n    <ImageCard title=\\"Solitaire\\" href=\\"https://gallery.flet.dev/solitaire/\\" imageUrl=\\"solitaire.png\\" />\\n    <ImageCard title=\\"Trolli\\" href=\\"https://gallery.flet.dev/trolli/\\" imageUrl=\\"trolli.png\\" />\\n  </section>\\n</div>\\n\\n[Check the guide](/docs/guides/python/publishing-static-website) for more information about publishing Flet apps as standalone websites.\\n\\n## Built-in Fletd server in Python\\n\\nFlet 0.4.0 also implements a [new Flet desktop architecture](https://flet.dev/blog/flet-mobile-update#flet-new-desktop-architecture).\\n\\nIt replaces Fletd server written in Go with a light-weight shim written in Python with a number of pros:\\n\\n1. Only 2 system processes are needed to run Flet app: Python interpreter and Flutter client.\\n2. Less communication overhead (minus two network hops between Python and Fletd) and lower latency (shim uses TCP on Windows and Unix domain sockets on macOS/Linux).\\n3. Shim binds to `127.0.0.1` on Windows by default which is more secure.\\n4. The size of a standalone app bundle produced by `flet pack` reduced by ~8 MB.\\n\\nThe implementation was also required to support Pyodide (we can\'t run Go web server in the browser, right?) and paves the way to iOS and Android support.\\n\\n### Other changes\\n\\n* All controls loading resources from web URLs (`Image.src`, `Audio.src`, `Page.fonts`, `Container.image_src`) are now able to load them from local files too, by providing a full path in the file system, and from `assets` directory by providing relative path. For desktop apps a path in `src` property could be one of the following:\\n  * A path relative to `assets` directory, with or without starting slash, for example: `/image.png` or `image.png`. The name of artifact dir should not be included.\\n  * An absolute path within a computer file system, e.g. `C:\\\\projects\\\\app\\\\assets\\\\image.png` or `/Users/john/images/picture.png`.\\n  * A full URL, e.g. `https://mysite.com/images/pic.png`.\\n  * Add `page.on_error = lambda e: print(\\"Page error:\\", e.data)` to see failing images.\\n* `flet` Python package has separated into two packages: `flet-core` and `flet`.\\n* PDM replaced with Poetry.\\n* `beartype` removed everywhere.\\n\\n### \ud83d\udca5 Breaking changes\\n\\n* Default routing scheme changed from \\"hash\\" to \\"path\\" (no `/#/` at the end of app URL). Use `ft.app(main, route_url_strategy=\\"hash\\")` to get original behavior.\\n* OAuth authentication is not supported anymore in standalone desktop Flet apps.\\n\\n## Async support\\n\\nFlet apps can now be written as async apps and use `asyncio` with other Python async libraries. Calling coroutines is naturally supported in Flet, so you don\'t need to wrap them to run synchronously.\\n\\nTo start with an async Flet app you should make `main()` method `async`:\\n\\n```python\\nimport flet as ft\\n\\nasync def main(page: ft.Page):\\n    await page.add_async(ft.Text(\\"Hello, async world!\\"))\\n\\nft.app(main)\\n```\\n\\n[Read the guide](/docs/guides/python/async-apps) for more information about writing async Flet apps.\\n\\n## Conclusion\\n\\nFlet 0.4.0 brings the following exciting features:\\n\\n- Standalone web apps with Pyodide running in the browser and hosted on a cheap hosting.\\n- Faster and more secure architecture with a built-in Fletd server.\\n- Async apps support.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give `flet publish` command a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nHey, by the way, [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 4.2K stars \u2b50\ufe0f (+1K in just one month) - keep going!"},{"id":"packaging-desktop-apps-with-custom-icon","metadata":{"permalink":"/website/blog/packaging-desktop-apps-with-custom-icon","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-01-04-packaging-desktop-apps-with-custom-icon.md","source":"@site/blog/2023-01-04-packaging-desktop-apps-with-custom-icon.md","title":"Packaging desktop apps with a custom icon","description":"Happy New Year! Flet project has reached \u2b50\ufe0f 3.3K stars \u2b50\ufe0f on GitHub which is very exciting and encouraging! Thank you all for your support!","date":"2023-01-04T00:00:00.000Z","formattedDate":"January 4, 2023","tags":[{"label":"releases","permalink":"/website/blog/tags/releases"}],"readingTime":0.965,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"packaging-desktop-apps-with-custom-icon","title":"Packaging desktop apps with a custom icon","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"prevItem":{"title":"Standalone Flet web apps with Pyodide","permalink":"/website/blog/standalone-flet-web-apps-with-pyodide"},"nextItem":{"title":"Flet mobile update","permalink":"/website/blog/flet-mobile-update"}},"content":"Happy New Year! [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 3.3K stars \u2b50\ufe0f on GitHub which is very exciting and encouraging! Thank you all for your support!\\n\\nWe are starting this year with the release of [Flet 0.3.2](https://pypi.org/project/flet/) bringing a long-awaited feature: creating standalone desktop bundles with a custom icon!\\n\\n`flet` command has been used for running Flet program with [hot reload](/docs/guides/python/hot-reload), but we recently re-worked Flet CLI to support multiple actions.\\n\\nThere is a new `flet pack` command that wraps [PyInstaller](https://github.com/pyinstaller/pyinstaller) API to package your Flet Python app into a standalone Windows executable or macOS app bundle which can be run by a user with no Python installed.\\n\\nCommand\'s `--icon` argument is now changing not only executable\'s icon, but Flet\'s app window icon and the icon shown in macOS dock, Windows taskbar, macOS \\"About\\" dialog, Task Manager and Activity Monitor:\\n\\n<img src=\\"/img/docs/getting-started/package-desktop/macos-dock.png\\" className=\\"screenshot-20 screenshot-rounded\\" />\\n\\nBundle name, version and copyright can be changed too:\\n\\n<img src=\\"/img/docs/getting-started/package-desktop/flet-app-bundle-about-clean.png\\" className=\\"screenshot-50\\" />\\n\\nFind all available options for packaging desktop apps in the [updated guide](/docs/guides/python/packaging-desktop-app).\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give `flet pack` command a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-mobile-update","metadata":{"permalink":"/website/blog/flet-mobile-update","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-12-08-flet-mobile-update.md","source":"@site/blog/2022-12-08-flet-mobile-update.md","title":"Flet mobile update","description":"This post is a continuation of Flet mobile strategy published a few months ago.","date":"2022-12-08T00:00:00.000Z","formattedDate":"December 8, 2022","tags":[{"label":"news","permalink":"/website/blog/tags/news"}],"readingTime":4.33,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-mobile-update","title":"Flet mobile update","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news"]},"prevItem":{"title":"Packaging desktop apps with a custom icon","permalink":"/website/blog/packaging-desktop-apps-with-custom-icon"},"nextItem":{"title":"Flet versioning and pre-releases","permalink":"/website/blog/flet-versioning-and-pre-releases"}},"content":"This post is a continuation of [Flet mobile strategy](/blog/flet-mobile-strategy) published a few months ago.\\n\\nOur original approach to Flet running on a mobile device was Server-Driven UI. Though SDUI has its own benefits (like bypassing App Store for app updates) it doesn\'t work in all cases, requires web server to host Python part of the app and, as a result, adds latency which is not great for user actions requiring nearly instance UI response, like drawing apps.\\n\\nI\'ve been thinking on how to make Python runtime embedded into Flutter iOS or Android app to run user Python program. No doubt, it\'s technically possible as Kivy and BeeWare projects do that already.\\n\\n## Current Flet architecture\\n\\nThe current architecture of Flet desktop app is shown on the diagram below:\\n\\n<img src=\\"/img/blog/mobile-update/flet-desktop-architecture.svg\\" className=\\"screenshot-100\\" />\\n\\nRunning Flet program on a desktop involves three applications (processes) working together:\\n\\n* **Python runtime** (`python3`) - Python interpreter running your Python script. This is what you are starting from a command line. Python starts Fletd server and connects to it via WebSockets.\\n* **Fletd server** (`fletd`)- Flet web server written in Go, listening on a TCP port. Fletd holds the state of all user sessions (for desktop app there is only one session) and dispatches page updates and user generated events between Python program and Flet client.\\n* **Flet client** (`flet`) - desktop app written in Flutter and displaying UI in a native OS window. Flet client connects to Fletd server via WebSockets.\\n\\nThe architecture above works well for Flet web apps where web server is essential part, but for desktop it seems redundant:\\n\\n* If all three processes run on the same computer WebSockets could be replaced with sockets or named pipes with less overhead.\\n* Fletd server has no much sense as there is only one user session and UI state is persistently stored in Flet desktop client which is never \\"reloaded\\".\\n\\n## Flet new desktop architecture\\n\\nFlet desktop app architecture can be simplified by replacing Fletd with a \\"stub\\" written in Python and communicating with Flet desktop client via sockets (Windows) and named pipes (macOS and Linux):\\n\\n<img src=\\"/img/blog/mobile-update/flet-desktop-architecture-v2.svg\\" className=\\"screenshot-70\\" />\\n\\n## Flet mobile architecture\\n\\nMobile applications are running in a very strict context with a number of limitations. For example, on iOS the app cannot spawn a new processes. Other words, Flet Flutter app cannot just start \\"python.exe\\" and pass your script as an argument.\\n\\nLuckily for us, [Python can be embedded](https://docs.python.org/3/extending/embedding.html) into another app as a C library and Dart (the language in which Flutter apps are written) allows calling C libraries via [FFI](https://dart.dev/guides/libraries/c-interop) (Foreign Function Interface).\\n\\nAdditionally, while Android allows loading of dynamically linked libraries iOS requires all libraries statically linked into app executable. [This article](https://blog.logrocket.com/dart-ffi-native-libraries-flutter/) covers Dart FFI in more details, if you are curious.\\n\\nFlet mobile architecture could look like this:\\n\\n<img src=\\"/img/blog/mobile-update/flet-mobile-architecture-v2.svg\\" className=\\"screenshot-40\\" />\\n\\nPython runtime will be statically or dynamically linked with Flutter client app and called via FFI and/or named pipes.\\n\\nRunning Python on mobile will have some limitations though. Most notable one is the requirement to use \\"pure\\" Python modules or modules with native code compiled specifically for mobile ARM64 architecture.\\n\\n## Asyncio support\\n\\n[Asyncio](https://docs.python.org/3/library/asyncio.html) is part of Python 3 and we start seeing more and more libraries catching up with async/await programming model which is more effective for I/O-bound and UI logic.\\n\\nCurrently, Flet is spawning all UI event handlers in new threads and it\'s also a pain to see `threading.sleep()` calls hogging threads here and there just to do some UI animation. All that looks expensive.\\n\\nUsing of async libraries from a sync code is [possible](https://github.com/flet-dev/flet/issues/128), but looks hacky and inefficient as it keeps CPU busy just to wait async method to finish. So, we want a first-class support of async code in Flet app.\\n\\nAsync/await model is a state machine switching between tasks in a single thread. By going async Flet will able to utilize [streams](https://docs.python.org/3/library/asyncio-stream.html) for socket server and use async [WebSockets library](https://pypi.org/project/websockets/) library. It will be possible to use both sync and async event handlers in a single Flet app without any compromises or hacks.\\n\\nEven more exciting, async Flet will be able to run entirely in the browser within [Pyodide](https://pyodide.org/) - Python distribution based on WebAssembly (WASM). WebAssembly doesn\'t have multi-threading support yet, so running in a single thread is a must. Just imagine, Flet web app with a trully offline Flet PWA that does not require a web server to run a Python code!\\n\\n## Development plan\\n\\nWe are going to crunch the scope above in a few iterations:\\n\\n1. Async API support with async WebSockets library. Works with the same Fletd in Go.\\n2. Fletd server (\\"stub\\") in Python to use with a desktop.\\n3. Embedding Python with Fletd \\"stub\\" and user program into iOS.\\n4. Embedding Python into Android.\\n5. Packaging mobile apps for iOS and Android.\\n\\n:::cautionHELP WANTED\\n\ud83d\ude4f I\'m looking for a help from the community with developing C/C++/native code integration part between Flutter and Python on iOS and Android. It could be either free help or a paid job - let me know if you are interested!\\n:::\\n\\nHop to [Discord](https://discord.gg/dzWXP8SHG8) to discuss the plan, offer help, ask questions!"},{"id":"flet-versioning-and-pre-releases","metadata":{"permalink":"/website/blog/flet-versioning-and-pre-releases","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-11-16-flet-versioning-and-pre-releases.md","source":"@site/blog/2022-11-16-flet-versioning-and-pre-releases.md","title":"Flet versioning and pre-releases","description":"Flet is a fast-evolving framework with a new functionality and bug fixes being committed every other day.","date":"2022-11-16T00:00:00.000Z","formattedDate":"November 16, 2022","tags":[{"label":"news","permalink":"/website/blog/tags/news"}],"readingTime":1.405,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-versioning-and-pre-releases","title":"Flet versioning and pre-releases","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news"]},"prevItem":{"title":"Flet mobile update","permalink":"/website/blog/flet-mobile-update"},"nextItem":{"title":"ResponsiveRow and mobile controls","permalink":"/website/blog/responsive-row-and-mobile-controls"}},"content":"Flet is a fast-evolving framework with a new functionality and bug fixes being committed every other day.\\n\\nThe development model with one pull request per release didn\'t work well for the project as users waited for weeks to get hands on a new release and, honestly, from development perspective producing large \\"heroic\\" releases takes a lot of energy \ud83e\udee0.\\n\\nFrom now on we\'ll be breaking releases into multiple pull requests with one feature/bugfix per PR.\\n\\nEvery PR merged into `main` branch will be publishing pre-release (developmental release) package to [pypi.org](https://pypi.org/project/flet/) having version format of `X.Y.Z.devN`.\\n\\n## Installing pre-releases\\n\\nTo install Flet pre-release package use the following command:\\n\\n```\\npip install flet --pre\\n```\\n\\n:::info\\nWe recommend installing pre-release builds into a virtual environment.\\n:::\\n\\n## Flet versioning\\n\\nFlet is switching to [Semanting Versioning](https://semver.org/) with a version number `MAJOR.MINOR.PATCH`:\\n\\n1. `MAJOR` will be incremented when there are \\"incompatible API changes\\". Right now it\'s `0` and we expect to make it `1` when we feel that Flet API is stable enough.\\n2. `MINOR` will be incremented when a new functionality added in a backwards compatible manner.\\n3. `PATCH` will be incremented when we make backward compatible bug fixes.\\n\\nAccording to that rule, upcoming Flet release will have version `0.2.0`. Bug fixes for that release will be labeled as `0.2.1`, `0.2.2`, etc. The release after that release will be `0.3.0` and so on.\\n\\nFlet pre-releases will have a format of `MAJOR.{LAST_MINOR + 1}.0.dev{BUILD}` where `LAST_MINOR` is `MINOR` version of the last release and `{BUILD}` is a build number set by [CI](https://ci.appveyor.com/project/flet-dev/flet). For example, if the last published release is `0.1.65` pre-releases will have versions `0.2.0.dev{BUILD}`. Pre-releases after `0.2.0` release will be labeled as `0.3.0.dev{BUILD}`."},{"id":"responsive-row-and-mobile-controls","metadata":{"permalink":"/website/blog/responsive-row-and-mobile-controls","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-11-13-responsive-row-and-mobile-controls.md","source":"@site/blog/2022-11-13-responsive-row-and-mobile-controls.md","title":"ResponsiveRow and mobile controls","description":"We just released Flet 0.1.65 which is adding a bunch of mobile-optimized controls, fixing some bugs and introducing a new layout control - ResponsiveRow.","date":"2022-11-13T00:00:00.000Z","formattedDate":"November 13, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":2.68,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"responsive-row-and-mobile-controls","title":"ResponsiveRow and mobile controls","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Flet versioning and pre-releases","permalink":"/website/blog/flet-versioning-and-pre-releases"},"nextItem":{"title":"Matplotlib and Plotly charts","permalink":"/website/blog/matplotlib-and-plotly-charts"}},"content":"We just released [Flet 0.1.65](https://pypi.org/project/flet/0.1.65/) which is adding a bunch of mobile-optimized controls, fixing some bugs and introducing a new layout control - `ResponsiveRow`.\\n\\n## `ResponsiveRow` control\\n\\n`ResponsiveRow` borrows the idea of grid layout from [Bootstrap](https://getbootstrap.com/docs/5.2/layout/grid/) web framework.\\n\\n`ResponsiveRow` allows aligning child controls to virtual columns. By default, a virtual grid has 12 columns, but that can be customized with `ResponsiveRow.columns` property.\\n\\nSimilar to `expand` property every control now has `col` property which allows specifying how many columns a control should span. For examle, to make a layout consisting of two columns spanning 6 virtual columns each:\\n\\n```python\\nimport flet as ft\\n\\nft.ResponsiveRow([\\n    ft.Column(col=6, controls=ft.Text(\\"Column 1\\")),\\n    ft.Column(col=6, controls=ft.Text(\\"Column 2\\"))\\n])\\n```\\n\\n`ResponsiveRow` is \\"responsive\\" because it can adapt the size of its children to a changing screen (page, window) size. `col` property in the example above is a constant number which means the child will span 6 columns for any screen size.\\n\\nIf `ResponsiveRow`\'s child doesn\'t have `col` property specified it spans the maximum number of columns.\\n\\n`col` can be configured to have a different value for specific \\"breakpoints\\". Breakpoints are named dimension ranges:\\n\\n| Breakpoint | Dimension |\\n|---|---|\\n| xs | <576px |\\n| sm | \u2265576px |\\n| md | \u2265768px |\\n| lg | \u2265992px |\\n| xl | \u22651200px |\\n| xxl | \u22651400px |\\n\\nFor example, the following example collapses content into a single column on a mobile device and takes two columns on larger screens:\\n\\n```python\\nimport flet as ft\\n\\nft.ResponsiveRow([\\n    ft.Column(col={\\"sm\\": 6}, controls=ft.Text(\\"Column 1\\")),\\n    ft.Column(col={\\"sm\\": 6}, controls=ft.Text(\\"Column 2\\"))\\n])\\n```\\n\\nHere is more elaborate example of responsive layout:\\n\\n<img src=\\"/img/docs/controls/responsive-row/responsive-layout.gif\\" className=\\"screenshot-100\\"/>\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def page_resize(e):\\n        pw.value = f\\"{page.width} px\\"\\n        pw.update()\\n\\n    page.on_resize = page_resize\\n\\n    pw = ft.Text(bottom=50, right=50, style=\\"displaySmall\\")\\n    page.overlay.append(pw)\\n    page.add(\\n        ft.ResponsiveRow(\\n            [\\n                ft.Container(\\n                    ft.Text(\\"Column 1\\"),\\n                    padding=5,\\n                    bgcolor=ft.colors.YELLOW,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 2\\"),\\n                    padding=5,\\n                    bgcolor=ft.colors.GREEN,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 3\\"),\\n                    padding=5,\\n                    bgcolor=ft.colors.BLUE,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 4\\"),\\n                    padding=5,\\n                    bgcolor=ft.colors.PINK_300,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n            ],\\n        ),\\n        ft.ResponsiveRow(\\n            [\\n                ft.TextField(label=\\"TextField 1\\", col={\\"md\\": 4}),\\n                ft.TextField(label=\\"TextField 2\\", col={\\"md\\": 4}),\\n                ft.TextField(label=\\"TextField 3\\", col={\\"md\\": 4}),\\n            ],\\n            run_spacing={\\"xs\\": 10},\\n        ),\\n    )\\n    page_resize(None)\\n\\nft.app(target=main)\\n```\\n\\n`ResponsiveRow` [docs](/docs/controls/responsiverow), [example](https://github.com/flet-dev/examples/blob/main/python/controls/responsive-row/responsive-layout.py).\\n\\n## Other new controls\\n\\nThis release adds new visual and non-visual controls requested by Flet community and also required to build UI of the upcoming [Flet Studio](/docs/guides/python/mobile-support#flet-studio-for-ios-and-android).\\n\\n### BottomSheet\\n\\nShows a modal Material Design bottom sheet:\\n\\n<img src=\\"/img/docs/controls/bottom-sheet/bottom-sheet-sample.gif\\" className=\\"screenshot-30\\"/>\\n\\n`BottomSheet` [docs](/docs/controls/bottomsheet), [example](https://github.com/flet-dev/examples/blob/main/python/controls/bottom-sheet/modal-bottom-sheet.py).\\n\\n### NavigationBar\\n\\nBottom Navigation bar which offers a persistent and convenient way to switch between primary destinations in an app:\\n\\n<img src=\\"/img/docs/controls/navigation-bar/navigation-bar-sample.gif\\" className=\\"screenshot-40\\"/>\\n\\n`NavigationBar` [docs](/docs/controls/navigationbar), [example](https://github.com/flet-dev/examples/blob/main/python/controls/navigation-bar/navigation-bar-sample.py).\\n\\n### Tooltip\\n\\nA tooltip control:\\n\\n<img src=\\"/img/docs/controls/tooltip/custom-tooltip.gif\\" className=\\"screenshot-30\\"/>\\n\\n`Tooltip` [docs](/docs/controls/tooltip), [example](https://github.com/flet-dev/examples/blob/main/python/controls/tooltip/custom-tooltip.py).\\n\\n### HapticFeedback\\n\\nAllows access to the haptic feedback (clicks and vibrates) interface on the device.\\n\\n`HapticFeedback` [docs](/docs/controls/hapticfeedback).\\n\\n### ShakeDetector\\n\\nA control to detect phone shakes. Based on [shake](https://pub.dev/packages/shake) widget.\\n\\n`ShakeDetector` [docs](/docs/controls/shakedetector).\\n\\n## Other improvements\\n\\n### Markdown code syntax highlight\\n\\n[Sample code](https://github.com/flet-dev/examples/blob/main/python/controls/markdown/markdown-code-highlight.py).\\n\\n<img src=\\"/img/docs/controls/markdown/markdown-highlight.png\\" className=\\"screenshot-60\\"/>\\n\\n### Variable fonts support\\n\\nFlutter has finally supported [variable fonts](https://fonts.google.com/knowledge/introducing_type/introducing_variable_fonts) and we bring that into Flet too! \\n\\n[Sample code](https://github.com/flet-dev/examples/blob/main/python/controls/text/variable-weight-font.py).\\n\\n<img src=\\"/img/docs/controls/text/variable-weight-font.gif\\" className=\\"screenshot-50\\" />\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"matplotlib-and-plotly-charts","metadata":{"permalink":"/website/blog/matplotlib-and-plotly-charts","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-10-24-matplotlib-and-plotly-charts.md","source":"@site/blog/2022-10-24-matplotlib-and-plotly-charts.md","title":"Matplotlib and Plotly charts","description":"We are thrilled to introduce Matplotlib and Plotly charting controls in Flet 0.1.63!","date":"2022-10-24T00:00:00.000Z","formattedDate":"October 24, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":1.265,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"matplotlib-and-plotly-charts","title":"Matplotlib and Plotly charts","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"ResponsiveRow and mobile controls","permalink":"/website/blog/responsive-row-and-mobile-controls"},"nextItem":{"title":"Gesture detector","permalink":"/website/blog/gesture-detector"}},"content":"We are thrilled to introduce Matplotlib and Plotly charting controls in [Flet 0.1.63](https://pypi.org/project/flet/0.1.63/)!\\n\\n[Matplotlib](https://matplotlib.org/) and [Plotly](https://plotly.com/python/) are the most recognized Python charting libraries with a ton of features. They are greatly compatible with other scientific Python libraries such as Numpy or Pandas.\\n\\nNo doubt, it would be nearly impossible to replicate their functionality as pure Flutter widgets. Fortunately, both Matplotlib and Plotly can export charts into various formats, such as SVG. On the other hand Flet can [display SVG images](https://github.com/flet-dev/examples/blob/main/python/controls/image/svg-image.py) and that gives a perfect combination - Flet charting controls for Matplotlib and Plotly!\\n\\nThe resulting solution works so great that it\'s possible to display almost any example from [Matplotlib](https://matplotlib.org/stable/gallery/index.html) and [Plotly](https://plotly.com/python/) galleries - your imagination is the only limit!\\n\\nPlot a [simple bar chart](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-barchart.py):\\n\\n<img src=\\"/img/docs/controls/charts/matplotlib-barchart.png\\" className=\\"screenshot-60\\"/>\\n\\na nice [scatter with legend](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-scatter.py):\\n\\n<img src=\\"/img/docs/controls/charts/matplotlib-scatter.png\\" className=\\"screenshot-60\\"/>\\n\\nor some multi-chart [contour plot](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-contour.py):\\n\\n<img src=\\"/img/docs/controls/charts/matplotlib-contour.png\\" className=\\"screenshot-60\\"/>\\n\\nCheck the docs for Matplotlib and Plotly charting controls:\\n\\n* [MatplotlibChart](/docs/controls/matplotlibchart)\\n* [PlotlyChart](/docs/controls/plotlychart)\\n\\nExplore [Flet chart examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts).\\n\\nLearn Python libraries by examples:\\n\\n* [Matplotlib gallery](https://matplotlib.org/stable/gallery/index.html)\\n* [Plotly gallery](https://plotly.com/python/)\\n\\nIn the future releases, we may add an interactive \\"toolbar\\" for Matplotlib charts by implementing a custom [backend](https://matplotlib.org/stable/users/explain/backends.html). Or maybe it\'s a great excersize for Flet users? \ud83d\ude09\\n\\nAlso, when it\'s time for Flet to support other languages we would need to re-visit charting to make it language-agnostic as the current charting implementation relies on Python libraries.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"gesture-detector","metadata":{"permalink":"/website/blog/gesture-detector","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-10-11-gesture-detector.md","source":"@site/blog/2022-10-11-gesture-detector.md","title":"Gesture detector","description":"We\'ve just released Flet 0.1.62 with support of gestures processing!","date":"2022-10-11T00:00:00.000Z","formattedDate":"October 11, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":1.115,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"gesture-detector","title":"Gesture detector","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Matplotlib and Plotly charts","permalink":"/website/blog/matplotlib-and-plotly-charts"},"nextItem":{"title":"User authentication","permalink":"/website/blog/user-authentication"}},"content":"We\'ve just released [Flet 0.1.62](https://pypi.org/project/flet/0.1.62/) with support of gestures processing!\\n\\nThere is a new control - [GestureDetector](/docs/controls/gesturedetector) which allows handling all sorts of gestures: single and double taps with a left (primary) and right (secondary) mouse (pointer) buttons, vertical, horizontal and bi-directional drags, zoom (pinch-in and pinch-out) gestures as well as hover events. Now, by wrapping it into `GestureDetector`, you can make any Flet control \\"clickable\\" and \\"draggable\\"!\\n\\nHere is a simple example of an app which allows you to drag containers inside a Stack:\\n\\n<img src=\\"/img/blog/gesture-detector/gesture-detector-demo.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def on_pan_update(e: ft.DragUpdateEvent):\\n        e.control.top = max(0, e.control.top + e.delta_y)\\n        e.control.left = max(0, e.control.left + e.delta_x)\\n        e.control.update()\\n\\n    gd = ft.GestureDetector(\\n        mouse_cursor=ft.MouseCursor.MOVE,\\n        on_vertical_drag_update=on_pan_update,\\n        left=100,\\n        top=100,\\n        content=ft.Container(bgcolor=ft.colors.BLUE, width=50, height=50, border_radius=5),\\n    )\\n\\n    page.add( ft.Stack([gd], expand=True))\\n\\nft.app(target=main)\\n```\\n\\nGesture detector is yet another great addition to a collection of Flet primitives that allows you to build apps limited only by your imagination. 2D drawing coming later this month is going to complete that ensemble!\\n\\nThat release wasn\'t about only gestures though - that was a \\"stabilization\\" release too. We fixed a number of bugs and added a bunch of other small features which you can [see here](https://github.com/flet-dev/flet/issues?q=is%3Aissue+milestone%3AControls-S2+is%3Aclosed).\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"user-authentication","metadata":{"permalink":"/website/blog/user-authentication","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-09-27-user-authentication.md","source":"@site/blog/2022-09-27-user-authentication.md","title":"User authentication","description":"User authentication in Flet is here! \ud83c\udf89","date":"2022-09-27T00:00:00.000Z","formattedDate":"September 27, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":2.86,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"user-authentication","title":"User authentication","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Gesture detector","permalink":"/website/blog/gesture-detector"},"nextItem":{"title":"File picker and uploads","permalink":"/website/blog/file-picker-and-uploads"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\nUser authentication in Flet is here! \ud83c\udf89\\n\\nNow you can implement user authentication (\\"Login with X\\" buttons) in your Flet app using 3rd-party identity providers such as GitHub, Google, Azure, Auth0, LinkedIn and others:\\n\\n<img src=\\"/img/docs/getting-started/authentication/github-oauth-authorize.png\\" className=\\"screenshot-40\\" />\\n\\nTraditionally, this release is not just about authentication, but it adds a ton of accompanying functionality and small improvements:\\n\\n<TOCInline toc={toc} maxHeadingLevel={2} />\\n\\n## Authentication\\n\\nFlet authentication features:\\n\\n* Works with Flet desktop, web and mobile apps.\\n* Using multiple authentication providers in one app.\\n* Built-in OAuth providers with automatic user details fetching:\\n  * GitHub\\n  * Azure\\n  * Google\\n  * Auth0\\n* Optional groups fetching.\\n* Automatic token refresh.\\n* Login with a saved token (\\"Remember me\\").\\n* Custom OAuth providers.\\n\\nA simple example on how to add \\"Login with GitHub\\" button to your Flet app:\\n\\n```python\\nimport os\\n\\nimport flet as ft\\nfrom flet.auth.providers.github_oauth_provider import GitHubOAuthProvider\\n\\ndef main(page: ft.Page):\\n\\n    provider = GitHubOAuthProvider(\\n        client_id=os.getenv(\\"GITHUB_CLIENT_ID\\"),\\n        client_secret=os.getenv(\\"GITHUB_CLIENT_SECRET\\"),\\n        redirect_url=\\"http://localhost:8550/api/oauth/redirect\\",\\n    )\\n\\n    def login_click(e):\\n        page.login(provider)\\n\\n    def on_login(e):\\n        print(\\"Access token:\\", page.auth.token.access_token)\\n        print(\\"User ID:\\", page.auth.user.id)\\n\\n    page.on_login = on_login\\n    page.add(ft.ElevatedButton(\\"Login with GitHub\\", on_click=login_click))\\n\\nft.app(target=main, port=8550, view=ft.AppView.WEB_BROWSER)\\n```\\n\\n:::note\\nBefore running the app set the secret environment variables in a command line:\\n\\n```\\n$ export GITHUB_CLIENT_ID=\\"<client_id>\\"\\n$ export GITHUB_CLIENT_SECRET=\\"<client_secret>\\"\\n```\\n:::\\n\\n[Read Authentication guide for more information and examples](/docs/guides/python/authentication).\\n\\n## Client storage\\n\\nFlet\'s client storage API that allows storing key-value data on a client side in a persistent storage. Flet implementation uses [`shared_preferences`](https://pub.dev/packages/shared_preferences) Flutter package.\\n\\nWriting data to the storage:\\n\\n```python\\npage.client_storage.set(\\"key\\", \\"value\\")\\n```\\n\\nReading data:\\n\\n```python\\nvalue = page.client_storage.get(\\"key\\")\\n```\\n\\n[Read Client storage guide for more information and examples](/docs/guides/python/client-storage).\\n\\n## Session storage\\n\\nFlet introduces an API for storing key-value data in user\'s session on a server side.\\n\\nWriting data to the session:\\n\\n```python\\npage.session.set(\\"key\\", \\"value\\")\\n```\\n\\nReading data:\\n\\n```python\\nvalue = page.session.get(\\"key\\")\\n```\\n\\n[Read Session storage guide for more information and examples](/docs/guides/python/session-storage)\\n\\n## Encryption API\\n\\nIn this release Flet introduces utility methods to encrypt and decrypt sensitive text data using symmetric algorithm (where the same key is used for encryption and decryption). It uses [Fernet](https://github.com/fernet/spec/blob/master/Spec.md) implementation from [cryptography](https://pypi.org/project/cryptography/) package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase.\\n\\nEncrypting data:\\n\\n```python\\nfrom flet.security import encrypt, decrypt\\nsecret_key = \\"S3CreT!\\"\\nplain_text = \\"This is a secret message!\\"\\nencrypted_data = encrypt(plain_text, secret_key)\\n```\\n\\nDecrypting data:\\n\\n```python\\nfrom flet.security import encrypt, decrypt\\nsecret_key = \\"S3CreT!\\"\\nplain_text = decrypt(encrypted_data, secret_key)\\nprint(plain_text)\\n```\\n\\n[Continue reading for more information and examples](/docs/guides/python/encrypting-sensitive-data).\\n\\n## Other improvements\\n\\n* SVG image support ([example](https://github.com/flet-dev/examples/blob/main/python/controls/image/svg-image.py)) and new images properties:\\n  * [`Image.color`](/docs/controls/image#color)\\n  * [`Image.color_blend_mode`](/docs/controls/image#color_blend_mode)\\n  * [`Image.semantics_label`](/docs/controls/image#semantics_label)\\n  * [`Image.gapless_playback`](/docs/controls/image#gapless_playback)\\n* [`on_animation_end` callback](/docs/guides/python/animations#animation-end-callback) to chain animations.\\n* [`Container.clip_behavior` property](/docs/controls/container#clip_behavior).\\n* [`page.window_bgcolor`](/docs/controls/page#window_bgcolor) to make cool transparent app window:\\n\\n```python\\nimport flet as ft\\ndef main(page: ft.Page):\\n    page.window_bgcolor = ft.colors.TRANSPARENT\\n    page.bgcolor=ft.colors.TRANSPARENT\\n    page.window_title_bar_hidden = True\\n    page.window_frameless = True\\n    page.window_left = 400\\n    page.window_top = 400\\n    page.add(ft.ElevatedButton(\\"I\'m a floating button!\\"))\\nft.app(target=main)\\n```\\n\\n* [`page.get_clipboard()`](/docs/controls/page#get_clipboard)\\n* [`page.launch_url()`](/docs/controls/page#launch_urlurl) - better control with additional arguments:\\n    * `web_window_name` - window tab/name to open URL in: `_self` - the same tab, `_blank` - a new tab or `<your name>` - a named tab.\\n    * `web_popup_window` - set to `True` to display a URL in a browser popup window. Default is `False`.\\n    * `window_width` - optional, popup window width.\\n    * `window_height` - optional, popup window height.\\n* [`page.window_to_front()`](/docs/controls/page#window_to_front)\\n* [`page.close_in_app_web_view()`](/docs/controls/page#close_in_app_web_view)\\n\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"file-picker-and-uploads","metadata":{"permalink":"/website/blog/file-picker-and-uploads","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-09-02-file-picker-and-uploads.md","source":"@site/blog/2022-09-02-file-picker-and-uploads.md","title":"File picker and uploads","description":"Finally, File picker with uploads has arrived! \ud83c\udf89","date":"2022-09-02T00:00:00.000Z","formattedDate":"September 2, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":3.79,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"file-picker-and-uploads","title":"File picker and uploads","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"User authentication","permalink":"/website/blog/user-authentication"},"nextItem":{"title":"Fun with animations","permalink":"/website/blog/fun-with-animations"}},"content":"Finally, File picker with uploads has arrived! \ud83c\udf89\\n\\nFile picker control opens a native OS dialog for selecting files and directories. It\'s based on a fantastic [file_picker](https://pub.dev/packages/file_picker) Flutter package.\\n\\nIt works on all platforms: Web, macOS, Window, Linux, iOS and Android.\\n\\n<img src=\\"/img/docs/controls/file-picker/file-picker-all-modes-demo.png\\" className=\\"screenshot-80\\" />\\n\\nCheck out [source code of the demo above](https://github.com/flet-dev/examples/blob/main/python/controls/file-picker/file-picker-all-modes.py).\\n\\nFile picker allows opening three dialogs:\\n\\n* **Pick files** - one or multiple, any files or only specific types.\\n* **Save file** - choose directory and file name.\\n* **Get directory** - select directory.\\n\\nWhen running Flet app in a browser only \\"Pick files\\" option is available and it\'s used for uploads only as it, obviously, doesn\'t return a full path to a selected file.\\n\\nWhere file picker really shines is a desktop! All three dialogs return full paths to selected files and directories - great assistance to your users!\\n\\n## Using file picker in your app\\n\\nIt is recommended to add file picker to [`page.overlay.controls`](/docs/controls/page#overlay) collection, so it doesn\'t affect the layout of your app. Despite file picker has 0x0 size it is still considered as a control when put into `Row` or `Column`.\\n\\n```python\\nimport flet as ft\\n\\nfile_picker = ft.FilePicker()\\npage.overlay.append(file_picker)\\npage.update()\\n```\\n\\nTo open file picker dialog call one of the three methods:\\n\\n* `pick_files()`\\n* `save_file()`\\n* `get_directory_path()`\\n\\nLambda works pretty nice for that:\\n\\n```python\\nft.ElevatedButton(\\"Choose files...\\",\\n    on_click=lambda _: file_picker.pick_files(allow_multiple=True))\\n```\\n\\nWhen dialog is closed `FilePicker.on_result` event handler is called which event object has one of the following properties set:\\n\\n* `files` - \\"Pick files\\" dialog only, a list of selected files or `None` if dialog was cancelled.\\n* `path` - \\"Save file\\" and \\"Get directory\\" dialogs, a full path to a file or directory or `None` if dialog was cancelled.\\n\\n```python\\nimport flet as ft\\n\\ndef on_dialog_result(e: ft.FilePickerResultEvent):\\n    print(\\"Selected files:\\", e.files)\\n    print(\\"Selected file or directory:\\", e.path)\\n\\nfile_picker = ft.FilePicker(on_result=on_dialog_result)\\n```\\n\\nThe last result is always available in `FilePicker.result` property.\\n\\nCheck [File picker](/docs/controls/filepicker) control docs for all available dialog methods and their parameters.\\n\\n## Uploading files\\n\\nFile picker has built-in upload capabilities that work on all platforms and the web.\\n\\nTo upload one or more files you should call `FilePicker.pick_files()` first.\\nWhen the files are selected by the user they are not automatically uploaded anywhere, but instead their references are kept in the file picker state.\\n\\nTo perform an actual upload you should call `FilePicker.upload()` method and pass the list of files that need to be uploaded along with their upload URLs and upload method (`PUT` or `POST`):\\n\\n```python\\nimport flet as ft\\n\\ndef upload_files(e):\\n    upload_list = []\\n    if file_picker.result != None and file_picker.result.files != None:\\n        for f in file_picker.result.files:\\n            upload_list.append(\\n                FilePickerUploadFile(\\n                    f.name,\\n                    upload_url=page.get_upload_url(f.name, 600),\\n                )\\n            )\\n        file_picker.upload(upload_list)\\n\\nft.ElevatedButton(\\"Upload\\", on_click=upload_files)\\n```\\n\\n:::note\\nIf you need to separate uploads for each user you can specify a filename prepended with any number of directories in `page.get_upload_url()` call, for example:\\n\\n```python\\nupload_url = page.get_upload_url(f\\"/{username}/pictures/{f.name}\\", 600)\\n```\\n\\n`/{username}/pictures` directories will be automatically created inside `upload_dir` if not exist.\\n:::\\n\\n### Upload storage\\n\\nNotice the usage of `page.get_upload_url()` method - it generates a presigned upload URL for Flet\'s internal upload storage.\\n\\n:::note Use any storage for file uploads\\nYou can [generate presigned upload URL](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html#generating-a-presigned-url-to-upload-a-file) for AWS S3 storage using boto3 library.\\n\\nThe same technique should work for [Wasabi](https://wasabi.com/), [Backblaze](https://www.backblaze.com/), [MinIO](https://min.io/) and any other  storage providers with S3-compatible API.\\n:::\\n\\nTo enable Flet saving uploaded files to a directory provide full or relative path to that directory in `flet.app()` call:\\n\\n```python\\nft.app(target=main, upload_dir=\\"uploads\\")\\n```\\n\\nYou can even put uploads inside \\"assets\\" directory, so uploaded files, e.g. pictures, docs or other media, can be accessed from a Flet client right away:\\n\\n```python\\nft.app(target=main, assets_dir=\\"assets\\", upload_dir=\\"assets/uploads\\")\\n```\\n\\nand somewhere in your app you can display uploaded picture with:\\n\\n```python\\npage.add(ft.Image(src=\\"/uploads/<some-uploaded-picture.png>\\"))\\n```\\n\\n### Upload progress\\n\\nOnce `FilePicker.upload()` method is called Flet client asynchronously starts uploading selected files one-by-one and reports the progress via `FilePicker.on_upload` callback.\\n\\nEvent object of `on_upload` event is an instance of `FilePickerUploadEvent` class with the following fields:\\n\\n* `file_name`\\n* `progress` - a value from `0.0` to `1.0`.\\n* `error`\\n\\nThe callback is called at least twice for every uploaded file: with `0` progress before upload begins and with `1.0` progress when upload is finished. For files larger than 1 MB a progress is additionally reported for every 10% uploaded.\\n\\nCheck that [example](https://github.com/flet-dev/examples/blob/main/python/controls/file-picker/file-picker-upload-progress.py) demonstrating multiple file uploads:\\n\\n<img src=\\"/img/docs/controls/file-picker/file-picker-multiple-uploads.png\\" className=\\"screenshot-40\\" />\\n\\nSee [File picker](/docs/controls/filepicker) control docs for all its properties and examples.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give File Picker a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"fun-with-animations","metadata":{"permalink":"/website/blog/fun-with-animations","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-21-fun-with-animations.md","source":"@site/blog/2022-08-21-fun-with-animations.md","title":"Fun with animations","description":"Despite Flet release debuting animations support was released some time ago, we\'ve just finished documenting its new features! We all know if the feature is not documented it just doesn\'t exist! \ud83d\ude09","date":"2022-08-21T00:00:00.000Z","formattedDate":"August 21, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":1.72,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"fun-with-animations","title":"Fun with animations","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"File picker and uploads","permalink":"/website/blog/file-picker-and-uploads"},"nextItem":{"title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","permalink":"/website/blog/gradients-button-textfield-styles"}},"content":"Despite Flet release debuting animations support was released some time ago, we\'ve just finished documenting its new features! We all know if the feature is not documented it just doesn\'t exist! \ud83d\ude09\\n\\nFlutter offers [multiple approaches](https://docs.flutter.dev/development/ui/animations) for creating animations such \\"implicit\\", \\"explicit\\", \\"tween\\", \\"stagered\\", \\"pre-canned\\" animations as well as displaying animation scenes prepared in Rive and Lottie editors.\\n\\nWe are starting with \\"implicit\\" animations which allows you to animate a control property by setting a target value; whenever that target value changes, the control animates the property from the old value to the new one.\\n\\n## Demo time\\n\\n<div style={{fontSize: \\"1.1rem\\", textAlign: \\"center\\", padding: \\"1rem\\" }}>\\n<a href=\\"https://flet-animation.herokuapp.com/\\">Check out this live demo!</a>\\n</div>\\n\\n<a href=\\"https://flet-animation.herokuapp.com/\\"><img src=\\"/img/blog/animations/flet-animation-demo.gif\\" className=\\"screenshot-100\\" /></a>\\n\\n[Explore demo sources](https://github.com/flet-dev/flet-heroku-app). The demo is hosted on Heroku, by the way, so you can use it as a starting point for your own deployments.\\n\\n## Implicit animations\\n\\nImplicit animations can be enabled for the following control properties:\\n\\n* [Opacity](/docs/guides/python/animations#opacity-animation)\\n* [Rotation](/docs/guides/python/animations#rotation-animation) (new in this release)\\n* [Scale](/docs/guides/python/animations#scale-animation) (new in this release)\\n* [Offset](/docs/guides/python/animations#offset-animation) (new in this release)\\n* [Position](/docs/guides/python/animations#position-animation)\\n\\nAdditionally, all `Container` control properties [can be now animated](/docs/guides/python/animations#animated-container) and there is a new [`AnimatedSwitcher`](/docs/controls/animatedswitcher) control for animated transition between old a new content.\\n\\n<img src=\\"/img/docs/controls/animated-switcher/animated-switcher.gif\\" className=\\"screenshot-20\\" />\\n\\n## Other new features\\n\\n### `Markdown` control\\n\\nAllows to render text in Markdown format. Supports various extensions: `CommonMark`, `GitHub Web` and `GitHub Flavored`.\\n\\n[See `Markdown` control docs](/docs/controls/markdown) for more information and examples.\\n\\n### URL launcher\\n\\n`page.launch_url(url)` method allows programmatically opening a URL in a new browser window, for example:\\n\\n```python\\npage.launch_url(\\"https://google.com\\")\\n```\\n\\nIt also works nice with `Markdown` control for opening links within markdown document.\\n\\n### Keyboard shortcuts\\n\\n`Page` now contains [`on_keyboard_event`](/docs/controls/page#on_keyboard_event) event handlet to globally intercept all keystrokes.\\n\\nCheck this [simple usage example](https://github.com/flet-dev/examples/blob/main/python/controls/page/keyboard-events.py).\\n\\n### Accessibility improvements\\n\\nWe added [Accessibility](/docs/guides/python/accessibility) section to the docs covering semantics support for screen readers.\\n\\n### `ShaderMark` control\\n\\nA control that applies a mask generated by a shader to its content. Allows making nice effects like [gradually fading out images](/docs/controls/shadermask#gradually-fade-out-image-to-the-bottom-edge).\\n\\nThat\'s it!\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"gradients-button-textfield-styles","metadata":{"permalink":"/website/blog/gradients-button-textfield-styles","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-04-gradients-button-textfield-styles.md","source":"@site/blog/2022-08-04-gradients-button-textfield-styles.md","title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","description":"We\'ve just released Flet 0.1.46 adding new exciting features:","date":"2022-08-04T00:00:00.000Z","formattedDate":"August 4, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":3.38,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"gradients-button-textfield-styles","title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Fun with animations","permalink":"/website/blog/fun-with-animations"},"nextItem":{"title":"Control Refs","permalink":"/website/blog/control-refs"}},"content":"We\'ve just released [Flet 0.1.46](https://pypi.org/project/flet/0.1.46/) adding new exciting features:\\n\\n* Gradient backgrounds in Container\\n* Extensive styling for buttons, TextField and Dropdown controls\\n* ...and more\\n\\n## Gradient backgrounds\\n\\n### Linear gradient\\n\\n<img src=\\"/img/blog/gradients/linear-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport math\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=ft.LinearGradient(\\n                begin=ft.alignment.top_left,\\n                end=Alignment(0.8, 1),\\n                colors=[\\n                    \\"0xff1f005c\\",\\n                    \\"0xff5b0060\\",\\n                    \\"0xff870160\\",\\n                    \\"0xffac255e\\",\\n                    \\"0xffca485c\\",\\n                    \\"0xffe16b5c\\",\\n                    \\"0xfff39060\\",\\n                    \\"0xffffb56b\\",\\n                ],\\n                tile_mode=ft.GradientTileMode.MIRROR,\\n                rotation=math.pi / 3,\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`Container.gradient`](/docs/controls/container#lineargradient) docs for more information about `LinearGradient` properties.\\n\\n### Radial gradient\\n\\n<img src=\\"/img/blog/gradients/radial-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=ft.RadialGradient(\\n                center=Alignment(0.7, -0.6),\\n                radius=0.2,\\n                colors=[\\n                    \\"0xFFFFFF00\\",  # yellow sun\\n                    \\"0xFF0099FF\\",  # blue sky\\n                ],\\n                stops=[0.4, 1.0],\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`Container.gradient`](/docs/controls/container#radialgradient) docs for more information about `RadialGradient` properties.\\n\\n### Sweep gradient\\n\\n<img src=\\"/img/blog/gradients/sweep-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport math\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=SweepGradient(\\n                center=ft.alignment.center,\\n                start_angle=0.0,\\n                end_angle=math.pi * 2,\\n                colors=[\\n                    \\"0xFF4285F4\\",\\n                    \\"0xFF34A853\\",\\n                    \\"0xFFFBBC05\\",\\n                    \\"0xFFEA4335\\",\\n                    \\"0xFF4285F4\\",\\n                ],\\n                stops=[0.0, 0.25, 0.5, 0.75, 1.0],\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`Container.gradient`](/docs/controls/container#sweepgradient) docs for more information about `SweepGradient` properties.\\n\\n## Buttons styling\\n\\nThis Flet release introduces `style` property to all button controls which is an instance of `ButtonStyle` class.\\n`ButtonStyle` allows controling all visual aspects of a button, such as shape, foreground, background and shadow colors, content padding, border width and radius!\\n\\nMoreover, each individual style attribute could be configured for a different \\"Material states\\" of a button, such as \\"hovered\\", \\"focused\\", \\"disabled\\" and others. For example, you can configure a different shape, background color for a hovered state and configure fallback values for all other states.\\n\\nCheck this \\"extreme\\" styling example:\\n\\n<img src=\\"/img/blog/gradients/styled-button.gif\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\nfrom flet.border import BorderSide\\nfrom flet.buttons import RoundedRectangleBorder\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.ElevatedButton(\\n            \\"Styled button 1\\",\\n            style=ft.ButtonStyle(\\n                color={\\n                    ft.MaterialState.HOVERED: ft.colors.WHITE,\\n                    ft.MaterialState.FOCUSED: ft.colors.BLUE,\\n                    ft.MaterialState.DEFAULT: ft.colors.BLACK,\\n                },\\n                bgcolor={ft.MaterialState.FOCUSED: ft.colors.PINK_200, \\"\\": ft.colors.YELLOW},\\n                padding={ft.MaterialState.HOVERED: 20},\\n                overlay_color=ft.colors.TRANSPARENT,\\n                elevation={\\"pressed\\": 0, \\"\\": 1},\\n                animation_duration=500,\\n                side={\\n                    ft.MaterialState.DEFAULT: BorderSide(1, ft.colors.BLUE),\\n                    ft.MaterialState.HOVERED: BorderSide(2, ft.colors.BLUE),\\n                },\\n                shape={\\n                    ft.MaterialState.HOVERED: RoundedRectangleBorder(radius=20),\\n                    ft.MaterialState.DEFAULT: RoundedRectangleBorder(radius=2),\\n                },\\n            ),\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n`ft.MaterialState.DEFAULT` state is a fallback style.\\n\\nButton shape could also be changed with `ButtonStyle.shape` property:\\n\\n<img src=\\"/img/blog/gradients/button-shapes.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\nfrom flet.buttons import (\\n    BeveledRectangleBorder,\\n    CircleBorder,\\n    CountinuosRectangleBorder,\\n    RoundedRectangleBorder,\\n    StadiumBorder,\\n)\\n\\ndef main(page: ft.Page):\\n    page.padding = 30\\n    page.spacing = 30\\n    page.add(\\n        ft.FilledButton(\\n            \\"Stadium\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.StadiumBorder(),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Rounded rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.RoundedRectangleBorder(radius=10),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Continuous rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.CountinuosRectangleBorder(radius=30),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Beveled rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.BeveledRectangleBorder(radius=10),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Circle\\",\\n            style=ft.ButtonStyle(shape=ft.CircleBorder(), padding=30),\\n        ),\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`ElevatedButton.style`](/docs/controls/elevatedbutton#style) property docs for a complete description of `ButtonStyle` class and its properties.\\n\\n## TextField and Dropdown styling\\n\\nIt is now possible to configure text size, border style and corners radius for normal and focused states of `TextField` and `Dropdown` controls. `TextField` also allows configuring colors for a cursor and selection.\\n\\nAdditionally, the maximum length of entered into `TextField` can now be limited with `max_length` property.\\n\\nWe also introduced `capitalization` property for automatic capitalization of characters as you type them into `TextField`. You can choose from 4 capitalization strategies: `none` (default), `characters`, `words` and `sentences`.\\n\\nAn example of styled `TextField` with `max_length` and `capitalization`:\\n\\n<img src=\\"/img/blog/gradients/styled-textfield.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.padding = 50\\n    page.add(\\n        ft.TextField(\\n            text_size=30,\\n            cursor_color=ft.colors.RED,\\n            selection_color=ft.colors.YELLOW,\\n            color=ft.colors.PINK,\\n            bgcolor=ft.colors.BLACK26,\\n            filled=True,\\n            focused_color=ft.colors.GREEN,\\n            focused_bgcolor=ft.colors.CYAN_200,\\n            border_radius=30,\\n            border_color=ft.colors.GREEN_800,\\n            focused_border_color=ft.colors.GREEN_ACCENT_400,\\n            max_length=20,\\n            capitalization=\\"characters\\",\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nAn example of styled `Dropdown` control:\\n\\n<img src=\\"/img/blog/gradients/styled-dropdown.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.padding = 50\\n    page.add(\\n        ft.Dropdown(\\n            options=[\\n                ft.dropdown.Option(\\"a\\", \\"Item A\\"),\\n                ft.dropdown.Option(\\"b\\", \\"Item B\\"),\\n                ft.dropdown.Option(\\"c\\", \\"Item C\\"),\\n            ],\\n            border_radius=30,\\n            filled=True,\\n            border_color=ft.colors.TRANSPARENT,\\n            bgcolor=ft.colors.BLACK12,\\n            focused_bgcolor=ft.colors.BLUE_100,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n## Other changes\\n\\n`IconButton` got `selected` state which plays nice with a new `style`.\\n\\nThis is an example of a toggle icon button:\\n\\n<img src=\\"/img/blog/gradients/toggle-icon-button.gif\\" className=\\"screenshot-20\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    def toggle_icon_button(e):\\n        e.control.selected = not e.control.selected\\n        e.control.update()\\n\\n    page.add(\\n        ft.IconButton(\\n            icon=ft.icons.BATTERY_1_BAR,\\n            selected_icon=ft.icons.BATTERY_FULL,\\n            on_click=toggle_icon_button,\\n            selected=False,\\n            style=ft.ButtonStyle(color={\\"selected\\": ft.colors.GREEN, \\"\\": ft.colors.RED}),\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"control-refs","metadata":{"permalink":"/website/blog/control-refs","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-03-control-refs.md","source":"@site/blog/2022-08-03-control-refs.md","title":"Control Refs","description":"Flet controls are objects and to access their properties we need to keep references (variables) to those objects.","date":"2022-08-03T00:00:00.000Z","formattedDate":"August 3, 2022","tags":[{"label":"how-to","permalink":"/website/blog/tags/how-to"}],"readingTime":2.065,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"control-refs","title":"Control Refs","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["how-to"]},"prevItem":{"title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","permalink":"/website/blog/gradients-button-textfield-styles"},"nextItem":{"title":"Flet Mobile Strategy","permalink":"/website/blog/flet-mobile-strategy"}},"content":"Flet controls are objects and to access their properties we need to keep references (variables) to those objects.\\n\\nConsider the following example:\\n\\n```python {6-8,18,19,21}\\nimport flet as ft\\n\\ndef main(page):\\n\\n    first_name = ft.TextField(label=\\"First name\\", autofocus=True)\\n    last_name = ft.TextField(label=\\"Last name\\")\\n    greetings = ft.Column()\\n\\n    def btn_click(e):\\n        greetings.controls.append(ft.Text(f\\"Hello, {first_name.value} {last_name.value}!\\"))\\n        first_name.value = \\"\\"\\n        last_name.value = \\"\\"\\n        page.update()\\n        first_name.focus()\\n\\n    page.add(\\n        first_name,\\n        last_name,\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        greetings,\\n    )\\n\\nft.app(target=main)\\n```\\n\\nIn the very beginning of `main()` method we create three controls which we are going to use in button\'s `on_click` handler: two `TextField` for first and last names and a `Column` - container for greeting messages. We create controls with all their properties set and in the end of `main()` method, in `page.add()` call, we use their references (variables).\\n\\nWhen more and mode controls and event handlers added it becomes challenging to keep all control definitions in one place, so they become scattered across `main()` body. Glancing at `page.add()` parameters it\'s hard to imagine (without constant jumping to variable definitions in IDE) what would the end form look like:\\n\\n```python {2-5}\\n    page.add(\\n        first_name,\\n        last_name,\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        greetings,\\n    )\\n```\\n\\nIs `first_name` a TextField, does it have autofocus set? Is greetings a `Row` or a `Column`?\\n\\n## `Ref` class\\n\\nFlet provides `Ref` utility class which allows to define a reference to the control, use that reference in event handlers and set the reference to a real control later, while building a tree. The idea comes from [React](https://reactjs.org/docs/refs-and-the-dom.html).\\n\\nTo define a new typed control reference:\\n\\n```python\\nfirst_name = ft.Ref[ft.TextField]()\\n```\\n\\nTo access referenced control (control de-reference) use `Ref.current` property:\\n\\n```python\\n# empty first name\\nfirst_name.current.value = \\"\\"\\n```\\n\\nTo assign control to a reference set `Control.ref` property to a reference:\\n\\n```python {2}\\npage.add(\\n    ft.TextField(ref=first_name, label=\\"First name\\", autofocus=True)\\n)\\n```\\n\\n:::note\\nAll Flet controls have `ref` property.\\n:::\\n\\nWe could re-write our program to use references:\\n\\n```python {7-9,21-24}\\nimport flet as ft\\n\\n\\ndef main(page):\\n\\n    first_name = ft.Ref[ft.TextField]()\\n    last_name = ft.Ref[ft.TextField]()\\n    greetings = ft.Ref[ft.Column]()\\n\\n    def btn_click(e):\\n        greetings.current.controls.append(\\n            ft.Text(f\\"Hello, {first_name.current.value} {last_name.current.value}!\\")\\n        )\\n        first_name.current.value = \\"\\"\\n        last_name.current.value = \\"\\"\\n        page.update()\\n        first_name.current.focus()\\n\\n    page.add(\\n        ft.TextField(ref=first_name, label=\\"First name\\", autofocus=True),\\n        ft.TextField(ref=last_name, label=\\"Last name\\"),\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        ft.Column(ref=greetings),\\n    )\\n\\nft.app(target=main)\\n```\\n\\nNow we can clearly see in `page.add()` the structure of the page and all the controls it\'s built of.\\n\\nYes, the logic becomes a little bit more verbose as you need to add `.current.` to access ref\'s control, but it\'s a matter of personal preference :)\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-mobile-strategy","metadata":{"permalink":"/website/blog/flet-mobile-strategy","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-24-flet-mobile-strategy.md","source":"@site/blog/2022-07-24-flet-mobile-strategy.md","title":"Flet Mobile Strategy","description":"Flet project has received a lot of attention recently and we would like to thank all the developers who tried Flet and have been spreading the word about it in the communities! Your support motivates us to move Flet project forward with faster pace!","date":"2022-07-24T00:00:00.000Z","formattedDate":"July 24, 2022","tags":[{"label":"product","permalink":"/website/blog/tags/product"}],"readingTime":3.205,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-mobile-strategy","title":"Flet Mobile Strategy","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["product"]},"prevItem":{"title":"Control Refs","permalink":"/website/blog/control-refs"},"nextItem":{"title":"Navigation and Routing","permalink":"/website/blog/navigation-and-routing"}},"content":"Flet project has received a lot of attention recently and we would like to thank all the developers who tried Flet and have been spreading the word about it in the communities! Your support motivates us to move Flet project forward with faster pace!\\n\\nNew Flet developers are constantly asking if there is a way to package Flet program to an `.apk` file to deploy to Android devices or `.ipa` to deploy to iOS.\\n\\nIn this post I would like to share our vision for Flet going mobile and provide a roadmap.\\n\\n## Server-Driven UI\\n\\nFlet is a Server-driven UI (SDUI) framework. SDUI is an emerging technology which is the best described in [Technology Radar post](https://www.thoughtworks.com/en-ca/radar/techniques/server-driven-ui):\\n\\n> Server-driven UI separates the rendering into a generic container in the mobile app while the structure and data for each view is provided by the server. This means that changes that once required a round trip to an app store can now be accomplished via simple changes to the responses the server sends.\\n\\nCompanies like [DoorDash](https://doordash.engineering/2021/08/24/improving-development-velocity-with-generic-server-driven-ui-components/), [Airbnb](https://medium.com/airbnb-engineering/a-deep-dive-into-airbnbs-server-driven-ui-system-842244c5f5), [Lyft](https://podcasts.apple.com/us/podcast/server-driven-ui-with-kevin-fang-jeff-hurray/id1453587931?i=1000509742062) and others have been successfully implementing Server-driven UI in their mobile apps to reduce time-to-market.\\n\\n### Flet approach\\n\\nFlet is going to implement Server-Driven UI approach where program written in Python or other language is running on the server and only a thin client - either standalone Flutter app (`.apk` or `.ipa` package) in app store or a Flutter widget as a part of another app - is delivered to a mobile:\\n\\n<img src=\\"/img/docs/getting-started/flet-highlevel-diagram.svg\\" className=\\"screenshot-100\\" />\\n\\nOnce SDUI experience is ready we\'ll start working on a [standalone mobile package](#standalone-mobile-package-for-flet-app).\\n\\n## Roadmap\\n\\nTo provide the best experience for Flet apps on mobile platforms, we plan to release the following items by the end of this year:\\n\\n### Flet widget for Flutter\\n\\nThe first step we are going to do is to separate Flet client into a Flutter widget and publish the package at https://pub.dev.\\nFlet widget could be then integrated by mobile developers into existing or new Flutter apps for adding dynamic server-driven UI experiences to the core app functionality. A new Flutter app could be also created with a single Flet widget just for the purpose of hosting a complete Flet app.\\n\\nDevelopers will follow Flutter guide for packaging, signing and distributing their apps to [Android](https://docs.flutter.dev/deployment/android), [iOS](https://docs.flutter.dev/deployment/ios), [Linux](https://docs.flutter.dev/deployment/linux), [macOS](https://docs.flutter.dev/deployment/macos) or [Windows](https://docs.flutter.dev/deployment/windows) platforms.\\n\\nFlet team will provide sample CI pipelines to automate packaging, signing and publishing of Flutter apps.\\n\\n### Flet Studio for iOS and Android\\n\\nThe next step is a standalone \\"Flet Studio\\" app (the name is not final) in App Store and Google Play for \\"testing mobile experiences developed with Flet framework\\". Developers or beta testers will be able to \\"register\\" URL of their hosted Flet app within Flet Studio and instantly see how it performs on a mobile device.\\n\\n### White-labeled Flet mobile app\\n\\nWe are going to provide a guide and CI pipeline for automatic publishing of white-labeled Flet app to a user App Store or Google Play account. This app will be \\"pinned\\" to a specific app URL and could additionally bundle app assets (media, fonts) to minimize network usage.\\n\\n### Standalone mobile package for Flet app\\n\\nWe are going to investigate the way and develop a prototype for bundling together Flet framework, user program, language runtime and all dependencies into a standalone mobile package (`.apk` or `.ipa` package), so Flet program does not require a web server.\\n\\n### Embedding Flet into native apps\\n \\nWe are going to provide a guide, sample apps and CI pipeline to integrate Flet widget into existing native Android and iOS apps (not developed with Flutter) using [Flutter Add-to-App](https://docs.flutter.dev/development/add-to-app) feature. [Put Flutter to work](https://medium.com/flutter/put-flutter-to-work-95f5fdcc592e) article gives a real-world example on how to integrate Flutter into existing mobile app.\\n\\nThis is the current plan.\\n\\nIn the meantime, [give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"navigation-and-routing","metadata":{"permalink":"/website/blog/navigation-and-routing","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-23-navigation-and-routing.md","source":"@site/blog/2022-07-23-navigation-and-routing.md","title":"Navigation and Routing","description":"Flet 0.1.42 has been released with navigation and routing!","date":"2022-07-23T00:00:00.000Z","formattedDate":"July 23, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":4.025,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"navigation-and-routing","title":"Navigation and Routing","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Flet Mobile Strategy","permalink":"/website/blog/flet-mobile-strategy"},"nextItem":{"title":"New release: Drag and Drop, absolute positioning and clickable container","permalink":"/website/blog/drag-and-drop-release"}},"content":"[Flet 0.1.42](https://pypi.org/project/flet/0.1.42/) has been released with navigation and routing!\\n\\nNavigation and routing is an essential feature of Single Page Applications (SPA) which allows organizing application user interface into virtual pages (views) and \\"navigate\\" between them while application URL reflects the current state of the app.\\n\\nFor mobile apps navigation and routing serves as a [deep linking](https://docs.flutter.dev/development/ui/navigation/deep-linking) to specific application parts.\\n\\nWell, it took [more efforts](https://github.com/flet-dev/flet/pull/95/files) than expected to add navigation and routing into Flet as the implementation is based on [Navigator 2.0](https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade) Flutter API and required to replace Flet\'s \\"Page\\" abstraction with \\"Page and Views\\". Flutter\'s newer navigation and routing API has substantial improvements such as:\\n\\n1. Programmatic control over history stack.\\n2. An easy way to intercept a call to \\"Back\\" button in AppBar.\\n3. Robust synchronization with browser history.\\n\\n<img src=\\"/img/docs/navigation-routing/routing-app-example.gif\\" className=\\"screenshot-60\\" />\\n\\nExplore [source code](https://github.com/flet-dev/examples/blob/main/python/apps/routing-navigation/building-views-on-route-change.py) of the example above.\\n\\n## Page route\\n\\nPage route is a portion of application URL after `#` symbol:\\n\\n<img src=\\"/img/docs/navigation-routing/page-address-route.png\\" className=\\"screenshot-50\\" />\\n\\nDefault application route, if not set in application URL by the user, is `/`. All routes start with `/`, for example `/store`, `/authors/1/books/2`.\\n\\nApplication route can be obtained by reading `page.route` property, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nGrab application URL, open a new browser tab, paste the URL, modify its part after `#` to `/test` and hit enter. You should see \\"Initial route: /test\\".\\n\\nEvery time the route in the URL is changed (by editing the URL or navigating browser history with Back/Forward buttons) Flet calls `page.on_route_change` event handler:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\n    def route_change(route):\\n        page.add(ft.Text(f\\"New route: {route}\\"))\\n\\n    page.on_route_change = route_change\\n    page.update()\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nNow try updating URL hash a few times and then use Back/Forward buttons! You should see a new message added to a page each time the route changes:\\n\\n<img src=\\"/img/docs/navigation-routing/page-route-change-event.gif\\" className=\\"screenshot-60\\" />\\n\\nRoute can be changed programmatically, by updating `page.route` property:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\n    def route_change(route):\\n        page.add(ft.Text(f\\"New route: {route}\\"))\\n\\n    def go_store(e):\\n        page.route = \\"/store\\"\\n        page.update()\\n\\n    page.on_route_change = route_change\\n    page.add(ft.ElevatedButton(\\"Go to Store\\", on_click=go_store))\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nClick \\"Go to Store\\" button and you\'ll see application URL is changed and a new item is pushed in a browser history. You can use browser \\"Back\\" button to navigate to a previous route.\\n\\n## Page views\\n\\nFlet\'s [Page](/docs/controls/page) now is not just a single page, but a container for [View](/docs/controls/view) layered on top of each other like a sandwich:\\n\\n<img src=\\"/img/docs/navigation-routing/page-views.svg\\" className=\\"screenshot-100\\" />\\n\\nA collection of views represents navigator history. Page has [`page.views`](/docs/controls/page#views) property to access views collection.\\n\\nThe last view in the list is the one currently displayed on a page. Views list must have at least one element (root view).\\n\\nTo simulate a transition between pages change `page.route` and add a new `View` in the end of `page.view` list.\\n\\nPop the last view from the collection and change route to a \\"previous\\" one in [`page.on_view_pop`](/docs/controls/page#on_view_pop) event handler to go back.\\n\\n## Building views on route change\\n\\nTo build a reliable navigation there must be a single place in the program which builds a list of views depending on the current route. Other words, navigation history stack (represented by the list of views) must be a function of a route.\\n\\nThis place is [`page.on_route_change`](/docs/controls/page#on_route_change) event handler.\\n\\nLet\'s put everything together into a complete example which allows navigating between two pages:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Routes Example\\"\\n\\n    def route_change(route):\\n        page.views.clear()\\n        page.views.append(\\n            ft.View(\\n                \\"/\\",\\n                [\\n                    ft.AppBar(title=ft.Text(\\"Flet app\\"), bgcolor=ft.colors.SURFACE_VARIANT),\\n                    ft.ElevatedButton(\\"Visit Store\\", on_click=lambda _: page.go(\\"/store\\")),\\n                ],\\n            )\\n        )\\n        if page.route == \\"/store\\":\\n            page.views.append(\\n                ft.View(\\n                    \\"/store\\",\\n                    [\\n                        ft.AppBar(title=ft.Text(\\"Store\\"), bgcolor=ft.colors.SURFACE_VARIANT),\\n                        ft.ElevatedButton(\\"Go Home\\", on_click=lambda _: page.go(\\"/\\")),\\n                    ],\\n                )\\n            )\\n        page.update()\\n\\n    def view_pop(view):\\n        page.views.pop()\\n        top_view = page.views[-1]\\n        page.go(top_view.route)\\n\\n    page.on_route_change = route_change\\n    page.on_view_pop = view_pop\\n    page.go(page.route)\\n\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nTry navigating between pages using \\"Visit Store\\" and \\"Go Home\\" buttons, Back/Forward browser buttons, manually changing route in the URL - it works no matter what! :)\\n\\n:::note\\nTo \\"navigate\\" between pages we used [`page.go(route)`](/docs/controls/page#goroute) - a helper method that updates [`page.route`](/docs/controls/page#route), calls [`page.on_route_change`](/docs/controls/page#on_route_change) event handler to update views and finally calls `page.update()`.\\n:::\\n\\nNotice the usage of [`page.on_view_pop`](/docs/controls/page#on_view_pop) event handler. It fires when the user clicks automatic \\"Back\\" button in [`AppBar`](/docs/controls/appbar) control. In the handler we remove the last element from views collection and navigate to view\'s root \\"under\\" it.\\n\\n## Route templates\\n\\nFlet offers [`TemplateRoute`](https://github.com/flet-dev/flet/blob/main/sdk/python/flet/template_route.py) - an utility class based on [repath](https://github.com/nickcoutsos/python-repath) library which allows matching ExpressJS-like routes and parsing their parameters, for example `/account/:account_id/orders/:order_id`.\\n\\n`TemplateRoute` plays great with route change event:\\n\\n```python\\ntroute = TemplateRoute(page.route)\\n\\nif troute.match(\\"/books/:id\\"):\\n    print(\\"Book view ID:\\", troute.id)\\nelif troute.match(\\"/account/:account_id/orders/:order_id\\"):\\n    print(\\"Account:\\", troute.account_id, \\"Order:\\", troute.order_id)\\nelse:\\n    print(\\"Unknown route\\")\\n```\\n\\nYou can read more about template syntax supported by `repath` library [here](https://github.com/nickcoutsos/python-repath#parameters).\\n\\nThat\'s all for today!\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"drag-and-drop-release","metadata":{"permalink":"/website/blog/drag-and-drop-release","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-14-drag-and-drop-release.md","source":"@site/blog/2022-07-14-drag-and-drop-release.md","title":"New release: Drag and Drop, absolute positioning and clickable container","description":"We have just released Flet 0.1.41 with drag-and-drop support and other neat features such as absolute positioning of controls inside stack and clickable container!","date":"2022-07-14T00:00:00.000Z","formattedDate":"July 14, 2022","tags":[{"label":"release","permalink":"/website/blog/tags/release"}],"readingTime":1.085,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"drag-and-drop-release","title":"New release: Drag and Drop, absolute positioning and clickable container","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"prevItem":{"title":"Navigation and Routing","permalink":"/website/blog/navigation-and-routing"},"nextItem":{"title":"Using custom fonts in a Flet app","permalink":"/website/blog/using-custom-fonts-in-flet-app"}},"content":"We have just released [Flet 0.1.41](https://pypi.org/project/flet/0.1.41/) with drag-and-drop support and other neat features such as absolute positioning of controls inside stack and clickable container!\\n\\n## Drag and Drop\\n\\nMaking drag-and-drop in Flet is a real joy - thanks to a smart drag-and-drop implementation in Flutter! You just have \\"draggable\\" control which could be dragged to a \\"drag target\\" which calls `on_accept` event handler when draggable is dropped.\\n\\n<img src=\\"/img/docs/controls/drag-and-drop/drag-and-drop-colors.gif\\" className=\\"screenshot-50\\" />\\n\\nTake a look at [Drag-and-Drop example](https://github.com/flet-dev/examples/blob/main/python/controls/drag-and-drop/drag-drop-colors.py).\\n\\nExplore [`Draggable`](/docs/controls/draggable) and [`DragTarget`](/docs/controls/dragtarget) controls, their properties and events.\\n\\n## Absolute positioning inside Stack\\n\\nAll visible controls now have `left` `top`, `right` and `bottom` properties to let them be absolutely positioned inside [`Stack`](/docs/controls/stack), for example:\\n\\n```python {13-17}\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\\n\\n    page.add(\\n        ft.Container(\\n            ft.Stack(\\n                [\\n                    ft.Text(\\"1\\", color=ft.colors.WHITE),\\n                    ft.Text(\\"2\\", color=ft.colors.WHITE, right=0),\\n                    ft.Text(\\"3\\", color=ft.colors.WHITE, right=0, bottom=0),\\n                    ft.Text(\\"4\\", color=ft.colors.WHITE, left=0, bottom=0),\\n                    ft.Text(\\"5\\", color=ft.colors.WHITE, left=40, top=35),\\n                ]\\n            ),\\n            border_radius=8,\\n            padding=5,\\n            width=100,\\n            height=100,\\n            bgcolor=ft.colors.BROWN_700,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n<img src=\\"/img/blog/drag-and-drop/absolute-positioned-numbers.png\\" className=\\"screenshot-30\\" />\\n\\n## Clickable container\\n\\n[`Container`](/docs/controls/container) control has got `on_click` event which allows you to make a button from any control and with a beautiful material ripple effect when `ink` is set to `True`!\\n\\n<img src=\\"/img/docs/controls/container/clickable-container.gif\\" className=\\"screenshot-70\\" />\\n\\nSee [source code](https://github.com/flet-dev/examples/blob/main/python/controls/container/clickable-container.py) for the example above.\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"using-custom-fonts-in-flet-app","metadata":{"permalink":"/website/blog/using-custom-fonts-in-flet-app","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-06-12-using-custom-fonts-in-flet-app.md","source":"@site/blog/2022-06-12-using-custom-fonts-in-flet-app.md","title":"Using custom fonts in a Flet app","description":"You can now use your own fonts in a Flet app!","date":"2022-06-12T00:00:00.000Z","formattedDate":"June 12, 2022","tags":[{"label":"how-to","permalink":"/website/blog/tags/how-to"}],"readingTime":1.59,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"using-custom-fonts-in-flet-app","title":"Using custom fonts in a Flet app","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["how-to"]},"prevItem":{"title":"New release: Drag and Drop, absolute positioning and clickable container","permalink":"/website/blog/drag-and-drop-release"},"nextItem":{"title":"Introducing Flet","permalink":"/website/blog/introducing-flet"}},"content":"You can now use your own fonts in a Flet app!\\n\\nThe following font formats are supported:\\n\\n* `.ttc`\\n* `.ttf`\\n* `.otf`\\n\\nUse [`page.fonts`](/docs/controls/page#fonts) property to import fonts.\\n\\nSet `page.fonts` property to a dictionary where key is the font family name to refer that font and the value is the URL of the font file to import:\\n\\n```python\\ndef main(page: ft.Page):\\n    page.fonts = {\\n        \\"Kanit\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\\",\\n        \\"Aleo Bold Italic\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/aleo/Aleo-BoldItalic.ttf\\"\\n    }\\n    page.update()\\n\\n    # ...\\n```\\n\\nFont can be imported from external resource by providing an absolute URL or from application assets by providing relative URL and `assets_dir`.\\n\\nSpecify `assets_dir` in `flet.app()` call to set the location of assets that should be available to the application. `assets_dir` could be a relative to your `main.py` directory or an absolute path. For example, consider the following program structure:\\n\\n```\\n/assets\\n   /fonts\\n       /OpenSans-Regular.ttf\\nmain.py\\n```\\n\\n## Code sample\\n\\nThe following program loads \\"Kanit\\" font from GitHub and \\"Open Sans\\" from the assets. \\"Kanit\\" is set as a default app font and \\"Open Sans\\" is used for a specific Text control:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Custom fonts\\"\\n\\n    page.fonts = {\\n        \\"Kanit\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\\",\\n        \\"Open Sans\\": \\"fonts/OpenSans-Regular.ttf\\",\\n    }\\n\\n    page.theme = Theme(font_family=\\"Kanit\\")\\n\\n    page.add(\\n        ft.Text(\\"This is rendered with Kanit font\\"),\\n        ft.Text(\\"This is Open Sans font example\\", font_family=\\"Open Sans\\"),\\n    )\\n\\nft.app(target=main, assets_dir=\\"assets\\")\\n```\\n\\n<img src=\\"/img/blog/using-custom-fonts-in-flet-app/custom-fonts-example.png\\" className=\\"screenshot-50\\" />\\n\\n## Static vs Variable fonts\\n\\nAt the moment only [static](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide#standard_or_static_fonts) fonts are supported, i.e. fonts containing only one spacific width/weight/style combination, for example \\"Open Sans Regular\\" or \\"Roboto Bold Italic\\".\\n\\n[Variable](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide#variable_fonts) fonts support is still [work in progress](https://github.com/flutter/flutter/issues/33709).\\n\\nHowever, if you need to use a variable font in your app you can create static \\"instantiations\\" at specific weights using [fonttools](https://pypi.org/project/fonttools/), then use those:\\n\\n    fonttools varLib.mutator ./YourVariableFont-VF.ttf wght=140 wdth=85\\n\\nTo explore available font features (e.g. possible options for `wght`) use [Wakamai Fondue](https://wakamaifondue.com/beta/) online tool.\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"introducing-flet","metadata":{"permalink":"/website/blog/introducing-flet","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-06-02-introducing-flet.md","source":"@site/blog/2022-06-02-introducing-flet.md","title":"Introducing Flet","description":"Today we announce the first release of Flet!","date":"2022-06-02T00:00:00.000Z","formattedDate":"June 2, 2022","tags":[{"label":"news","permalink":"/website/blog/tags/news"},{"label":"product","permalink":"/website/blog/tags/product"}],"readingTime":1.08,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"introducing-flet","title":"Introducing Flet","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news","product"]},"prevItem":{"title":"Using custom fonts in a Flet app","permalink":"/website/blog/using-custom-fonts-in-flet-app"}},"content":"Today we announce the first release of Flet!\\n\\nFlet is a framework for building real-time web, desktop and mobile applications in Python.\\n\\nNo more complex architecture with JavaScript frontend, REST API backend, database, cache, etc. With Flet you just write a monolith stateful app in Python only and get multi-user, realtime Single-Page Application (SPA) or a mobile app.\\n\\nTo start developing with Flet, you just need your favorite IDE or text editor. No SDKs, no thousands of dependencies, no complex tooling - Flet has built-in web server with assets hosting and desktop clients.\\n\\nFlet UI is built with [Flutter](https://flutter.dev), so your app looks professional and can be delivered to any platform. Flet simplifies Flutter model by combining smaller \\"widgets\\" into ready-to-use \\"controls\\" with imperative programming model.\\nYou get all the power of Flutter without having to learn Dart!\\n\\nFlet app is deployed as a regular web app and can be instanly accessed with a browser or installed as a [PWA](https://web.dev/what-are-pwas/) on a mobile device. Web app also exposes an API that can be used by a Flet client (planned for [future releases](/roadmap)) running on iOS and Android and providing native mobile experience.\\n\\nSome examples:\\n\\n* [Greeter](https://github.com/flet-dev/examples/blob/main/python/apps/greeter/greeter.py)\\n* [Counter](https://github.com/flet-dev/examples/blob/main/python/apps/counter/counter.py)\\n* [To-Do](https://github.com/flet-dev/examples/blob/main/python/apps/todo/todo.py)\\n* [Icons Browser](https://github.com/flet-dev/examples/blob/main/python/apps/icons-browser/main.py) ([Online Demo](https://gallery.flet.dev/icons-browser/))\\n\\n[Give Flet a try](/docs/guides/python/getting-started) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"}]}')}}]);