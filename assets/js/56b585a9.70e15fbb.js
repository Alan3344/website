"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[965],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(n),y=a,m=l["".concat(p,".").concat(y)]||l[y]||u[y]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4805:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Encrypting sensitive data",sidebar_label:"Encrypting sensitive data"},p=void 0,c={unversionedId:"guides/python/encrypting-sensitive-data",id:"guides/python/encrypting-sensitive-data",title:"Encrypting sensitive data",description:'Sensitive data such as tokens, keys, credit card numbers and other "secrets" must be stored at rest (database, files, client storage) in encrypted form to avoid data breaches.',source:"@site/docs/guides/python/encrypting-sensitive-data.md",sourceDirName:"guides/python",slug:"/guides/python/encrypting-sensitive-data",permalink:"/website/docs/guides/python/encrypting-sensitive-data",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/guides/python/encrypting-sensitive-data.md",tags:[],version:"current",frontMatter:{title:"Encrypting sensitive data",sidebar_label:"Encrypting sensitive data"},sidebar:"docs",previous:{title:"Session storage",permalink:"/website/docs/guides/python/session-storage"},next:{title:"PubSub",permalink:"/website/docs/guides/python/pub-sub"}},d={},l=[{value:"Secret key",id:"secret-key",level:2},{value:"Encrypting data",id:"encrypting-data",level:2},{value:"Decrypting data",id:"decrypting-data",level:2}],u={toc:l};function y(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'Sensitive data such as tokens, keys, credit card numbers and other "secrets" must be stored at rest (database, files, ',(0,i.kt)("a",{parentName:"p",href:"/docs/guides/python/client-storage"},"client storage"),") in encrypted form to avoid data breaches."),(0,i.kt)("p",null,"Flet includes utility methods to encrypt and decrypt sensitive text data using symmetric algorithm (where the same key is used for encryption and decryption). They use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fernet/spec/blob/master/Spec.md"},"Fernet")," implementation from ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/cryptography/"},"cryptography")," package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase."),(0,i.kt)("h2",{id:"secret-key"},"Secret key"),(0,i.kt)("p",null,'Encryption secret key (aka password, or passphrase) is an arbitrary password-like string configured by a user and used for encrypting and decrypting data. Crypto algorithm uses secret key to "derive" encryption key (32 bytes).'),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Do not embed any secrets into source code to avoid accidential exposure to a public!")),(0,i.kt)("p",null,"You can provide a secret to your app via environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\nsecret_key = os.getenv("MY_APP_SECRET_KEY")\n')),(0,i.kt)("p",null,"Before running the app set the secret in a command line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ export MY_APP_SECRET_KEY="<secret>"\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"While passing secrets via environment variables is a common practice amongst developers and service providers it does not fully prevent secrets leaking in some environments. Other mechanisms can be used\nto inject secrets to your application such as mounting secret files or vault services.")),(0,i.kt)("h2",{id:"encrypting-data"},"Encrypting data"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"encrypt()")," method to encrypt a string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv("MY_APP_SECRET_KEY")\nplain_text = "This is a secret message!"\nencrypted_data = encrypt(plain_text, secret_key)\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"encrypted_data")," is a URL-safe base64-encoded string."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"encrypt")," accepts strings only, so any objects must be serialized to JSON, XML or other text-based format before encryption."),(0,i.kt)("h2",{id:"decrypting-data"},"Decrypting data"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"decrypt()")," method to decrypt the data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom flet.security import encrypt, decrypt\n\nsecret_key = os.getenv("MY_APP_SECRET_KEY")\nencrypted_data = "601llp2zpPp4QjBWe2cOwGdBQUFBQUJqTTFJbmgyWU5jblVp..."\nplain_text = decrypt(encrypted_data, secret_key)\nprint(plain_text)\n')))}y.isMDXComponent=!0}}]);