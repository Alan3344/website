"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[9273],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=c(t),g=a,f=s["".concat(u,".").concat(g)]||s[g]||p[g]||o;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return l}});var r=t(7294),a=t(6010),o="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return _}});var r=t(7462),a=t(7294),o=t(6010),l=t(2466),i=t(6550),u=t(1980),c=t(7392),d=t(12);function s(e){return function(e){var n,t;return null!=(n=null==(t=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:s(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function g(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,o=(0,i.k6)(),l=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,u._X)(l),(0,a.useCallback)((function(e){if(l){var n=new URLSearchParams(o.location.search);n.set(l,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[l,o])]}function m(e){var n,t,r,o,l=e.defaultValue,i=e.queryString,u=void 0!==i&&i,c=e.groupId,s=p(e),m=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!g({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:l,tabValues:s})})),h=m[0],b=m[1],v=f({queryString:u,groupId:c}),y=v[0],k=v[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),t=(0,d.Nk)(n),r=t[0],o=t[1],[r,(0,a.useCallback)((function(e){n&&o.set(e)}),[n,o])]),_=w[0],N=w[1],C=function(){var e=null!=y?y:_;return g({value:e,tabValues:s})?e:null}();return(0,a.useLayoutEffect)((function(){C&&b(C)}),[C]),{selectedValue:h,selectValue:(0,a.useCallback)((function(e){if(!g({value:e,tabValues:s}))throw new Error("Can't select invalid tab value="+e);b(e),k(e),N(e)}),[k,N,s]),tabValues:s}}var h=t(2389),b="tabList__CuJ",v="tabItem_LNqP";function y(e){var n=e.className,t=e.block,i=e.selectedValue,u=e.selectValue,c=e.tabValues,d=[],s=(0,l.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=d.indexOf(n),r=c[t].value;r!==i&&(s(n),u(r))},g=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var r,a=d.indexOf(e.currentTarget)+1;t=null!=(r=d[a])?r:d[0];break;case"ArrowLeft":var o,l=d.indexOf(e.currentTarget)-1;t=null!=(o=d[l])?o:d[d.length-1]}null==(n=t)||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((function(e){var n=e.value,t=e.label,l=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:function(e){return d.push(e)},onKeyDown:g,onClick:p},l,{className:(0,o.Z)("tabs__item",v,null==l?void 0:l.className,{"tabs__item--active":i===n})}),null!=t?t:n)})))}function k(e){var n=e.lazy,t=e.children,r=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var l=o.find((function(e){return e.props.value===r}));return l?(0,a.cloneElement)(l,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function w(e){var n=m(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",b)},a.createElement(y,(0,r.Z)({},e,n)),a.createElement(k,(0,r.Z)({},e,n)))}function _(e){var n=(0,h.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},6220:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return g}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=t(4866),i=t(5162),u=["components"],c={title:"Draggable",sidebar_label:"Draggable",slug:"draggable"},d=void 0,s={unversionedId:"controls/draggable",id:"controls/draggable",title:"Draggable",description:"A control that can be dragged from to a DragTarget.",source:"@site/docs/controls/draggable.md",sourceDirName:"controls",slug:"/controls/draggable",permalink:"/docs/controls/draggable",draft:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/draggable.md",tags:[],version:"current",frontMatter:{title:"Draggable",sidebar_label:"Draggable",slug:"draggable"},sidebar:"docs",previous:{title:"Audio",permalink:"/docs/controls/audio"},next:{title:"DragTarget",permalink:"/docs/controls/dragtarget"}},p={},g=[{value:"Examples",id:"examples",level:2},{value:"Drag and drop colors",id:"drag-and-drop-colors",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>content</code>",id:"content",level:3},{value:"<code>content_feedback</code>",id:"content_feedback",level:3},{value:"<code>content_when_dragging</code>",id:"content_when_dragging",level:3},{value:"<code>group</code>",id:"group",level:3}],f={toc:g};function m(e){var n=e.components,t=(0,a.Z)(e,u);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A control that can be dragged from to a ",(0,o.kt)("a",{parentName:"p",href:"dragtarget"},"DragTarget"),"."),(0,o.kt)("p",null,"When a draggable control recognizes the start of a drag gesture, it displays a ",(0,o.kt)("a",{parentName:"p",href:"#content_feedback"},(0,o.kt)("inlineCode",{parentName:"a"},"content_feedback"))," control that tracks the user's finger across the screen. If the user lifts their finger while on top of a ",(0,o.kt)("a",{parentName:"p",href:"dragtarget"},"DragTarget"),", that target is given the opportunity to complete drag-and-drop flow."),(0,o.kt)("p",null,"This control displays ",(0,o.kt)("a",{parentName:"p",href:"#content"},(0,o.kt)("inlineCode",{parentName:"a"},"content"))," when zero drags are under way. If ",(0,o.kt)("a",{parentName:"p",href:"#contentwhendragging"},(0,o.kt)("inlineCode",{parentName:"a"},"content_when_dragging"))," is non-null, this control instead displays ",(0,o.kt)("inlineCode",{parentName:"p"},"content_when_dragging")," when one or more drags are underway. Otherwise, this widget always displays ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://flet-controls-gallery.fly.dev/utility/draggable"},"Live example")),(0,o.kt)("h3",{id:"drag-and-drop-colors"},"Drag and drop colors"),(0,o.kt)("img",{src:"/img/docs/controls/drag-and-drop/drag-and-drop-colors.gif",className:"screenshot-50"}),(0,o.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import flet\nfrom flet import (\n    Column,\n    Container,\n    Draggable,\n    DragTarget,\n    DragTargetAcceptEvent,\n    Page,\n    Row,\n    border,\n    colors,\n)\n\n\ndef main(page: Page):\n    page.title = "Drag and Drop example"\n\n    def drag_will_accept(e):\n        e.control.content.border = border.all(\n            2, colors.BLACK45 if e.data == "true" else colors.RED\n        )\n        e.control.update()\n\n    def drag_accept(e: DragTargetAcceptEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        Row(\n            [\n                Column(\n                    [\n                        Draggable(\n                            group="color",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.CYAN,\n                                border_radius=5,\n                            ),\n                            content_feedback=Container(\n                                width=20,\n                                height=20,\n                                bgcolor=colors.CYAN,\n                                border_radius=3,\n                            ),\n                        ),\n                        Draggable(\n                            group="color",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.YELLOW,\n                                border_radius=5,\n                            ),\n                        ),\n                        Draggable(\n                            group="color1",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.GREEN,\n                                border_radius=5,\n                            ),\n                        ),\n                    ]\n                ),\n                Container(width=100),\n                DragTarget(\n                    group="color",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\n\nflet.app(target=main)\n')))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"content"},(0,o.kt)("inlineCode",{parentName:"h3"},"content")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Draggable")," control displays ",(0,o.kt)("a",{parentName:"p",href:"#content"},(0,o.kt)("inlineCode",{parentName:"a"},"content"))," when zero drags are under way. If ",(0,o.kt)("a",{parentName:"p",href:"#contentwhendragging"},(0,o.kt)("inlineCode",{parentName:"a"},"content_when_dragging"))," is non-null, this control instead displays ",(0,o.kt)("inlineCode",{parentName:"p"},"content_when_dragging")," when one or more drags are underway. Otherwise, this control always displays ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,o.kt)("h3",{id:"content_feedback"},(0,o.kt)("inlineCode",{parentName:"h3"},"content_feedback")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," to show under the pointer when a drag is under way."),(0,o.kt)("h3",{id:"content_when_dragging"},(0,o.kt)("inlineCode",{parentName:"h3"},"content_when_dragging")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Control")," to display instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," when one or more drags are under way."),(0,o.kt)("p",null,"If this is ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", then this widget will always display ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," (and so the drag source representation will not change while a drag is under way)."),(0,o.kt)("h3",{id:"group"},(0,o.kt)("inlineCode",{parentName:"h3"},"group")),(0,o.kt)("p",null,"A group this draggable belongs to. For ",(0,o.kt)("a",{parentName:"p",href:"dragtarget"},"DragTarget")," to accept incoming drag both ",(0,o.kt)("inlineCode",{parentName:"p"},"Draggable")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"DragTarget")," must be in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"group"),"."))}m.isMDXComponent=!0}}]);